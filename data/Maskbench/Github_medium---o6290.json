{
  "description": "sample Github_medium/o6290.json",
  "meta": {
    "full_size": 2008,
    "stripped_size": 1579,
    "features": [
      "@minmaxItems",
      "@minmaxLength",
      "additionalItems",
      "additionalProperties",
      "items"
    ],
    "raw_features": [
      "_boolSchema",
      "id",
      "minItems",
      "minLength",
      "properties",
      "type",
      "type:array",
      "type:boolean",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "additionalProperties": true,
    "properties": {
      "additionalAudience": {
        "additionalItems": true,
        "id": "additionalAudience",
        "items": {
          "minLength": 1,
          "type": "string"
        },
        "minItems": 0,
        "type": "array",
        "_uniqueItems": true
      },
      "allowSpontaneousScopes": {
        "description": "Whether spontaneous scopes are allowed",
        "id": "allowSpontaneousScopes",
        "type": "boolean"
      },
      "backchannelLogoutSessionRequired": {
        "description": "Back channel Logout Session Required.",
        "id": "backchannelLogoutSessionRequired",
        "type": "boolean"
      },
      "backchannelLogoutUri": {
        "additionalItems": true,
        "id": "backchannelLogoutUri",
        "items": {
          "minLength": 1,
          "type": "string"
        },
        "minItems": 0,
        "type": "array",
        "_uniqueItems": true
      },
      "consentGatheringScripts": {
        "additionalItems": true,
        "id": "consentGatheringScripts",
        "items": {
          "minLength": 1,
          "type": "string"
        },
        "minItems": 0,
        "type": "array",
        "_uniqueItems": true
      },
      "introspectionScripts": {
        "additionalItems": true,
        "id": "introspectionScripts",
        "items": {
          "minLength": 1,
          "type": "string"
        },
        "minItems": 0,
        "type": "array",
        "_uniqueItems": true
      },
      "keepClientAuthorizationAfterExpiration": {
        "description": "Keep Client Authorization After Expiration.",
        "id": "keepClientAuthorizationAfterExpiration",
        "type": "boolean"
      },
      "postAuthnScripts": {
        "additionalItems": true,
        "id": "postAuthnScripts",
        "items": {
          "minLength": 1,
          "type": "string"
        },
        "minItems": 0,
        "type": "array",
        "_uniqueItems": true
      },
      "runIntrospectionScriptBeforeAccessTokenAsJwtCreationAndIncludeClaims": {
        "description": "Run Introspection Script Before Access Token As Jwt Creation And Include Claims.",
        "id": "runIntrospectionScriptBeforeAccessTokenAsJwtCreationAndIncludeClaims",
        "type": "boolean"
      },
      "spontaneousScopeScriptDns": {
        "additionalItems": true,
        "id": "spontaneousScopeScriptDns",
        "items": {
          "minLength": 1,
          "type": "string"
        },
        "minItems": 0,
        "type": "array",
        "_uniqueItems": true
      },
      "spontaneousScopes": {
        "additionalItems": true,
        "id": "spontaneousScopes",
        "items": {
          "minLength": 1,
          "type": "string"
        },
        "minItems": 0,
        "type": "array",
        "_uniqueItems": true
      },
      "tlsClientAuthSubjectDn": {
        "id": "tlsClientAuthSubjectDn",
        "type": "string"
      }
    },
    "title": "oxAttributes",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "additionalAudience": [
          "audience1",
          "audience2"
        ],
        "allowSpontaneousScopes": true,
        "backchannelLogoutSessionRequired": false,
        "backchannelLogoutUri": [
          "https://example.com/logout",
          "https://example2.com/logout"
        ],
        "consentGatheringScripts": [
          "script1.js",
          "script2.js"
        ],
        "introspectionScripts": [
          "introspectionScript1.js",
          "introspectionScript2.js"
        ],
        "keepClientAuthorizationAfterExpiration": true,
        "postAuthnScripts": [
          "postAuthnScript1.js",
          "postAuthnScript2.js"
        ],
        "runIntrospectionScriptBeforeAccessTokenAsJwtCreationAndIncludeClaims": true,
        "spontaneousScopeScriptDns": [
          "scriptDns1",
          "scriptDns2"
        ],
        "spontaneousScopes": [
          "scope1",
          "scope2"
        ],
        "tlsClientAuthSubjectDn": "CN=example.com,OU=Example Org,O=Example Inc,L=Example City,ST=Example State,C=US"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "additionalAudience": [
          "audience1",
          "audience2"
        ],
        "allowSpontaneousScopes": true,
        "backchannelLogoutSessionRequired": false,
        "backchannelLogoutUri": [
          "https://example.com/logout",
          "https://example2.com/logout"
        ],
        "consentGatheringScripts": [
          "script1.js",
          "script2.js"
        ],
        "introspectionScripts": [
          "introspection1.js",
          "introspection2.js"
        ],
        "keepClientAuthorizationAfterExpiration": true,
        "postAuthnScripts": [
          "postAuthn1.js",
          "postAuthn2.js"
        ],
        "runIntrospectionScriptBeforeAccessTokenAsJwtCreationAndIncludeClaims": true,
        "spontaneousScopeScriptDns": [
          "dns1.example.com",
          "dns2.example.com"
        ],
        "spontaneousScopes": [
          "scope1",
          "scope2"
        ],
        "tlsClientAuthSubjectDn": "CN=client.example.com"
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalItems keyword",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "0 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['consentGatheringScripts']['items']:\n    {'minLength': 1, 'type': 'string'}\n\nOn instance['consentGatheringScripts'][2]:\n    0",
      "data": {
        "additionalAudience": [
          "audience1",
          "audience2",
          123,
          null
        ],
        "allowSpontaneousScopes": true,
        "backchannelLogoutSessionRequired": false,
        "backchannelLogoutUri": [
          "https://example.com/logout",
          "https://example2.com/logout",
          true,
          {}
        ],
        "consentGatheringScripts": [
          "script1.js",
          "script2.js",
          0
        ],
        "introspectionScripts": [
          "introspection1.js",
          "introspection2.js"
        ],
        "keepClientAuthorizationAfterExpiration": true,
        "postAuthnScripts": [
          "postAuthn1.js",
          "postAuthn2.js"
        ],
        "runIntrospectionScriptBeforeAccessTokenAsJwtCreationAndIncludeClaims": true,
        "spontaneousScopeScriptDns": [
          "dns1.example.com",
          "dns2.example.com"
        ],
        "spontaneousScopes": [
          "scope1",
          "scope2"
        ],
        "tlsClientAuthSubjectDn": "CN=client.example.com"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['additionalAudience']['items']:\n    {'minLength': 1, 'type': 'string'}\n\nOn instance['additionalAudience'][0]:\n    ''",
      "data": {
        "additionalAudience": [
          "",
          "audience2"
        ],
        "allowSpontaneousScopes": true,
        "backchannelLogoutSessionRequired": false,
        "backchannelLogoutUri": [
          "https://example.com/logout",
          "https://example2.com/logout"
        ],
        "consentGatheringScripts": [
          "script1.js",
          "script2.js"
        ],
        "introspectionScripts": [
          "introspection1.js",
          "introspection2.js"
        ],
        "keepClientAuthorizationAfterExpiration": true,
        "postAuthnScripts": [
          "postAuthn1.js",
          "postAuthn2.js"
        ],
        "runIntrospectionScriptBeforeAccessTokenAsJwtCreationAndIncludeClaims": true,
        "spontaneousScopeScriptDns": [
          "dns1.example.com",
          "dns2.example.com"
        ],
        "spontaneousScopes": [
          "scope1",
          "scope2"
        ],
        "tlsClientAuthSubjectDn": "CN=client.example.com"
      }
    }
  ]
}