{
  "description": "sample Github_hard/o58446.json",
  "meta": {
    "full_size": 4998,
    "stripped_size": 2215,
    "features": [
      "$ref",
      "additionalProperties",
      "items",
      "oneOf"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "Karma Target",
    "description": "Karma target options for Build Facade.",
    "type": "object",
    "properties": {
      "main": {
        "type": "string",
        "description": "The name of the main entry-point file."
      },
      "tsConfig": {
        "type": "string",
        "description": "The name of the TypeScript configuration file."
      },
      "karmaConfig": {
        "type": "string",
        "description": "The name of the Karma configuration file."
      },
      "polyfills": {
        "type": "string",
        "description": "The name of the polyfills file."
      },
      "assets": {
        "type": "array",
        "description": "List of static application assets.",
        "default": [],
        "items": {
          "$ref": "#/definitions/assetPattern"
        }
      },
      "scripts": {
        "description": "Global scripts to be included in the build.",
        "type": "array",
        "default": [],
        "items": {
          "$ref": "#/definitions/extraEntryPoint"
        }
      },
      "styles": {
        "description": "Global styles to be included in the build.",
        "type": "array",
        "default": [],
        "items": {
          "$ref": "#/definitions/extraEntryPoint"
        }
      },
      "stylePreprocessorOptions": {
        "description": "Options to pass to style preprocessors",
        "type": "object",
        "properties": {
          "includePaths": {
            "description": "Paths to include. Paths will be resolved to project root.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        },
        "additionalProperties": false
      },
      "environment": {
        "type": "string",
        "description": "Defines the build environment.",
        "x-deprecated": "This option has no effect."
      },
      "include": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Globs of files to include, relative to workspace or project root. \nThere are 2 special cases:\n - when a path to directory is provided, all spec files ending \".spec.@(ts|tsx)\" will be included\n - when a path to a file is provided, and a matching spec file exists it will be included instead"
      },
      "sourceMap": {
        "description": "Output sourcemaps.",
        "default": true,
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "scripts": {
                "type": "boolean",
                "description": "Output sourcemaps for all scripts.",
                "default": true
              },
              "styles": {
                "type": "boolean",
                "description": "Output sourcemaps for all styles.",
                "default": true
              },
              "vendor": {
                "type": "boolean",
                "description": "Resolve vendor packages sourcemaps.",
                "default": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "boolean"
          }
        ]
      },
      "vendorSourceMap": {
        "type": "boolean",
        "description": "Resolve vendor packages sourcemaps.",
        "x-deprecated": true,
        "default": false
      },
      "evalSourceMap": {
        "type": "boolean",
        "description": "Output in-file eval sourcemaps.",
        "x-deprecated": true
      },
      "progress": {
        "type": "boolean",
        "description": "Log progress to the console while building."
      },
      "watch": {
        "type": "boolean",
        "description": "Run build when files change."
      },
      "poll": {
        "type": "number",
        "description": "Enable and define the file watching poll time period in milliseconds."
      },
      "preserveSymlinks": {
        "type": "boolean",
        "description": "Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set."
      },
      "browsers": {
        "type": "string",
        "description": "Override which browsers tests are run against."
      },
      "codeCoverage": {
        "type": "boolean",
        "description": "Output a code coverage report.",
        "default": false
      },
      "codeCoverageExclude": {
        "type": "array",
        "description": "Globs to exclude from code coverage.",
        "items": {
          "type": "string"
        },
        "default": []
      },
      "fileReplacements": {
        "description": "Replace files with other files in the build.",
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "src": {
                  "type": "string"
                },
                "replaceWith": {
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "required": [
                "src",
                "replaceWith"
              ]
            },
            {
              "type": "object",
              "properties": {
                "replace": {
                  "type": "string"
                },
                "with": {
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "required": [
                "replace",
                "with"
              ]
            }
          ]
        },
        "default": []
      },
      "reporters": {
        "type": "array",
        "description": "Karma reporters to use. Directly passed to the karma runner.",
        "items": {
          "type": "string"
        }
      },
      "webWorkerTsConfig": {
        "type": "string",
        "description": "TypeScript configuration for Web Worker modules."
      }
    },
    "additionalProperties": false,
    "required": [
      "main",
      "tsConfig",
      "karmaConfig"
    ],
    "definitions": {
      "assetPattern": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "glob": {
                "type": "string",
                "description": "The pattern to match."
              },
              "input": {
                "type": "string",
                "description": "The input directory path in which to apply 'glob'. Defaults to the project root."
              },
              "output": {
                "type": "string",
                "description": "Absolute path within the output."
              },
              "ignore": {
                "description": "An array of globs to ignore.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false,
            "required": [
              "glob",
              "input",
              "output"
            ]
          },
          {
            "type": "string"
          }
        ]
      },
      "extraEntryPoint": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "input": {
                "type": "string",
                "description": "The file to include."
              },
              "bundleName": {
                "type": "string",
                "description": "The bundle name for this extra entry point."
              },
              "lazy": {
                "type": "boolean",
                "description": "If the bundle will be lazy loaded.",
                "default": false,
                "x-deprecated": "Use 'inject' option with 'false' value instead."
              },
              "inject": {
                "type": "boolean",
                "description": "If the bundle will be referenced in the HTML file.",
                "default": true
              }
            },
            "additionalProperties": false,
            "required": [
              "input"
            ]
          },
          {
            "type": "string",
            "description": "The file to include."
          }
        ]
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "main": "main.ts",
        "tsConfig": "tsconfig.json",
        "karmaConfig": "karma.conf.js",
        "polyfills": "polyfills.ts",
        "assets": [
          {
            "glob": "**/*",
            "input": "src/assets",
            "output": "assets"
          },
          "favicon.ico"
        ],
        "scripts": [
          {
            "input": "src/scripts/script1.ts",
            "bundleName": "script1",
            "inject": true
          },
          "src/scripts/script2.ts"
        ],
        "styles": [
          {
            "input": "src/styles/style1.scss",
            "bundleName": "style1",
            "inject": true
          },
          "src/styles/style2.css"
        ],
        "stylePreprocessorOptions": {
          "includePaths": [
            "src/styles"
          ]
        },
        "environment": "dev",
        "include": [
          "src/app/**/*.spec.ts",
          "src/app/app.component.spec.ts"
        ],
        "sourceMap": {
          "scripts": true,
          "styles": true,
          "vendor": false
        },
        "progress": true,
        "watch": true,
        "poll": 1000,
        "preserveSymlinks": true,
        "browsers": "Chrome",
        "codeCoverage": true,
        "codeCoverageExclude": [
          "**/node_modules/**"
        ],
        "fileReplacements": [
          {
            "src": "src/environments/environment.ts",
            "replaceWith": "src/environments/environment.prod.ts"
          }
        ],
        "reporters": [
          "progress",
          "dots"
        ],
        "webWorkerTsConfig": "tsconfig.worker.json"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "main": "main.ts",
        "tsConfig": "tsconfig.json",
        "karmaConfig": "karma.conf.js",
        "polyfills": "polyfills.ts",
        "assets": [
          {
            "glob": "**/*",
            "input": "src/assets",
            "output": "assets"
          },
          "favicon.ico"
        ],
        "scripts": [
          {
            "input": "src/app/app.module.ts",
            "bundleName": "app",
            "inject": true
          },
          "src/app/polyfills.ts"
        ],
        "styles": [
          {
            "input": "src/styles.css",
            "bundleName": "styles",
            "inject": true
          }
        ],
        "stylePreprocessorOptions": {
          "includePaths": [
            "src/styles"
          ]
        },
        "environment": "dev",
        "include": [
          "src/app/**/*.spec.ts",
          "src/app/app.component.spec.ts"
        ],
        "sourceMap": {
          "scripts": true,
          "styles": true,
          "vendor": false
        },
        "progress": true,
        "watch": true,
        "poll": 1000,
        "preserveSymlinks": true,
        "browsers": "Chrome",
        "codeCoverage": true,
        "codeCoverageExclude": [
          "**/*.spec.ts"
        ],
        "fileReplacements": [
          {
            "src": "src/environments/environment.ts",
            "replaceWith": "src/environments/environment.prod.ts"
          }
        ],
        "reporters": [
          "progress",
          "kjhtml"
        ],
        "webWorkerTsConfig": "tsconfig.worker.json"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "'invalidValue' is not of type 'boolean'\n\nFailed validating 'type' in schema[0]['properties']['vendor']:\n    {'type': 'boolean',\n     'description': 'Resolve vendor packages sourcemaps.',\n     'default': False}\n\nOn instance['vendor']:\n    'invalidValue'",
      "data": {
        "main": 123,
        "tsConfig": "tsconfig.json",
        "karmaConfig": "karma.conf.js",
        "polyfills": "polyfills.ts",
        "assets": [
          {
            "glob": "**/*",
            "input": "src/assets",
            "output": "assets",
            "invalidKey": "value"
          },
          "favicon.ico"
        ],
        "scripts": [
          {
            "input": "src/app/app.module.ts",
            "bundleName": "app",
            "inject": true
          },
          "src/app/polyfills.ts"
        ],
        "styles": [
          {
            "input": "src/styles.css",
            "bundleName": "styles",
            "inject": true
          }
        ],
        "stylePreprocessorOptions": {
          "includePaths": [
            123
          ]
        },
        "environment": "dev",
        "include": [
          "src/app/**/*.spec.ts",
          "src/app/app.component.spec.ts"
        ],
        "sourceMap": {
          "scripts": true,
          "styles": true,
          "vendor": "invalidValue"
        },
        "progress": true,
        "watch": true,
        "poll": 1000,
        "preserveSymlinks": true,
        "browsers": "Chrome",
        "codeCoverage": true,
        "codeCoverageExclude": [
          "**/*.spec.ts"
        ],
        "fileReplacements": [
          {
            "src": "src/environments/environment.ts",
            "replaceWith": "src/environments/environment.prod.ts",
            "invalidKey": "value"
          }
        ],
        "reporters": [
          "progress",
          123
        ],
        "webWorkerTsConfig": "tsconfig.worker.json"
      }
    }
  ]
}