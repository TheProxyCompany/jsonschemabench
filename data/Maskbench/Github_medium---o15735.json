{
  "description": "sample Github_medium/o15735.json",
  "meta": {
    "full_size": 1626,
    "stripped_size": 320,
    "features": [],
    "raw_features": [
      "properties",
      "required",
      "type",
      "type:boolean",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "properties": {
      "directory": {
        "default": "+state",
        "description": "The name of the folder used to contain/group the generated NgRx files.",
        "type": "string"
      },
      "facade": {
        "default": false,
        "description": "Create a Facade class for the the Feature.",
        "type": "boolean",
        "x-prompt": "Would you like to use a Facade with your NgRx state?"
      },
      "minimal": {
        "default": false,
        "description": "Only register the root state management setup or feature state.",
        "type": "boolean"
      },
      "module": {
        "description": "The path relative from root to NgModule where the feature state will be registered. The host directory will create/use the new state directory.",
        "type": "string",
        "x-prompt": "What is the path to the module where this NgRx state should be registered?"
      },
      "name": {
        "$default": {
          "$source": "argv",
          "index": 0
        },
        "description": "Name of the NgRx feature state, such as \"products\" or \"users\"). Recommended to use the plural form of the name.",
        "type": "string",
        "x-prompt": "What name would you like to use for the NgRx feature state? An example would be \"users\"."
      },
      "root": {
        "default": false,
        "description": "Setup root or feature state management with NgRx.",
        "type": "boolean",
        "x-prompt": "Is this the root state of the application?"
      },
      "skipFormat": {
        "default": false,
        "description": "Skip formatting of generated files.",
        "type": "boolean"
      },
      "skipImport": {
        "default": false,
        "description": "Generate NgRx feature files without registering the feature in the NgModule.",
        "type": "boolean"
      },
      "skipPackageJson": {
        "default": false,
        "description": "Do not update the package.json with NgRx dependencies.",
        "type": "boolean"
      }
    },
    "required": [
      "module"
    ],
    "title": "Ngrx Entity Service Schema",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "directory": "+state",
        "facade": true,
        "minimal": false,
        "module": "app.module.ts",
        "name": "users",
        "root": false,
        "skipFormat": false,
        "skipImport": false,
        "skipPackageJson": false
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['module']:\n    {'description': 'The path relative from root to NgModule where the '\n                    'feature state will be registered. The host directory '\n                    'will create/use the new state directory.',\n     'type': 'string',\n     'x-prompt': 'What is the path to the module where this NgRx state '\n                 'should be registered?'}\n\nOn instance['module']:\n    123",
      "data": {
        "directory": "+state",
        "facade": true,
        "minimal": false,
        "module": 123,
        "name": "users",
        "root": false,
        "skipFormat": false,
        "skipImport": false,
        "skipPackageJson": false
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['directory']:\n    {'default': '+state',\n     'description': 'The name of the folder used to contain/group the '\n                    'generated NgRx files.',\n     'type': 'string'}\n\nOn instance['directory']:\n    123",
      "data": {
        "directory": 123,
        "facade": true,
        "minimal": false,
        "module": "app.module.ts",
        "name": "users",
        "root": false,
        "skipFormat": false,
        "skipImport": false,
        "skipPackageJson": false
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"module\" is a required property",
      "python_error": "'module' is a required property\n\nFailed validating 'required' in schema:\n    {'properties': {'directory': {'default': '+state',\n                                  'description': 'The name of the folder '\n                                                 'used to contain/group '\n                                                 'the generated NgRx '\n                                                 'files.',\n                                  'type': 'string'},\n                    'facade': {'default': False,\n                               'description': 'Create a Facade class for '\n                                              'the the Feature.',\n                               'type': 'boolean',\n                               'x-prompt': 'Would you like to use a Facade '\n                                           'with your NgRx state?'},\n                    'minimal': {'default': False,\n                                'description': 'Only register the root '\n                                               'state m.. (3154 more)",
      "data": {
        "directory": "+state",
        "facade": true,
        "minimal": false,
        "name": "users",
        "root": false,
        "skipFormat": false,
        "skipImport": false,
        "skipPackageJson": false
      }
    }
  ]
}