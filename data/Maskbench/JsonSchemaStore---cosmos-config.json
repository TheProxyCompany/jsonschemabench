{
  "description": "sample JsonSchemaStore/cosmos-config.json",
  "meta": {
    "full_size": 6607,
    "stripped_size": 2837,
    "features": [
      "@minmaxLength",
      "@minmaxNumber",
      "additionalProperties",
      "anyOf",
      "enum",
      "items",
      "patternProperties",
      "uniqueItems"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "id",
      "minLength",
      "minimum",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:boolean",
      "type:null",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "additionalProperties": false,
    "id": "https://json.schemastore.org/cosmos-config.json",
    "properties": {
      "$schema": {
        "type": "string"
      },
      "rootDir": {
        "description": "The root directory that all others paths in this config are relative to. Usually the root of your repo. If omitted, rootDir is equal to the directory containing your Cosmos config. When you don't use a Cosmos config, rootDir defaults to the current working directory.",
        "type": "string",
        "minLength": 1
      },
      "exportPath": {
        "description": "Where to generate static exports on disk. [default: \"cosmos-export\"]",
        "type": "string",
        "minLength": 1
      },
      "detectLocalPlugins": {
        "description": "Automatically detect and load local plugins",
        "type": "boolean"
      },
      "disablePlugins": {
        "description": "Disable plugins",
        "type": "boolean"
      },
      "staticPath": {
        "description": "Dir path to serve static assets from.",
        "type": "string",
        "minLength": 1
      },
      "plugins": {
        "description": "Module IDs of Cosmos plugins (eg. \"react-cosmos-plugin-open-fixture\" or \"../path/to/my-plugin\").",
        "type": "array",
        "items": {
          "type": "string",
          "minLength": 1
        },
        "uniqueItems": true
      },
      "publicUrl": {
        "description": "Base URL for static assets. [default: \"/\"]",
        "type": "string"
      },
      "fixturesDir": {
        "description": "Name for directories that contain fixtures (eg. __fixtures__/example.jsx). [default: \"__fixtures__\"]",
        "type": "string",
        "minLength": 1
      },
      "fixtureFileSuffix": {
        "description": "Suffix for fixture files (eg. example.fixture.jsx). [default: \"fixture\"]",
        "type": "string",
        "minLength": 1
      },
      "ignore": {
        "description": "Patterns for ignoring fixture and decorator files (eg. [\"**/dist/**\"]]).",
        "type": "array",
        "items": {
          "type": "string",
          "minLength": 1
        },
        "uniqueItems": true
      },
      "watchDirs": {
        "description": "Directories where the Cosmos server watches for fixture files changes while running. [default: [\".\"]]",
        "type": "array",
        "items": {
          "type": "string",
          "minLength": 1
        },
        "uniqueItems": true
      },
      "lazy": {
        "description": "Dynamically import fixture and decorator modules as they are loaded. When false all fixture and decorator modules are imported statically and bundled together. [default: false]",
        "type": "boolean"
      },
      "exposeImports": {
        "description": "Expose user imports and config required for the Cosmos renderer. Used with React Native and in custom integrations. When a path is specified it requires a file extension (eg. \"src/cosmos.imports.ts\"). [default: false]",
        "anyOf": [
          {
            "type": "string",
            "minLength": 1
          },
          {
            "type": "boolean"
          }
        ]
      },
      "hostname": {
        "description": "Dev server hostname. Set to null to accept connections with any hostname. [default: null]",
        "anyOf": [
          {
            "type": "string",
            "minLength": 1
          },
          {
            "type": "null"
          }
        ]
      },
      "port": {
        "description": "Dev server port. [default: 5000]",
        "type": "number"
      },
      "portRetries": {
        "description": "Max number of port retries. [default: 10]",
        "type": "number"
      },
      "https": {
        "description": "Server will be served over HTTPS.",
        "type": "boolean"
      },
      "httpsOptions": {
        "description": "Additional options for HTTPS server.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "certPath": {
            "description": "Path of a certificate file",
            "type": "string"
          },
          "keyPath": {
            "description": "Path of a certificate's key file",
            "type": "string"
          }
        }
      },
      "httpProxy": {
        "description": "Proxy some URLs to a different HTTP server (eg. an API backend dev server). Similar to devServer.proxy in webpack config.",
        "type": "object",
        "additionalProperties": true,
        "patternProperties": {
          ".*": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "description": "Advanced HTTP proxy config.",
                "additionalProperties": true,
                "required": [
                  "target"
                ],
                "properties": {
                  "target": {
                    "type": "string"
                  },
                  "secure": {
                    "type": "boolean"
                  },
                  "pathRewrite": {
                    "type": "object",
                    "patternProperties": {
                      ".*": {
                        "type": "string"
                      }
                    }
                  },
                  "logLevel": {
                    "type": "string",
                    "enum": [
                      "error",
                      "debug",
                      "info",
                      "warn",
                      "silent"
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      "globalImports": {
        "description": "Modules to be imported before loading components. Stuff like reset.css, polyfills, etc.",
        "type": "array",
        "items": {
          "type": "string",
          "minLength": 1
        },
        "uniqueItems": true
      },
      "rendererUrl": {
        "description": "Required when renderer doesn't run on the same port (or host) as the Playground. Useful for integrations with build tools. [default: null]",
        "anyOf": [
          {
            "type": "string",
            "minLength": 1
          },
          {
            "type": "null"
          }
        ]
      },
      "dom": {
        "description": "DOM-related options",
        "type": "object",
        "properties": {
          "containerQuerySelector": {
            "description": "Document selector for existing element to use as component parent (eg. #root). A blank container element is created from scratch if no selector is provided. [default: null]",
            "type": [
              "string",
              "null"
            ],
            "minLength": 1
          }
        }
      },
      "vite": {
        "description": "Vite-related options",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "configPath": {
            "description": "Path to Vite config. Set to false to disable reading it from the default path. [default: \"vite.config.js\"]",
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "enum": [
                  false
                ]
              }
            ]
          },
          "indexPath": {
            "description": "Path to index module (eg. \"src/my-index.tsx\"). [default: matches common index/main module paths]",
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ]
          },
          "port": {
            "description": "Vite renderer port. [default: 5050]",
            "type": "number"
          }
        }
      },
      "webpack": {
        "description": "Webpack-related options",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "configPath": {
            "description": "Path to an existing webpack config, which Cosmos will reuse to build your code. Set to null to disable this behavior. [default: \"webpack.config.js\"]",
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ]
          },
          "overridePath": {
            "description": "Path to a user module that customizes the webpack config used by Cosmos. Set to null to disable this behavior. [default: \"webpack.override.js\"]",
            "anyOf": [
              {
                "type": "string",
                "minLength": 1
              },
              {
                "type": "null"
              }
            ]
          },
          "includeHashInOutputFilename": {
            "description": "Changes output filename from \"[name].js\" to \"[name].[contenthash].js\". [default: false]",
            "type": "boolean"
          },
          "hotReload": {
            "description": "Enable webpack's Hot Module Replacement. [default: true]",
            "type": "boolean"
          },
          "reloadOnFail": {
            "description": "When using webpack's Hot Module Replacement, enable automatic location reload after webpack fails to update modules. [default: false]",
            "type": "boolean"
          }
        }
      },
      "ui": {
        "description": "UI plugin options",
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "responsivePreview": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "devices": {
                "description": "List of device viewports",
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "label",
                    "width",
                    "height"
                  ],
                  "properties": {
                    "label": {
                      "type": "string",
                      "minLength": 1
                    },
                    "width": {
                      "type": "number",
                      "minimum": 1
                    },
                    "height": {
                      "type": "number",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "title": "JSON schema for React Cosmos configs",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "rootDir": "/path/to/project",
        "exportPath": "cosmos-export",
        "detectLocalPlugins": true,
        "disablePlugins": false,
        "staticPath": "public",
        "plugins": [
          "react-cosmos-plugin-open-fixture",
          "../path/to/my-plugin"
        ],
        "publicUrl": "/",
        "fixturesDir": "__fixtures__",
        "fixtureFileSuffix": "fixture",
        "ignore": [
          "**/dist/**"
        ],
        "watchDirs": [
          "."
        ],
        "lazy": false,
        "exposeImports": false,
        "hostname": null,
        "port": 5000,
        "portRetries": 10,
        "https": false,
        "httpProxy": {
          "/api": "http://localhost:8080"
        },
        "globalImports": [
          "reset.css",
          "polyfills.js"
        ],
        "rendererUrl": null,
        "dom": {
          "containerQuerySelector": "#root"
        },
        "vite": {
          "configPath": "vite.config.js",
          "indexPath": "src/index.tsx",
          "port": 5050
        },
        "webpack": {
          "configPath": "webpack.config.js",
          "overridePath": "webpack.override.js",
          "includeHashInOutputFilename": false,
          "hotReload": true,
          "reloadOnFail": false
        },
        "ui": {
          "responsivePreview": {
            "devices": [
              {
                "label": "Desktop",
                "width": 1920,
                "height": 1080
              },
              {
                "label": "Tablet",
                "width": 768,
                "height": 1024
              },
              {
                "label": "Mobile",
                "width": 375,
                "height": 667
              }
            ]
          }
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "rootDir": "/path/to/project",
        "exportPath": "cosmos-export",
        "detectLocalPlugins": true,
        "disablePlugins": false,
        "staticPath": "/static",
        "plugins": [
          "react-cosmos-plugin-open-fixture",
          "../path/to/my-plugin"
        ],
        "publicUrl": "/",
        "fixturesDir": "__fixtures__",
        "fixtureFileSuffix": "fixture",
        "ignore": [
          "**/dist/**"
        ],
        "watchDirs": [
          "."
        ],
        "lazy": false,
        "exposeImports": false,
        "hostname": null,
        "port": 5000,
        "portRetries": 10,
        "https": false,
        "httpsOptions": {
          "certPath": "/path/to/cert",
          "keyPath": "/path/to/key"
        },
        "httpProxy": {
          "/api": {
            "target": "http://localhost:8080",
            "secure": false,
            "pathRewrite": {
              "^/api": ""
            },
            "logLevel": "error"
          }
        },
        "globalImports": [
          "reset.css",
          "polyfills.js"
        ],
        "rendererUrl": null,
        "dom": {
          "containerQuerySelector": "#root"
        },
        "vite": {
          "configPath": "vite.config.js",
          "indexPath": "src/my-index.tsx",
          "port": 5050
        },
        "webpack": {
          "configPath": "webpack.config.js",
          "overridePath": "webpack.override.js",
          "includeHashInOutputFilename": false,
          "hotReload": true,
          "reloadOnFail": false
        },
        "ui": {
          "responsivePreview": {
            "devices": [
              {
                "label": "Desktop",
                "width": 1920,
                "height": 1080
              },
              {
                "label": "Tablet",
                "width": 768,
                "height": 1024
              },
              {
                "label": "Mobile",
                "width": 375,
                "height": 667
              }
            ]
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on uniqueItems keyword",
      "valid": false,
      "rust_error": "[\"react-cosmos-plugin-open-fixture\",\"react-cosmos-plugin-open-fixture\",\"../path/to/my-plugin\"] has non-unique elements",
      "python_error": "['react-cosmos-plugin-open-fixture', 'react-cosmos-plugin-open-fixture', '../path/to/my-plugin'] has non-unique elements\n\nFailed validating 'uniqueItems' in schema['properties']['plugins']:\n    {'description': 'Module IDs of Cosmos plugins (eg. '\n                    '\"react-cosmos-plugin-open-fixture\" or '\n                    '\"../path/to/my-plugin\").',\n     'type': 'array',\n     'items': {'type': 'string', 'minLength': 1},\n     'uniqueItems': True}\n\nOn instance['plugins']:\n    ['react-cosmos-plugin-open-fixture',\n     'react-cosmos-plugin-open-fixture',\n     '../path/to/my-plugin']",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "rootDir": "/path/to/project",
        "exportPath": "cosmos-export",
        "detectLocalPlugins": true,
        "disablePlugins": false,
        "staticPath": "/static",
        "plugins": [
          "react-cosmos-plugin-open-fixture",
          "react-cosmos-plugin-open-fixture",
          "../path/to/my-plugin"
        ],
        "publicUrl": "/",
        "fixturesDir": "__fixtures__",
        "fixtureFileSuffix": "fixture",
        "ignore": [
          "**/dist/**"
        ],
        "watchDirs": [
          "."
        ],
        "lazy": false,
        "exposeImports": false,
        "hostname": null,
        "port": 5000,
        "portRetries": 10,
        "https": false,
        "httpsOptions": {
          "certPath": "/path/to/cert",
          "keyPath": "/path/to/key"
        },
        "httpProxy": {
          "/api": {
            "target": "http://localhost:8080",
            "secure": false,
            "pathRewrite": {
              "^/api": ""
            },
            "logLevel": "error"
          }
        },
        "globalImports": [
          "reset.css",
          "polyfills.js",
          "polyfills.js",
          "reset.css"
        ],
        "rendererUrl": null,
        "dom": {
          "containerQuerySelector": "#root"
        },
        "vite": {
          "configPath": "vite.config.js",
          "indexPath": "src/my-index.tsx",
          "port": 5050
        },
        "webpack": {
          "configPath": "webpack.config.js",
          "overridePath": "webpack.override.js",
          "includeHashInOutputFilename": false,
          "hotReload": true,
          "reloadOnFail": false
        },
        "ui": {
          "responsivePreview": {
            "devices": [
              {
                "label": "Desktop",
                "width": 1920,
                "height": 1080
              },
              {
                "label": "Tablet",
                "width": 768,
                "height": 1024
              },
              {
                "label": "Tablet",
                "width": 768,
                "height": 1024
              },
              {
                "label": "Mobile",
                "width": 375,
                "height": 667
              }
            ]
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "['', ''] has non-unique elements\n\nFailed validating 'uniqueItems' in schema['properties']['watchDirs']:\n    {'description': 'Directories where the Cosmos server watches for '\n                    'fixture files changes while running. [default: [\".\"]]',\n     'type': 'array',\n     'items': {'type': 'string', 'minLength': 1},\n     'uniqueItems': True}\n\nOn instance['watchDirs']:\n    ['', '']",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "lazy": false,
        "exportPath": "",
        "port": 0,
        "portRetries": 0,
        "httpsOptions": {
          "certPath": ""
        },
        "watchDirs": [
          "",
          ""
        ],
        "plugins": [
          "",
          ""
        ],
        "ignore": [
          "",
          "**/dist/**"
        ],
        "vite": {
          "configPath": ""
        },
        "webpack": {
          "configPath": ""
        },
        "ui": {
          "responsivePreview": {
            "devices": [
              {
                "label": "",
                "width": 0,
                "height": 0
              }
            ]
          }
        },
        "dom": {
          "containerQuerySelector": ""
        },
        "fixturesDir": "",
        "fixtureFileSuffix": "",
        "globalImports": [
          "",
          "polyfills.js"
        ],
        "exposeImports": "",
        "rootDir": "",
        "staticPath": "",
        "publicUrl": "",
        "rendererUrl": "",
        "hostname": "",
        "detectLocalPlugins": false,
        "disablePlugins": true,
        "https": true
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "{\"target\":\"http://localhost:8080\",\"secure\":false,\"pathRewrite\":{\"^/api\":\"\"},\"logLevel\":10} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{'target': 'http://localhost:8080', 'secure': False, 'pathRewrite': {'^/api': ''}, 'logLevel': 10} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema['properties']['httpProxy']['patternProperties']['.*']:\n    {'anyOf': [{'type': 'string'},\n               {'type': 'object',\n                'description': 'Advanced HTTP proxy config.',\n                'additionalProperties': True,\n                'required': ['target'],\n                'properties': {'target': {'type': 'string'},\n                               'secure': {'type': 'boolean'},\n                               'pathRewrite': {'type': 'object',\n                                               'patternProperties': {'.*': {'type': 'string'}}},\n                               'logLevel': {'type': 'string',\n                                            'enum': ['error',\n                                                     'debug',\n                                                     'info',\n                                        .. (241 more)",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "rootDir": "/path/to/project",
        "exportPath": "cosmos-export",
        "detectLocalPlugins": true,
        "disablePlugins": false,
        "staticPath": "/static",
        "plugins": [
          "react-cosmos-plugin-open-fixture",
          "../path/to/my-plugin"
        ],
        "publicUrl": "/",
        "fixturesDir": "__fixtures__",
        "fixtureFileSuffix": "fixture",
        "ignore": [
          "**/dist/**"
        ],
        "watchDirs": [
          "."
        ],
        "lazy": false,
        "exposeImports": false,
        "hostname": null,
        "port": 5000,
        "portRetries": 10,
        "https": false,
        "httpsOptions": {
          "certPath": "/path/to/cert",
          "keyPath": "/path/to/key"
        },
        "httpProxy": {
          "/api": {
            "target": "http://localhost:8080",
            "secure": false,
            "pathRewrite": {
              "^/api": ""
            },
            "logLevel": 10
          }
        },
        "globalImports": [
          "reset.css",
          "polyfills.js"
        ],
        "rendererUrl": null,
        "dom": {
          "containerQuerySelector": "#root"
        },
        "vite": {
          "configPath": "vite.config.js",
          "indexPath": "src/my-index.tsx",
          "port": 5050
        },
        "webpack": {
          "configPath": "webpack.config.js",
          "overridePath": "webpack.override.js",
          "includeHashInOutputFilename": false,
          "hotReload": true,
          "reloadOnFail": false
        },
        "ui": {
          "responsivePreview": {
            "devices": [
              {
                "label": "Desktop",
                "width": "1920px",
                "height": 1080
              },
              {
                "label": "Tablet",
                "width": 768,
                "height": 1024
              },
              {
                "label": "Mobile",
                "width": 375,
                "height": 667
              }
            ]
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['rootDir']:\n    {'description': 'The root directory that all others paths in this '\n                    'config are relative to. Usually the root of your '\n                    'repo. If omitted, rootDir is equal to the directory '\n                    \"containing your Cosmos config. When you don't use a \"\n                    'Cosmos config, rootDir defaults to the current '\n                    'working directory.',\n     'type': 'string',\n     'minLength': 1}\n\nOn instance['rootDir']:\n    ''",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "rootDir": "",
        "exportPath": "cosmos-export",
        "detectLocalPlugins": true,
        "disablePlugins": false,
        "staticPath": "/static",
        "plugins": [
          "react-cosmos-plugin-open-fixture",
          "../path/to/my-plugin"
        ],
        "publicUrl": "/",
        "fixturesDir": "__fixtures__",
        "fixtureFileSuffix": "fixture",
        "ignore": [
          "**/dist/**"
        ],
        "watchDirs": [
          "."
        ],
        "lazy": false,
        "exposeImports": false,
        "hostname": null,
        "port": 5000,
        "portRetries": 10,
        "https": false,
        "httpsOptions": {
          "certPath": "/path/to/cert",
          "keyPath": "/path/to/key"
        },
        "httpProxy": {
          "/api": {
            "target": "http://localhost:8080",
            "secure": false,
            "pathRewrite": {
              "^/api": ""
            },
            "logLevel": "error"
          }
        },
        "globalImports": [
          "reset.css",
          "polyfills.js"
        ],
        "rendererUrl": null,
        "dom": {
          "containerQuerySelector": "#root"
        },
        "vite": {
          "configPath": "vite.config.js",
          "indexPath": "src/my-index.tsx",
          "port": 5050
        },
        "webpack": {
          "configPath": "webpack.config.js",
          "overridePath": "webpack.override.js",
          "includeHashInOutputFilename": false,
          "hotReload": true,
          "reloadOnFail": false
        },
        "ui": {
          "responsivePreview": {
            "devices": [
              {
                "label": "Desktop",
                "width": 1920,
                "height": 1080
              },
              {
                "label": "Tablet",
                "width": 768,
                "height": 1024
              },
              {
                "label": "Mobile",
                "width": 375,
                "height": 667
              }
            ]
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "123 is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "123 is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema['properties']['exposeImports']:\n    {'description': 'Expose user imports and config required for the '\n                    'Cosmos renderer. Used with React Native and in custom '\n                    'integrations. When a path is specified it requires a '\n                    'file extension (eg. \"src/cosmos.imports.ts\"). '\n                    '[default: false]',\n     'anyOf': [{'type': 'string', 'minLength': 1}, {'type': 'boolean'}]}\n\nOn instance['exposeImports']:\n    123",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "rootDir": "/path/to/project",
        "exportPath": "cosmos-export",
        "detectLocalPlugins": true,
        "disablePlugins": false,
        "staticPath": "/static",
        "plugins": [
          "react-cosmos-plugin-open-fixture",
          "../path/to/my-plugin"
        ],
        "publicUrl": "/",
        "fixturesDir": "__fixtures__",
        "fixtureFileSuffix": "fixture",
        "ignore": [
          "**/dist/**"
        ],
        "watchDirs": [
          "."
        ],
        "lazy": false,
        "exposeImports": 123,
        "hostname": null,
        "port": 5000,
        "portRetries": 10,
        "https": false,
        "httpsOptions": {
          "certPath": "/path/to/cert",
          "keyPath": "/path/to/key"
        },
        "httpProxy": {
          "/api": {
            "target": "http://localhost:8080",
            "secure": false,
            "pathRewrite": {
              "^/api": ""
            },
            "logLevel": "error"
          }
        },
        "globalImports": [
          "reset.css",
          "polyfills.js"
        ],
        "rendererUrl": null,
        "dom": {
          "containerQuerySelector": "#root"
        },
        "vite": {
          "configPath": "vite.config.js",
          "indexPath": "src/my-index.tsx",
          "port": 5050
        },
        "webpack": {
          "configPath": "webpack.config.js",
          "overridePath": "webpack.override.js",
          "includeHashInOutputFilename": false,
          "hotReload": true,
          "reloadOnFail": false
        },
        "ui": {
          "responsivePreview": {
            "devices": [
              {
                "label": "Desktop",
                "width": 1920,
                "height": 1080
              },
              {
                "label": "Tablet",
                "width": 768,
                "height": 1024
              },
              {
                "label": "Mobile",
                "width": 375,
                "height": 667
              }
            ]
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['rootDir']:\n    {'description': 'The root directory that all others paths in this '\n                    'config are relative to. Usually the root of your '\n                    'repo. If omitted, rootDir is equal to the directory '\n                    \"containing your Cosmos config. When you don't use a \"\n                    'Cosmos config, rootDir defaults to the current '\n                    'working directory.',\n     'type': 'string',\n     'minLength': 1}\n\nOn instance['rootDir']:\n    ''",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "rootDir": "",
        "exportPath": "cosmos-export",
        "detectLocalPlugins": true,
        "disablePlugins": false,
        "staticPath": "/static",
        "plugins": [
          "react-cosmos-plugin-open-fixture",
          "../path/to/my-plugin"
        ],
        "publicUrl": "/",
        "fixturesDir": "__fixtures__",
        "fixtureFileSuffix": "fixture",
        "ignore": [
          "**/dist/**"
        ],
        "watchDirs": [
          "."
        ],
        "lazy": false,
        "exposeImports": false,
        "hostname": null,
        "port": 5000,
        "portRetries": 10,
        "https": false,
        "httpsOptions": {
          "certPath": "/path/to/cert",
          "keyPath": "/path/to/key"
        },
        "httpProxy": {
          "/api": {
            "target": "http://localhost:8080",
            "secure": false,
            "pathRewrite": {
              "^/api": ""
            },
            "logLevel": "unknown"
          }
        },
        "globalImports": [
          "reset.css",
          "polyfills.js"
        ],
        "rendererUrl": null,
        "dom": {
          "containerQuerySelector": "#root"
        },
        "vite": {
          "configPath": "vite.config.js",
          "indexPath": "src/my-index.tsx",
          "port": 5050
        },
        "webpack": {
          "configPath": "webpack.config.js",
          "overridePath": "webpack.override.js",
          "includeHashInOutputFilename": false,
          "hotReload": true,
          "reloadOnFail": false
        },
        "ui": {
          "responsivePreview": {
            "devices": [
              {
                "label": "Desktop",
                "width": 1920,
                "height": 1080
              },
              {
                "label": "Tablet",
                "width": 768,
                "height": 1024
              },
              {
                "label": "Mobile",
                "width": 0,
                "height": 667
              }
            ]
          }
        }
      }
    }
  ]
}