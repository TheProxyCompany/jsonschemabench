{
  "description": "sample Github_hard/o77302.json",
  "meta": {
    "full_size": 4164,
    "stripped_size": 1210,
    "features": [
      "@minmaxLength",
      "additionalProperties",
      "anyOf",
      "enum",
      "items"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "minLength",
      "properties",
      "type",
      "type:[]",
      "type:array",
      "type:boolean",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "additionalProperties": false,
    "title": "JSON schema for Babel 6+ configuration files",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "properties": {
      "ast": {
        "default": true,
        "description": "Include the AST in the returned object",
        "type": "boolean"
      },
      "auxiliaryCommentAfter": {
        "description": "Attach a comment after all non-user injected code.",
        "type": "string"
      },
      "auxiliaryCommentBefore": {
        "description": "Attach a comment before all non-user injected code.",
        "type": "string"
      },
      "code": {
        "default": true,
        "description": "Enable code generation",
        "type": "boolean"
      },
      "comments": {
        "default": true,
        "description": "Output comments in generated output.",
        "type": "boolean"
      },
      "compact": {
        "default": "auto",
        "description": "Do not include superfluous whitespace characters and line terminators. When set to \"auto\" compact is set to true on input sizes of >100KB.",
        "type": "string"
      },
      "env": {
        "default": {},
        "description": "This is an object of keys that represent different environments. For example, you may have: `{ env: { production: { /* specific options */ } } }` which will use those options when the enviroment variable BABEL_ENV is set to \"production\". If BABEL_ENV isn't set then NODE_ENV will be used, if it's not set then it defaults to \"development\"",
        "type": "object"
      },
      "extends": {
        "description": "A path to a .babelrc file to extend",
        "type": "string"
      },
      "filename": {
        "default": "unknown",
        "description": "Filename for use in errors etc.",
        "type": "string"
      },
      "filenameRelative": {
        "description": "Filename relative to sourceRoot (defaults to \"filename\")",
        "type": "string"
      },
      "highlightCode": {
        "description": "ANSI highlight syntax error code frames",
        "type": "boolean"
      },
      "ignore": {
        "description": "Opposite of the \"only\" option",
        "type": [
          "array",
          "string"
        ],
        "items": {
          "type": "string"
        }
      },
      "inputSourceMap": {
        "description": "A source map object that the output source map will be based on.",
        "type": "object"
      },
      "keepModuleIdExtensions": {
        "default": false,
        "description": "Keep extensions in module ids",
        "type": "boolean"
      },
      "moduleId": {
        "description": "Specify a custom name for module ids.",
        "type": "string"
      },
      "moduleIds": {
        "default": false,
        "description": "If truthy, insert an explicit id for modules. By default, all modules are anonymous. (Not available for common modules)",
        "anyOf": [
          {
            "type": "string",
            "minLength": 1
          },
          {
            "enum": [
              false
            ]
          }
        ]
      },
      "moduleRoot": {
        "description": "Optional prefix for the AMD module formatter that will be prepend to the filename on module definitions. (defaults to \"sourceRoot\")",
        "type": "string"
      },
      "only": {
        "description": "A glob, regex, or mixed array of both, matching paths to only compile. Can also be an array of arrays containing paths to explicitly match. When attempting to compile a non-matching file it's returned verbatim.",
        "type": [
          "array",
          "string"
        ],
        "items": {
          "type": "string"
        }
      },
      "plugins": {
        "description": "List of plugins to load and use",
        "type": "array",
        "items": {
          "type": [
            "string",
            "array"
          ],
          "items": {
            "description": "the plugin name in .[0] and the options object in .[1]",
            "type": [
              "string",
              "object"
            ]
          }
        }
      },
      "presets": {
        "description": "List of presets (a set of plugins) to load and use",
        "type": "array",
        "items": {
          "type": [
            "string",
            "array"
          ],
          "items": {
            "description": "the preset name in .[0] and the options object in .[1]",
            "type": [
              "string",
              "object"
            ]
          }
        }
      },
      "retainLines": {
        "default": false,
        "description": "Retain line numbers. This will lead to wacky code but is handy for scenarios where you can't use source maps. NOTE: This will obviously not retain the columns.",
        "type": "boolean"
      },
      "sourceFileName": {
        "description": "Set sources[0] on returned source map. (defaults to \"filenameRelative\")",
        "type": "string"
      },
      "sourceMaps": {
        "default": false,
        "description": "If truthy, adds a map property to returned output. If set to \"inline\", a comment with a sourceMappingURL directive is added to the bottom of the returned code. If set to \"both\" then a map property is returned as well as a source map comment appended.",
        "type": [
          "string",
          "boolean"
        ],
        "enum": [
          "both",
          "inline",
          true,
          false
        ]
      },
      "sourceMapTarget": {
        "description": "Set file on returned source map. (defaults to \"filenameRelative\")",
        "type": "string"
      },
      "sourceRoot": {
        "description": "The root from which all sources are relative. (defaults to \"moduleRoot\")",
        "type": "string"
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "ast": true,
        "auxiliaryCommentAfter": "Generated by Babel",
        "auxiliaryCommentBefore": "Non-user injected code",
        "code": true,
        "comments": true,
        "compact": "auto",
        "env": {
          "production": {
            "presets": [
              "@babel/preset-env"
            ]
          },
          "development": {
            "presets": [
              "@babel/preset-env",
              "@babel/preset-react"
            ]
          }
        },
        "extends": "./.babelrc",
        "filename": "example.js",
        "filenameRelative": "example.js",
        "highlightCode": true,
        "ignore": [
          "node_modules"
        ],
        "inputSourceMap": {},
        "keepModuleIdExtensions": false,
        "moduleId": "example",
        "moduleIds": "named",
        "moduleRoot": "src",
        "only": [
          "src/**/*.js"
        ],
        "plugins": [
          [
            "@babel/plugin-transform-runtime",
            {
              "regenerator": true
            }
          ]
        ],
        "presets": [
          [
            "@babel/preset-env",
            {
              "targets": {
                "browsers": [
                  "last 2 versions"
                ]
              }
            }
          ]
        ],
        "retainLines": false,
        "sourceFileName": "example.js",
        "sourceMaps": "inline",
        "sourceMapTarget": "example.js",
        "sourceRoot": "src"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema[0]:\n    {'type': 'string', 'minLength': 1}\n\nOn instance:\n    ''",
      "data": {
        "ast": true,
        "auxiliaryCommentAfter": "Generated by Babel",
        "auxiliaryCommentBefore": "Non-user injected code",
        "code": true,
        "comments": true,
        "compact": "auto",
        "env": {
          "production": {
            "presets": [
              "@babel/preset-env"
            ]
          },
          "development": {
            "presets": [
              "@babel/preset-env",
              "@babel/preset-react"
            ]
          }
        },
        "extends": "./.babelrc",
        "filename": "example.js",
        "filenameRelative": "example.js",
        "highlightCode": true,
        "ignore": [
          "node_modules"
        ],
        "inputSourceMap": {},
        "keepModuleIdExtensions": false,
        "moduleId": "example",
        "moduleIds": "",
        "moduleRoot": "src",
        "only": [
          "src/**/*.js"
        ],
        "plugins": [
          [
            "@babel/plugin-transform-runtime",
            {
              "regenerator": true
            }
          ]
        ],
        "presets": [
          [
            "@babel/preset-env",
            {
              "targets": {
                "browsers": [
                  "last 2 versions"
                ]
              }
            }
          ]
        ],
        "retainLines": false,
        "sourceFileName": "example.js",
        "sourceMaps": "inline",
        "sourceMapTarget": "example.js",
        "sourceRoot": "src"
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "0 is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "0 is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema['properties']['moduleIds']:\n    {'default': False,\n     'description': 'If truthy, insert an explicit id for modules. By '\n                    'default, all modules are anonymous. (Not available '\n                    'for common modules)',\n     'anyOf': [{'type': 'string', 'minLength': 1}, {'enum': [False]}]}\n\nOn instance['moduleIds']:\n    0",
      "data": {
        "ast": true,
        "auxiliaryCommentAfter": "Generated by Babel",
        "auxiliaryCommentBefore": "Non-user injected code",
        "code": true,
        "comments": true,
        "compact": "auto",
        "env": {
          "production": {
            "presets": [
              "@babel/preset-env"
            ]
          },
          "development": {
            "presets": [
              "@babel/preset-env",
              "@babel/preset-react"
            ]
          }
        },
        "extends": "./.babelrc",
        "filename": "example.js",
        "filenameRelative": "example.js",
        "highlightCode": true,
        "ignore": [
          "node_modules"
        ],
        "inputSourceMap": {},
        "keepModuleIdExtensions": false,
        "moduleId": "example",
        "moduleIds": 0,
        "moduleRoot": "src",
        "only": [
          "src/**/*.js"
        ],
        "plugins": [
          [
            "@babel/plugin-transform-runtime",
            {
              "regenerator": true
            }
          ]
        ],
        "presets": [
          [
            "@babel/preset-env",
            {
              "targets": {
                "browsers": [
                  "last 2 versions"
                ]
              }
            }
          ]
        ],
        "retainLines": false,
        "sourceFileName": "example.js",
        "sourceMaps": "inline",
        "sourceMapTarget": "example.js",
        "sourceRoot": "src"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"array\", \"string\"",
      "python_error": "123 is not of type 'array', 'string'\n\nFailed validating 'type' in schema['properties']['ignore']:\n    {'description': 'Opposite of the \"only\" option',\n     'type': ['array', 'string'],\n     'items': {'type': 'string'}}\n\nOn instance['ignore']:\n    123",
      "data": {
        "ast": true,
        "auxiliaryCommentAfter": "Generated by Babel",
        "auxiliaryCommentBefore": "Non-user injected code",
        "code": true,
        "comments": true,
        "compact": "auto",
        "env": {
          "production": {
            "presets": [
              "@babel/preset-env"
            ]
          },
          "development": {
            "presets": [
              "@babel/preset-env",
              "@babel/preset-react"
            ]
          }
        },
        "extends": "./.babelrc",
        "filename": "example.js",
        "filenameRelative": "example.js",
        "highlightCode": true,
        "ignore": 123,
        "inputSourceMap": {},
        "keepModuleIdExtensions": false,
        "moduleId": "example",
        "moduleIds": "named",
        "moduleRoot": "src",
        "only": [
          "src/**/*.js"
        ],
        "plugins": [
          [
            "@babel/plugin-transform-runtime",
            {
              "regenerator": true
            }
          ]
        ],
        "presets": [
          [
            "@babel/preset-env",
            {
              "targets": {
                "browsers": [
                  "last 2 versions"
                ]
              }
            }
          ]
        ],
        "retainLines": false,
        "sourceFileName": "example.js",
        "sourceMaps": "inline",
        "sourceMapTarget": "example.js",
        "sourceRoot": "src"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('invalidProperty' was unexpected)",
      "python_error": "Additional properties are not allowed ('invalidProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'additionalProperties': False,\n     'title': 'JSON schema for Babel 6+ configuration files',\n     '$schema': 'http://json-schema.org/draft-07/schema#',\n     'type': 'object',\n     'properties': {'ast': {'default': True,\n                            'description': 'Include the AST in the '\n                                           'returned object',\n                            'type': 'boolean'},\n                    'auxiliaryCommentAfter': {'description': 'Attach a '\n                                                             'comment '\n                                                             'after all '\n                                                             'non-user '\n                                                             'injected '\n                                                             'code.',\n                                              'type': 'stri.. (13127 more)",
      "data": {
        "ast": true,
        "auxiliaryCommentAfter": "Generated by Babel",
        "auxiliaryCommentBefore": "Non-user injected code",
        "code": true,
        "comments": true,
        "compact": "auto",
        "env": {
          "production": {
            "presets": [
              "@babel/preset-env"
            ]
          },
          "development": {
            "presets": [
              "@babel/preset-env",
              "@babel/preset-react"
            ]
          }
        },
        "extends": "./.babelrc",
        "filename": "example.js",
        "filenameRelative": "example.js",
        "highlightCode": true,
        "ignore": [
          "node_modules"
        ],
        "inputSourceMap": {},
        "keepModuleIdExtensions": false,
        "moduleId": "example",
        "moduleIds": "named",
        "invalidProperty": "Invalid value",
        "moduleRoot": "src",
        "only": [
          "src/**/*.js"
        ],
        "plugins": [
          [
            "@babel/plugin-transform-runtime",
            {
              "regenerator": true
            }
          ]
        ],
        "presets": [
          [
            "@babel/preset-env",
            {
              "targets": {
                "browsers": [
                  "last 2 versions"
                ]
              }
            }
          ]
        ],
        "retainLines": false,
        "sourceFileName": "example.js",
        "sourceMaps": "inline",
        "sourceMapTarget": "example.js",
        "sourceRoot": "src"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['moduleId']:\n    {'description': 'Specify a custom name for module ids.',\n     'type': 'string'}\n\nOn instance['moduleId']:\n    123",
      "data": {
        "ast": true,
        "auxiliaryCommentAfter": "Generated by Babel",
        "auxiliaryCommentBefore": "Non-user injected code",
        "code": true,
        "comments": true,
        "compact": "auto",
        "env": {
          "production": {
            "presets": [
              "@babel/preset-env"
            ]
          },
          "development": {
            "presets": [
              "@babel/preset-env",
              "@babel/preset-react"
            ]
          }
        },
        "extends": "./.babelrc",
        "filename": "example.js",
        "filenameRelative": "example.js",
        "highlightCode": true,
        "ignore": [
          "node_modules"
        ],
        "inputSourceMap": {},
        "keepModuleIdExtensions": false,
        "moduleId": 123,
        "moduleIds": "named",
        "moduleRoot": "src",
        "only": [
          "src/**/*.js"
        ],
        "plugins": [
          [
            "@babel/plugin-transform-runtime",
            {
              "regenerator": true
            }
          ]
        ],
        "presets": [
          [
            "@babel/preset-env",
            {
              "targets": {
                "browsers": [
                  "last 2 versions"
                ]
              }
            }
          ]
        ],
        "retainLines": false,
        "sourceFileName": "example.js",
        "sourceMaps": "inline",
        "sourceMapTarget": "example.js",
        "sourceRoot": "src"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "Additional properties are not allowed ('invalidProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'additionalProperties': False,\n     'title': 'JSON schema for Babel 6+ configuration files',\n     '$schema': 'http://json-schema.org/draft-07/schema#',\n     'type': 'object',\n     'properties': {'ast': {'default': True,\n                            'description': 'Include the AST in the '\n                                           'returned object',\n                            'type': 'boolean'},\n                    'auxiliaryCommentAfter': {'description': 'Attach a '\n                                                             'comment '\n                                                             'after all '\n                                                             'non-user '\n                                                             'injected '\n                                                             'code.',\n                                              'type': 'stri.. (13203 more)",
      "data": {
        "ast": true,
        "auxiliaryCommentAfter": "Generated by Babel",
        "auxiliaryCommentBefore": "Non-user injected code",
        "code": true,
        "comments": true,
        "compact": "auto",
        "env": {
          "production": {
            "presets": [
              "@babel/preset-env"
            ]
          },
          "development": {
            "presets": [
              "@babel/preset-env",
              "@babel/preset-react"
            ]
          }
        },
        "extends": "./.babelrc",
        "filename": "example.js",
        "filenameRelative": "example.js",
        "highlightCode": true,
        "ignore": [
          "node_modules",
          123
        ],
        "inputSourceMap": {},
        "keepModuleIdExtensions": false,
        "moduleId": "example",
        "moduleIds": "named",
        "moduleRoot": "src",
        "only": [
          "src/**/*.js",
          456
        ],
        "plugins": [
          [
            "@babel/plugin-transform-runtime",
            {
              "regenerator": true
            }
          ],
          "invalid-plugin"
        ],
        "presets": [
          [
            "@babel/preset-env",
            {
              "targets": {
                "browsers": [
                  "last 2 versions"
                ]
              }
            }
          ],
          "invalid-preset"
        ],
        "retainLines": false,
        "sourceFileName": "example.js",
        "sourceMaps": "inline",
        "sourceMapTarget": "example.js",
        "sourceRoot": "src",
        "invalidProperty": "this is an invalid property"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "ast": true,
        "auxiliaryCommentAfter": "Generated by Babel",
        "auxiliaryCommentBefore": "Non-user injected code",
        "code": true,
        "comments": true,
        "compact": "auto",
        "env": {
          "production": {
            "presets": [
              "@babel/preset-env"
            ]
          }
        },
        "extends": "./.babelrc",
        "filename": "example.js",
        "filenameRelative": "example.js",
        "highlightCode": true,
        "ignore": [
          "node_modules"
        ],
        "inputSourceMap": {},
        "keepModuleIdExtensions": false,
        "moduleId": "example",
        "moduleIds": "named",
        "moduleRoot": "src",
        "only": [
          "src/**/*.js"
        ],
        "plugins": [
          [
            "@babel/plugin-transform-runtime",
            {
              "regenerator": true
            }
          ]
        ],
        "presets": [
          [
            "@babel/preset-env",
            {
              "targets": {
                "browsers": [
                  "last 2 versions"
                ]
              }
            }
          ]
        ],
        "retainLines": false,
        "sourceFileName": "example.js",
        "sourceMaps": "inline",
        "sourceMapTarget": "example.js",
        "sourceRoot": "src"
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "0 is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "0 is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema['properties']['moduleIds']:\n    {'default': False,\n     'description': 'If truthy, insert an explicit id for modules. By '\n                    'default, all modules are anonymous. (Not available '\n                    'for common modules)',\n     'anyOf': [{'type': 'string', 'minLength': 1}, {'enum': [False]}]}\n\nOn instance['moduleIds']:\n    0",
      "data": {
        "ast": true,
        "auxiliaryCommentAfter": "Generated by Babel",
        "auxiliaryCommentBefore": "Non-user injected code",
        "code": true,
        "comments": true,
        "compact": "auto",
        "env": {
          "production": {
            "presets": [
              "@babel/preset-env"
            ]
          }
        },
        "extends": "./.babelrc",
        "filename": "example.js",
        "filenameRelative": "example.js",
        "highlightCode": true,
        "ignore": [
          "node_modules"
        ],
        "inputSourceMap": {},
        "keepModuleIdExtensions": false,
        "moduleId": "example",
        "moduleIds": 0,
        "moduleRoot": "src",
        "only": [
          "src/**/*.js"
        ],
        "plugins": [
          [
            "@babel/plugin-transform-runtime",
            {
              "regenerator": true
            }
          ]
        ],
        "presets": [
          [
            "@babel/preset-env",
            {
              "targets": {
                "browsers": [
                  "last 2 versions"
                ]
              }
            }
          ]
        ],
        "retainLines": false,
        "sourceFileName": "example.js",
        "sourceMaps": "inline",
        "sourceMapTarget": "example.js",
        "sourceRoot": "src"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "123 is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema['properties']['moduleIds']:\n    {'default': False,\n     'description': 'If truthy, insert an explicit id for modules. By '\n                    'default, all modules are anonymous. (Not available '\n                    'for common modules)',\n     'anyOf': [{'type': 'string', 'minLength': 1}, {'enum': [False]}]}\n\nOn instance['moduleIds']:\n    123",
      "data": {
        "ast": true,
        "auxiliaryCommentAfter": "Generated by Babel",
        "auxiliaryCommentBefore": "Non-user injected code",
        "code": true,
        "comments": true,
        "compact": "auto",
        "env": {
          "production": {
            "presets": [
              "@babel/preset-env"
            ]
          }
        },
        "extends": "./.babelrc",
        "filename": "example.js",
        "filenameRelative": "example.js",
        "highlightCode": true,
        "ignore": "node_modules",
        "sourceRoot": "src",
        "moduleIds": 123
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema[0]:\n    {'type': 'string', 'minLength': 1}\n\nOn instance:\n    ''",
      "data": {
        "ast": true,
        "auxiliaryCommentAfter": "Generated by Babel",
        "auxiliaryCommentBefore": "Non-user injected code",
        "code": true,
        "comments": true,
        "compact": "auto",
        "env": {
          "production": {
            "presets": [
              "@babel/preset-env"
            ]
          }
        },
        "extends": "./.babelrc",
        "filename": "example.js",
        "filenameRelative": "example.js",
        "highlightCode": true,
        "ignore": [
          "node_modules"
        ],
        "inputSourceMap": {},
        "keepModuleIdExtensions": false,
        "moduleId": "example",
        "moduleIds": "",
        "moduleRoot": "src",
        "only": [
          "src/**/*.js"
        ],
        "plugins": [
          [
            "@babel/plugin-transform-runtime",
            {
              "regenerator": true
            }
          ]
        ],
        "presets": [
          [
            "@babel/preset-env",
            {
              "targets": {
                "browsers": [
                  "last 2 versions"
                ]
              }
            }
          ]
        ],
        "retainLines": false,
        "sourceFileName": "example.js",
        "sourceMaps": "inline",
        "sourceMapTarget": "example.js",
        "sourceRoot": "src"
      }
    }
  ]
}