{
  "description": "sample Kubernetes/kb_841_Normalized.json",
  "meta": {
    "full_size": 2650,
    "stripped_size": 1177,
    "features": [
      "$ref",
      "additionalProperties",
      "additionalProperties:object",
      "items",
      "oneOf"
    ],
    "raw_features": [
      "definitions",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:null",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "definitions": {
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ScopeSelector": {
        "description": "A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.",
        "properties": {
          "matchExpressions": {
            "description": "A list of scope selector requirements by scope of the resources.",
            "items": {
              "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ScopedResourceSelectorRequirement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ScopedResourceSelectorRequirement": {
        "description": "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.",
        "properties": {
          "operator": {
            "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.",
            "type": "string"
          },
          "scopeName": {
            "description": "The name of the scope that the selector applies to.",
            "type": "string"
          },
          "values": {
            "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "scopeName",
          "operator"
        ],
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_api_resource_Quantity": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ]
      }
    },
    "description": "ResourceQuotaSpec defines the desired hard limits to enforce for Quota.",
    "properties": {
      "hard": {
        "additionalProperties": {
          "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_api_resource_Quantity"
        },
        "description": "hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/",
        "type": [
          "object",
          "null"
        ]
      },
      "scopeSelector": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ScopeSelector",
        "description": "scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched."
      },
      "scopes": {
        "description": "A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.",
        "items": {
          "type": [
            "string",
            "null"
          ]
        },
        "type": [
          "array",
          "null"
        ]
      }
    },
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "hard": {
          "cpu": "1000m",
          "memory": "1Gi"
        },
        "scopeSelector": {
          "matchExpressions": [
            {
              "operator": "In",
              "scopeName": "PriorityClass",
              "values": [
                "high",
                "medium"
              ]
            },
            {
              "operator": "Exists",
              "scopeName": "StorageClass"
            }
          ]
        },
        "scopes": [
          "Pod",
          "PersistentVolumeClaim"
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "true is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "True is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['hard']['additionalProperties']:\n    {'oneOf': [{'type': 'string'}, {'type': 'number'}]}\n\nOn instance['hard']['cpu']:\n    True",
      "data": {
        "hard": {
          "cpu": true,
          "memory": "1Gi"
        },
        "scopeSelector": {
          "matchExpressions": [
            {
              "operator": "In",
              "scopeName": "PriorityClass",
              "values": [
                "high",
                "medium"
              ]
            },
            {
              "operator": "Exists",
              "scopeName": "StorageClass"
            }
          ]
        },
        "scopes": [
          "Pod",
          "PersistentVolumeClaim"
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of types \"null\", \"string\"",
      "python_error": "123 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['scopes']['items']:\n    {'type': ['string', 'null']}\n\nOn instance['scopes'][1]:\n    123",
      "data": {
        "hard": {
          "cpu": 1000,
          "memory": "1Gi"
        },
        "scopeSelector": {
          "matchExpressions": [
            {
              "operator": "In",
              "scopeName": "PriorityClass",
              "values": [
                "high",
                "medium"
              ]
            },
            {
              "operator": "Exists",
              "scopeName": "StorageClass",
              "values": [
                "some value"
              ]
            }
          ]
        },
        "scopes": [
          "Pod",
          123
        ]
      }
    }
  ]
}