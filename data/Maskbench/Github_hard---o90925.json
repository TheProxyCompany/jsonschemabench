{
  "description": "sample Github_hard/o90925.json",
  "meta": {
    "full_size": 3897,
    "stripped_size": 3014,
    "features": [
      "$ref",
      "@minmaxInteger",
      "@minmaxItems",
      "@minmaxNumber",
      "additionalProperties",
      "additionalProperties:object",
      "allOf",
      "anyOf",
      "enum",
      "format",
      "format:regex",
      "format:uri",
      "format:uri-reference",
      "items",
      "oneOf",
      "propertyNames"
    ],
    "raw_features": [
      "_boolSchema",
      "definitions",
      "exclusiveMinimum",
      "minItems",
      "minimum",
      "properties",
      "type",
      "type:[]",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "default": true,
    "definitions": {
      "nonNegativeInteger": {
        "minimum": 0,
        "type": "integer"
      },
      "nonNegativeIntegerDefault0": {
        "allOf": [
          {
            "$ref": "#/definitions/nonNegativeInteger"
          },
          {
            "default": 0
          }
        ]
      },
      "schemaArray": {
        "items": {
          "$ref": "#"
        },
        "minItems": 1,
        "type": "array"
      },
      "simpleTypes": {
        "enum": [
          "array",
          "boolean",
          "integer",
          "null",
          "number",
          "object",
          "string"
        ]
      },
      "stringArray": {
        "default": [],
        "items": {
          "type": "string"
        },
        "type": "array",
        "_uniqueItems": true
      }
    },
    "properties": {
      "$comment": {
        "type": "string"
      },
      "$id": {
        "format": "uri-reference",
        "type": "string"
      },
      "$ref": {
        "format": "uri-reference",
        "type": "string"
      },
      "$schema": {
        "format": "uri",
        "type": "string"
      },
      "additionalItems": {
        "$ref": "#"
      },
      "additionalProperties": {
        "$ref": "#"
      },
      "allOf": {
        "$ref": "#/definitions/schemaArray"
      },
      "anyOf": {
        "$ref": "#/definitions/schemaArray"
      },
      "const": true,
      "contains": {
        "$ref": "#"
      },
      "contentEncoding": {
        "type": "string"
      },
      "contentMediaType": {
        "type": "string"
      },
      "default": true,
      "definitions": {
        "additionalProperties": {
          "$ref": "#"
        },
        "default": {},
        "type": "object"
      },
      "dependencies": {
        "additionalProperties": {
          "anyOf": [
            {
              "$ref": "#"
            },
            {
              "$ref": "#/definitions/stringArray"
            }
          ]
        },
        "type": "object"
      },
      "deprecationMessage": {
        "description": "Non-standard: deprecation message for a property, if it is deprecated",
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "else": {
        "$ref": "#"
      },
      "enum": {
        "items": true,
        "minItems": 1,
        "type": "array",
        "_uniqueItems": true
      },
      "examples": {
        "items": true,
        "type": "array"
      },
      "exclusiveMaximum": {
        "type": "number"
      },
      "exclusiveMinimum": {
        "type": "number"
      },
      "format": {
        "type": "string"
      },
      "if": {
        "$ref": "#"
      },
      "items": {
        "anyOf": [
          {
            "$ref": "#"
          },
          {
            "$ref": "#/definitions/schemaArray"
          }
        ],
        "default": true
      },
      "maxItems": {
        "$ref": "#/definitions/nonNegativeInteger"
      },
      "maxLength": {
        "$ref": "#/definitions/nonNegativeInteger"
      },
      "maxProperties": {
        "$ref": "#/definitions/nonNegativeInteger"
      },
      "maximum": {
        "type": "number"
      },
      "minItems": {
        "$ref": "#/definitions/nonNegativeIntegerDefault0"
      },
      "minLength": {
        "$ref": "#/definitions/nonNegativeIntegerDefault0"
      },
      "minProperties": {
        "$ref": "#/definitions/nonNegativeIntegerDefault0"
      },
      "minimum": {
        "type": "number"
      },
      "multipleOf": {
        "exclusiveMinimum": 0,
        "type": "number"
      },
      "not": {
        "$ref": "#"
      },
      "oneOf": {
        "$ref": "#/definitions/schemaArray"
      },
      "pattern": {
        "format": "regex",
        "type": "string"
      },
      "patternProperties": {
        "additionalProperties": {
          "$ref": "#"
        },
        "default": {},
        "propertyNames": {
          "format": "regex"
        },
        "type": "object"
      },
      "properties": {
        "additionalProperties": {
          "$ref": "#"
        },
        "default": {},
        "type": "object"
      },
      "propertyNames": {
        "$ref": "#"
      },
      "readOnly": {
        "default": false,
        "type": "boolean"
      },
      "required": {
        "$ref": "#/definitions/stringArray"
      },
      "then": {
        "$ref": "#"
      },
      "title": {
        "type": "string"
      },
      "type": {
        "anyOf": [
          {
            "$ref": "#/definitions/simpleTypes"
          },
          {
            "items": {
              "$ref": "#/definitions/simpleTypes"
            },
            "minItems": 1,
            "type": "array",
            "_uniqueItems": true
          }
        ]
      },
      "_uniqueItems": {
        "default": false,
        "type": "boolean"
      },
      "x-intellij-case-insensitive": {
        "description": "If 'true', enum options for this value will be checked case-insensitively",
        "type": "boolean"
      },
      "x-intellij-enum-metadata": {
        "additionalProperties": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "additionalProperties": {
                "type": "string"
              },
              "properties": {
                "deprecationMessage": {
                  "description": "Deprecation message for an enum value",
                  "type": "string"
                },
                "description": {
                  "description": "Description for an enum value",
                  "type": "string"
                }
              },
              "type": "object"
            }
          ]
        },
        "description": "Provides description and deprecation data for enum values",
        "type": "object"
      },
      "x-intellij-html-description": {
        "description": "Description in html format",
        "type": "string"
      },
      "x-intellij-language-injection": {
        "description": "IntelliJ language ID for language injection",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "properties": {
              "language": {
                "description": "Language ID. Invoke completion to see all options",
                "type": "string"
              },
              "prefix": {
                "description": "Code fragment that will be appended before the user code",
                "type": "string"
              },
              "suffix": {
                "description": "Code fragment that will be appended after the user code",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      }
    },
    "title": "Core schema meta-schema",
    "type": [
      "object",
      "boolean"
    ]
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "$id": "https://example.com/schema",
        "$schema": "https://json-schema.org/draft-07/schema#",
        "additionalProperties": false,
        "definitions": {
          "Person": {
            "properties": {
              "name": {
                "type": "string"
              },
              "age": {
                "type": "integer"
              }
            },
            "required": [
              "name",
              "age"
            ],
            "type": "object"
          }
        },
        "properties": {
          "people": {
            "items": {
              "$ref": "#/definitions/Person"
            },
            "type": "array"
          }
        },
        "required": [
          "people"
        ],
        "title": "Example Schema",
        "type": "object"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "$id": "https://example.com/schema",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "additionalProperties": false,
        "description": "Example schema",
        "properties": {
          "name": {
            "description": "Name of the person",
            "type": "string"
          },
          "age": {
            "description": "Age of the person",
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "name",
          "age"
        ],
        "title": "Person",
        "type": "object"
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "\"string\" is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "'string' is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema['properties']['properties']['additionalProperties']['properties']['items']:\n    {'anyOf': [{'$ref': '#'}, {'$ref': '#/definitions/schemaArray'}],\n     'default': True}\n\nOn instance['properties']['name']['items']:\n    'string'",
      "data": {
        "$id": "https://example.com/schema",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "additionalProperties": false,
        "description": "Example schema",
        "properties": {
          "name": {
            "description": "Name of the person",
            "type": "string",
            "enum": [
              "John",
              "Alice",
              "Bob"
            ],
            "items": "string"
          },
          "age": {
            "description": "Age of the person",
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "name",
          "age"
        ],
        "title": "Person",
        "type": "object"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "[\"string\",true] is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "True is not one of ['array', 'boolean', 'integer', 'null', 'number', 'object', 'string']\n\nFailed validating 'enum' in schema[1]['items']:\n    {'enum': ['array',\n              'boolean',\n              'integer',\n              'null',\n              'number',\n              'object',\n              'string']}\n\nOn instance[1]:\n    True",
      "data": {
        "$id": "https://example.com/schema",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "additionalProperties": false,
        "description": "Example schema",
        "properties": {
          "name": {
            "description": "Name of the person",
            "type": [
              "string",
              true
            ]
          },
          "age": {
            "description": "Age of the person",
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "name",
          "age"
        ],
        "title": "Person",
        "type": "object"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minItems keyword",
      "valid": false,
      "rust_error": "[] is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "[] should be non-empty\n\nFailed validating 'minItems' in schema[1]:\n    {'items': {'$ref': '#'}, 'minItems': 1, 'type': 'array'}\n\nOn instance:\n    []",
      "data": {
        "$id": "https://example.com/schema",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "additionalProperties": false,
        "description": "Example schema",
        "properties": {
          "name": {
            "description": "Name of the person",
            "type": "string"
          },
          "age": {
            "description": "Age of the person",
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [],
        "items": [],
        "title": "Person",
        "type": "object"
      }
    },
    {
      "description": "llama-70b generated negative; focus on format keyword",
      "valid": false,
      "rust_error": "\"invalid uri\" is not a \"uri-reference\"",
      "python_error": "'invalid uri' is not a 'uri-reference'\n\nFailed validating 'format' in schema['properties']['$id']:\n    {'format': 'uri-reference', 'type': 'string'}\n\nOn instance['$id']:\n    'invalid uri'",
      "data": {
        "$id": "invalid uri",
        "$schema": "https://json-schema.org/draft/2020-12/schema",
        "additionalProperties": false,
        "description": "Example schema",
        "properties": {
          "name": {
            "description": "Name of the person",
            "type": "string"
          },
          "age": {
            "description": "Age of the person",
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "name",
          "age"
        ],
        "title": "Person",
        "type": "object"
      }
    }
  ]
}