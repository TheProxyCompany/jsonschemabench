{
  "description": "sample MCPspec/ServerResult.json",
  "meta": {
    "full_size": 15369,
    "stripped_size": 6278,
    "features": [
      "$ref",
      "@minmaxNumber",
      "@siblingKeys",
      "additionalProperties",
      "additionalProperties:object",
      "anyOf",
      "const",
      "enum",
      "format",
      "format:byte",
      "format:uri",
      "items"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "maximum",
      "minimum",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$ref": "#/definitions/ServerResult",
    "definitions": {
      "ServerResult": {
        "anyOf": [
          {
            "$ref": "#/definitions/Result"
          },
          {
            "$ref": "#/definitions/InitializeResult"
          },
          {
            "$ref": "#/definitions/ListResourcesResult"
          },
          {
            "$ref": "#/definitions/ReadResourceResult"
          },
          {
            "$ref": "#/definitions/ListPromptsResult"
          },
          {
            "$ref": "#/definitions/GetPromptResult"
          },
          {
            "$ref": "#/definitions/ListToolsResult"
          },
          {
            "$ref": "#/definitions/CallToolResult"
          },
          {
            "$ref": "#/definitions/CompleteResult"
          }
        ]
      },
      "Result": {
        "additionalProperties": {},
        "properties": {
          "_meta": {
            "additionalProperties": {},
            "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "InitializeResult": {
        "description": "After receiving an initialize request from the client, the server sends this response.",
        "properties": {
          "_meta": {
            "additionalProperties": {},
            "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
            "type": "object"
          },
          "capabilities": {
            "$ref": "#/definitions/ServerCapabilities"
          },
          "instructions": {
            "description": "Instructions describing how to use the server and its features.\n\nThis can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a \"hint\" to the model. For example, this information MAY be added to the system prompt.",
            "type": "string"
          },
          "protocolVersion": {
            "description": "The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.",
            "type": "string"
          },
          "serverInfo": {
            "$ref": "#/definitions/Implementation"
          }
        },
        "required": [
          "capabilities",
          "protocolVersion",
          "serverInfo"
        ],
        "type": "object"
      },
      "ServerCapabilities": {
        "description": "Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.",
        "properties": {
          "experimental": {
            "additionalProperties": {
              "additionalProperties": true,
              "properties": {},
              "type": "object"
            },
            "description": "Experimental, non-standard capabilities that the server supports.",
            "type": "object"
          },
          "logging": {
            "additionalProperties": true,
            "description": "Present if the server supports sending log messages to the client.",
            "properties": {},
            "type": "object"
          },
          "prompts": {
            "description": "Present if the server offers any prompt templates.",
            "properties": {
              "listChanged": {
                "description": "Whether this server supports notifications for changes to the prompt list.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "resources": {
            "description": "Present if the server offers any resources to read.",
            "properties": {
              "listChanged": {
                "description": "Whether this server supports notifications for changes to the resource list.",
                "type": "boolean"
              },
              "subscribe": {
                "description": "Whether this server supports subscribing to resource updates.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "tools": {
            "description": "Present if the server offers any tools to call.",
            "properties": {
              "listChanged": {
                "description": "Whether this server supports notifications for changes to the tool list.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Implementation": {
        "description": "Describes the name and version of an MCP implementation.",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "version"
        ],
        "type": "object"
      },
      "ListResourcesResult": {
        "description": "The server's response to a resources/list request from the client.",
        "properties": {
          "_meta": {
            "additionalProperties": {},
            "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
            "type": "object"
          },
          "nextCursor": {
            "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
            "type": "string"
          },
          "resources": {
            "items": {
              "$ref": "#/definitions/Resource"
            },
            "type": "array"
          }
        },
        "required": [
          "resources"
        ],
        "type": "object"
      },
      "Resource": {
        "description": "A known resource that the server is capable of reading.",
        "properties": {
          "annotations": {
            "properties": {
              "audience": {
                "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
                "items": {
                  "$ref": "#/definitions/Role"
                },
                "type": "array"
              },
              "priority": {
                "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "type": "object"
          },
          "description": {
            "description": "A description of what this resource represents.\n\nThis can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.",
            "type": "string"
          },
          "mimeType": {
            "description": "The MIME type of this resource, if known.",
            "type": "string"
          },
          "name": {
            "description": "A human-readable name for this resource.\n\nThis can be used by clients to populate UI elements.",
            "type": "string"
          },
          "uri": {
            "description": "The URI of this resource.",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "name",
          "uri"
        ],
        "type": "object"
      },
      "Role": {
        "description": "The sender or recipient of messages and data in a conversation.",
        "enum": [
          "assistant",
          "user"
        ],
        "type": "string"
      },
      "ReadResourceResult": {
        "description": "The server's response to a resources/read request from the client.",
        "properties": {
          "_meta": {
            "additionalProperties": {},
            "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
            "type": "object"
          },
          "contents": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextResourceContents"
                },
                {
                  "$ref": "#/definitions/BlobResourceContents"
                }
              ]
            },
            "type": "array"
          }
        },
        "required": [
          "contents"
        ],
        "type": "object"
      },
      "TextResourceContents": {
        "properties": {
          "mimeType": {
            "description": "The MIME type of this resource, if known.",
            "type": "string"
          },
          "text": {
            "description": "The text of the item. This must only be set if the item can actually be represented as text (not binary data).",
            "type": "string"
          },
          "uri": {
            "description": "The URI of this resource.",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "text",
          "uri"
        ],
        "type": "object"
      },
      "BlobResourceContents": {
        "properties": {
          "blob": {
            "description": "A base64-encoded string representing the binary data of the item.",
            "format": "byte",
            "type": "string"
          },
          "mimeType": {
            "description": "The MIME type of this resource, if known.",
            "type": "string"
          },
          "uri": {
            "description": "The URI of this resource.",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "blob",
          "uri"
        ],
        "type": "object"
      },
      "ListPromptsResult": {
        "description": "The server's response to a prompts/list request from the client.",
        "properties": {
          "_meta": {
            "additionalProperties": {},
            "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
            "type": "object"
          },
          "nextCursor": {
            "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
            "type": "string"
          },
          "prompts": {
            "items": {
              "$ref": "#/definitions/Prompt"
            },
            "type": "array"
          }
        },
        "required": [
          "prompts"
        ],
        "type": "object"
      },
      "Prompt": {
        "description": "A prompt or prompt template that the server offers.",
        "properties": {
          "arguments": {
            "description": "A list of arguments to use for templating the prompt.",
            "items": {
              "$ref": "#/definitions/PromptArgument"
            },
            "type": "array"
          },
          "description": {
            "description": "An optional description of what this prompt provides",
            "type": "string"
          },
          "name": {
            "description": "The name of the prompt or prompt template.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "PromptArgument": {
        "description": "Describes an argument that a prompt can accept.",
        "properties": {
          "description": {
            "description": "A human-readable description of the argument.",
            "type": "string"
          },
          "name": {
            "description": "The name of the argument.",
            "type": "string"
          },
          "required": {
            "description": "Whether this argument must be provided.",
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "GetPromptResult": {
        "description": "The server's response to a prompts/get request from the client.",
        "properties": {
          "_meta": {
            "additionalProperties": {},
            "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
            "type": "object"
          },
          "description": {
            "description": "An optional description for the prompt.",
            "type": "string"
          },
          "messages": {
            "items": {
              "$ref": "#/definitions/PromptMessage"
            },
            "type": "array"
          }
        },
        "required": [
          "messages"
        ],
        "type": "object"
      },
      "PromptMessage": {
        "description": "Describes a message returned as part of a prompt.\n\nThis is similar to `SamplingMessage`, but also supports the embedding of\nresources from the MCP server.",
        "properties": {
          "content": {
            "anyOf": [
              {
                "$ref": "#/definitions/TextContent"
              },
              {
                "$ref": "#/definitions/ImageContent"
              },
              {
                "$ref": "#/definitions/EmbeddedResource"
              }
            ]
          },
          "role": {
            "$ref": "#/definitions/Role"
          }
        },
        "required": [
          "content",
          "role"
        ],
        "type": "object"
      },
      "TextContent": {
        "description": "Text provided to or from an LLM.",
        "properties": {
          "annotations": {
            "properties": {
              "audience": {
                "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
                "items": {
                  "$ref": "#/definitions/Role"
                },
                "type": "array"
              },
              "priority": {
                "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "type": "object"
          },
          "text": {
            "description": "The text content of the message.",
            "type": "string"
          },
          "type": {
            "const": "text",
            "type": "string"
          }
        },
        "required": [
          "text",
          "type"
        ],
        "type": "object"
      },
      "ImageContent": {
        "description": "An image provided to or from an LLM.",
        "properties": {
          "annotations": {
            "properties": {
              "audience": {
                "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
                "items": {
                  "$ref": "#/definitions/Role"
                },
                "type": "array"
              },
              "priority": {
                "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "type": "object"
          },
          "data": {
            "description": "The base64-encoded image data.",
            "format": "byte",
            "type": "string"
          },
          "mimeType": {
            "description": "The MIME type of the image. Different providers may support different image types.",
            "type": "string"
          },
          "type": {
            "const": "image",
            "type": "string"
          }
        },
        "required": [
          "data",
          "mimeType",
          "type"
        ],
        "type": "object"
      },
      "EmbeddedResource": {
        "description": "The contents of a resource, embedded into a prompt or tool call result.\n\nIt is up to the client how best to render embedded resources for the benefit\nof the LLM and/or the user.",
        "properties": {
          "annotations": {
            "properties": {
              "audience": {
                "description": "Describes who the intended customer of this object or data is.\n\nIt can include multiple entries to indicate content useful for multiple audiences (e.g., `[\"user\", \"assistant\"]`).",
                "items": {
                  "$ref": "#/definitions/Role"
                },
                "type": "array"
              },
              "priority": {
                "description": "Describes how important this data is for operating the server.\n\nA value of 1 means \"most important,\" and indicates that the data is\neffectively required, while 0 means \"least important,\" and indicates that\nthe data is entirely optional.",
                "maximum": 1,
                "minimum": 0,
                "type": "number"
              }
            },
            "type": "object"
          },
          "resource": {
            "anyOf": [
              {
                "$ref": "#/definitions/TextResourceContents"
              },
              {
                "$ref": "#/definitions/BlobResourceContents"
              }
            ]
          },
          "type": {
            "const": "resource",
            "type": "string"
          }
        },
        "required": [
          "resource",
          "type"
        ],
        "type": "object"
      },
      "ListToolsResult": {
        "description": "The server's response to a tools/list request from the client.",
        "properties": {
          "_meta": {
            "additionalProperties": {},
            "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
            "type": "object"
          },
          "nextCursor": {
            "description": "An opaque token representing the pagination position after the last returned result.\nIf present, there may be more results available.",
            "type": "string"
          },
          "tools": {
            "items": {
              "$ref": "#/definitions/Tool"
            },
            "type": "array"
          }
        },
        "required": [
          "tools"
        ],
        "type": "object"
      },
      "Tool": {
        "description": "Definition for a tool the client can call.",
        "properties": {
          "description": {
            "description": "A human-readable description of the tool.",
            "type": "string"
          },
          "inputSchema": {
            "description": "A JSON Schema object defining the expected parameters for the tool.",
            "properties": {
              "properties": {
                "additionalProperties": {
                  "additionalProperties": true,
                  "properties": {},
                  "type": "object"
                },
                "type": "object"
              },
              "required": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "type": {
                "const": "object",
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          },
          "name": {
            "description": "The name of the tool.",
            "type": "string"
          }
        },
        "required": [
          "inputSchema",
          "name"
        ],
        "type": "object"
      },
      "CallToolResult": {
        "description": "The server's response to a tool call.\n\nAny errors that originate from the tool SHOULD be reported inside the result\nobject, with `isError` set to true, _not_ as an MCP protocol-level error\nresponse. Otherwise, the LLM would not be able to see that an error occurred\nand self-correct.\n\nHowever, any errors in _finding_ the tool, an error indicating that the\nserver does not support tool calls, or any other exceptional conditions,\nshould be reported as an MCP error response.",
        "properties": {
          "_meta": {
            "additionalProperties": {},
            "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
            "type": "object"
          },
          "content": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/TextContent"
                },
                {
                  "$ref": "#/definitions/ImageContent"
                },
                {
                  "$ref": "#/definitions/EmbeddedResource"
                }
              ]
            },
            "type": "array"
          },
          "isError": {
            "description": "Whether the tool call ended in an error.\n\nIf not set, this is assumed to be false (the call was successful).",
            "type": "boolean"
          }
        },
        "required": [
          "content"
        ],
        "type": "object"
      },
      "CompleteResult": {
        "description": "The server's response to a completion/complete request",
        "properties": {
          "_meta": {
            "additionalProperties": {},
            "description": "This result property is reserved by the protocol to allow clients and servers to attach additional metadata to their responses.",
            "type": "object"
          },
          "completion": {
            "properties": {
              "hasMore": {
                "description": "Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.",
                "type": "boolean"
              },
              "total": {
                "description": "The total number of completion options available. This can exceed the number of values actually sent in the response.",
                "type": "integer"
              },
              "values": {
                "description": "An array of completion values. Must not exceed 100 items.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "values"
            ],
            "type": "object"
          }
        },
        "required": [
          "completion"
        ],
        "type": "object"
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "_meta": {},
        "serverInfo": {
          "name": "Test Server",
          "version": "1.0.0"
        },
        "protocolVersion": "1.0.0",
        "capabilities": {
          "tools": {
            "listChanged": true
          }
        },
        "instructions": "This server provides various tools for natural language processing."
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"_meta\":null,\"serverInfo\":{\"name\":\"\",\"version\":\"1.0.0\"},\"protocolVersion\":\"abc\",\"capabilities\":{\"tools\":{\"listChanged\":\"true\"}},\"instructions\":123} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "'true' is not of type 'boolean'\n\nFailed validating 'type' in schema[1]['properties']['capabilities']['properties']['tools']['properties']['listChanged']:\n    {'description': 'Whether this server supports notifications for '\n                    'changes to the tool list.',\n     'type': 'boolean'}\n\nOn instance['capabilities']['tools']['listChanged']:\n    'true'",
      "data": {
        "_meta": null,
        "serverInfo": {
          "name": "",
          "version": "1.0.0"
        },
        "protocolVersion": "abc",
        "capabilities": {
          "tools": {
            "listChanged": "true"
          }
        },
        "instructions": 123
      }
    }
  ]
}