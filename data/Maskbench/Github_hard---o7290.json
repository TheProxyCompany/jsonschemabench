{
  "description": "sample Github_hard/o7290.json",
  "meta": {
    "full_size": 2593,
    "stripped_size": 1483,
    "features": [
      "additionalProperties",
      "additionalProperties:object",
      "items"
    ],
    "raw_features": [
      "$schema",
      "_requiredEmpty",
      "properties",
      "required",
      "type",
      "type:array",
      "type:integer",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-06/schema#",
    "type": "object",
    "properties": {
      "attributes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "min": {
              "type": "integer"
            },
            "max": {
              "type": "integer"
            },
            "featureId": {
              "type": "string"
            }
          },
          "required": [
            "id",
            "min",
            "max",
            "featureId"
          ]
        }
      },
      "contexts": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "min": {
              "type": "integer"
            },
            "max": {
              "type": "integer"
            }
          },
          "required": [
            "id",
            "min",
            "max"
          ]
        }
      },
      "configuration": {
        "type": "object",
        "properties": {
          "selectedFeatures": {
            "description": "initial selected features. If no features are selected this key is optional",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attribute_values": {
            "description": "initial values of the attributes if any. If no attributes are present this key is optional",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "value": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "value"
              ]
            }
          },
          "context_values": {
            "description": "initial values of the context if any. If no context are present this key is optional",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "value": {
                  "type": "integer"
                }
              },
              "required": [
                "id",
                "value"
              ]
            }
          }
        },
        "required": []
      },
      "constraints": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "preferences": {
        "description": "list of expression to maximize. If boolean expressions the goal is to satisfy them",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "smt_constraints": {
        "description": "constraints given in smt format (faster to parse)",
        "properties": {
          "features": {
            "description": "declared features. Not needed in case the option --features-as-boolean is selected",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "formulas": {
            "description": "list of constraints in SMTLib 2 format",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "context_constraints": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "optional_features": {
        "type": "object",
        "description": "Map or the optional feature ids with a list representing their time validity if there is evolution, empty list otherwise.",
        "additionalProperties": {
          "type": "array",
          "description": "List of two element list representing the time bounds if evolution is considered, empty list otherwise.",
          "items": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The bounds of the time validity if evolution is considered. Extremes included."
          }
        }
      },
      "time_context": {
        "type": "string",
        "description": "Optional filed used to indicate in case there is evolution which context id represent the time.",
        "examples": [
          "context_id"
        ]
      }
    },
    "required": [
      "attributes",
      "contexts",
      "configuration",
      "constraints",
      "preferences"
    ]
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "attributes": [
          {
            "id": "attribute1",
            "min": 0,
            "max": 10,
            "featureId": "feature1"
          },
          {
            "id": "attribute2",
            "min": 5,
            "max": 20,
            "featureId": "feature2"
          }
        ],
        "contexts": [
          {
            "id": "context1",
            "min": 0,
            "max": 100
          },
          {
            "id": "context2",
            "min": 50,
            "max": 200
          }
        ],
        "configuration": {
          "selectedFeatures": [
            "feature1",
            "feature2"
          ],
          "attribute_values": [
            {
              "id": "attribute1",
              "value": 5
            },
            {
              "id": "attribute2",
              "value": 10
            }
          ],
          "context_values": [
            {
              "id": "context1",
              "value": 50
            },
            {
              "id": "context2",
              "value": 100
            }
          ]
        },
        "constraints": [
          "constraint1",
          "constraint2"
        ],
        "preferences": [
          "preference1",
          "preference2"
        ],
        "smt_constraints": {
          "features": [
            "feature1",
            "feature2"
          ],
          "formulas": [
            "(declare-fun feature1 () Bool)",
            "(declare-fun feature2 () Bool)",
            "(assert (or feature1 feature2))"
          ]
        },
        "context_constraints": [
          "context_constraint1",
          "context_constraint2"
        ],
        "optional_features": {
          "feature1": [],
          "feature2": [
            [
              0,
              10
            ],
            [
              20,
              30
            ]
          ]
        },
        "time_context": "context1"
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "\"Invalid Value\" is not of type \"array\"",
      "python_error": "'Invalid Value' is not of type 'array'\n\nFailed validating 'type' in schema['properties']['optional_features']['additionalProperties']:\n    {'type': 'array',\n     'description': 'List of two element list representing the time bounds '\n                    'if evolution is considered, empty list otherwise.',\n     'items': {'type': 'array',\n               'items': {'type': 'integer'},\n               'description': 'The bounds of the time validity if '\n                              'evolution is considered. Extremes '\n                              'included.'}}\n\nOn instance['optional_features']['feature3']:\n    'Invalid Value'",
      "data": {
        "attributes": [
          {
            "id": "attribute1",
            "min": 0,
            "max": 10,
            "featureId": "feature1"
          },
          {
            "id": "attribute2",
            "min": 5,
            "max": 20,
            "featureId": "feature2"
          }
        ],
        "contexts": [
          {
            "id": "context1",
            "min": 0,
            "max": 100
          },
          {
            "id": "context2",
            "min": 50,
            "max": 200
          }
        ],
        "configuration": {
          "selectedFeatures": [
            "feature1",
            "feature2"
          ],
          "attribute_values": [
            {
              "id": "attribute1",
              "value": 5
            },
            {
              "id": "attribute2",
              "value": 10
            }
          ],
          "context_values": [
            {
              "id": "context1",
              "value": 50
            },
            {
              "id": "context2",
              "value": 100
            }
          ]
        },
        "constraints": [
          "constraint1",
          "constraint2"
        ],
        "preferences": [
          "preference1",
          "preference2"
        ],
        "smt_constraints": {
          "features": [
            "feature1",
            "feature2"
          ],
          "formulas": [
            "(declare-fun feature1 () Bool)",
            "(declare-fun feature2 () Bool)",
            "(assert (or feature1 feature2))"
          ]
        },
        "context_constraints": [
          "context_constraint1",
          "context_constraint2"
        ],
        "optional_features": {
          "feature1": [],
          "feature2": [
            [
              0,
              10
            ],
            [
              20,
              30
            ]
          ],
          "feature3": "Invalid Value"
        },
        "time_context": "context1"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"ten\" is not of type \"integer\"",
      "python_error": "'ten' is not of type 'integer'\n\nFailed validating 'type' in schema['properties']['configuration']['properties']['attribute_values']['items']['properties']['value']:\n    {'type': 'integer'}\n\nOn instance['configuration']['attribute_values'][1]['value']:\n    'ten'",
      "data": {
        "attributes": [
          {
            "id": "attribute1",
            "min": 0,
            "max": 10,
            "featureId": "feature1"
          },
          {
            "id": "attribute2",
            "min": 5,
            "max": 20,
            "featureId": "feature2"
          }
        ],
        "contexts": [
          {
            "id": "context1",
            "min": 0,
            "max": 100
          },
          {
            "id": "context2",
            "min": 50,
            "max": 200
          }
        ],
        "configuration": {
          "selectedFeatures": [
            "feature1",
            "feature2"
          ],
          "attribute_values": [
            {
              "id": "attribute1",
              "value": 5
            },
            {
              "id": "attribute2",
              "value": "ten"
            }
          ],
          "context_values": [
            {
              "id": "context1",
              "value": 50
            },
            {
              "id": "context2",
              "value": 100
            }
          ]
        },
        "constraints": [
          "constraint1",
          "constraint2"
        ],
        "preferences": [
          "preference1",
          "preference2"
        ],
        "smt_constraints": {
          "features": [
            "feature1",
            "feature2"
          ],
          "formulas": [
            "(declare-fun feature1 () Bool)",
            "(declare-fun feature2 () Bool)",
            "(assert (or feature1 feature2))"
          ]
        },
        "context_constraints": [
          "context_constraint1",
          "context_constraint2"
        ],
        "optional_features": {
          "feature1": [],
          "feature2": [
            [
              0,
              10
            ],
            [
              20,
              30
            ]
          ]
        },
        "time_context": "context1"
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "\"invalid\" is not of type \"array\"",
      "python_error": "{'invalid': 'value'} is not of type 'array'\n\nFailed validating 'type' in schema['properties']['optional_features']['additionalProperties']:\n    {'type': 'array',\n     'description': 'List of two element list representing the time bounds '\n                    'if evolution is considered, empty list otherwise.',\n     'items': {'type': 'array',\n               'items': {'type': 'integer'},\n               'description': 'The bounds of the time validity if '\n                              'evolution is considered. Extremes '\n                              'included.'}}\n\nOn instance['optional_features']['feature4']:\n    {'invalid': 'value'}",
      "data": {
        "attributes": [
          {
            "id": "attribute1",
            "min": 0,
            "max": 10,
            "featureId": "feature1"
          },
          {
            "id": "attribute2",
            "min": 5,
            "max": 20,
            "featureId": "feature2"
          }
        ],
        "contexts": [
          {
            "id": "context1",
            "min": 0,
            "max": 100
          },
          {
            "id": "context2",
            "min": 50,
            "max": 200
          }
        ],
        "configuration": {
          "selectedFeatures": [
            "feature1",
            "feature2"
          ],
          "attribute_values": [
            {
              "id": "attribute1",
              "value": 5
            },
            {
              "id": "attribute2",
              "value": 10
            }
          ],
          "context_values": [
            {
              "id": "context1",
              "value": 50
            },
            {
              "id": "context2",
              "value": 100
            }
          ]
        },
        "constraints": [
          "constraint1",
          "constraint2"
        ],
        "preferences": [
          "preference1",
          "preference2"
        ],
        "smt_constraints": {
          "features": [
            "feature1",
            "feature2"
          ],
          "formulas": [
            "(declare-fun feature1 () Bool)",
            "(declare-fun feature2 () Bool)",
            "(assert (or feature1 feature2))"
          ]
        },
        "context_constraints": [
          "context_constraint1",
          "context_constraint2"
        ],
        "optional_features": {
          "feature1": [],
          "feature2": [
            [
              0,
              10
            ],
            [
              20,
              30
            ]
          ],
          "feature3": "invalid",
          "feature4": {
            "invalid": "value"
          }
        },
        "time_context": "context1"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "attributes": [
          {
            "id": "attribute1",
            "min": 1,
            "max": 10,
            "featureId": "feature1"
          },
          {
            "id": "attribute2",
            "min": 5,
            "max": 20,
            "featureId": "feature2"
          }
        ],
        "contexts": [
          {
            "id": "context1",
            "min": 1,
            "max": 5
          },
          {
            "id": "context2",
            "min": 10,
            "max": 20
          }
        ],
        "configuration": {
          "selectedFeatures": [
            "feature1",
            "feature2"
          ],
          "attribute_values": [
            {
              "id": "attribute1",
              "value": 5
            },
            {
              "id": "attribute2",
              "value": 15
            }
          ],
          "context_values": [
            {
              "id": "context1",
              "value": 3
            },
            {
              "id": "context2",
              "value": 15
            }
          ]
        },
        "constraints": [
          "constraint1",
          "constraint2"
        ],
        "preferences": [
          "preference1",
          "preference2"
        ],
        "smt_constraints": {
          "features": [
            "feature1",
            "feature2"
          ],
          "formulas": [
            "(declare-fun feature1 () Bool)",
            "(declare-fun feature2 () Bool)",
            "(assert (or feature1 feature2))"
          ]
        },
        "context_constraints": [
          "context_constraint1",
          "context_constraint2"
        ],
        "optional_features": {
          "feature1": [],
          "feature2": [
            [
              1,
              10
            ],
            [
              15,
              20
            ]
          ]
        },
        "time_context": "context1"
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "\"extra_value\" is not of type \"array\"",
      "python_error": "'extra_value' is not of type 'array'\n\nFailed validating 'type' in schema['properties']['optional_features']['additionalProperties']:\n    {'type': 'array',\n     'description': 'List of two element list representing the time bounds '\n                    'if evolution is considered, empty list otherwise.',\n     'items': {'type': 'array',\n               'items': {'type': 'integer'},\n               'description': 'The bounds of the time validity if '\n                              'evolution is considered. Extremes '\n                              'included.'}}\n\nOn instance['optional_features']['extra_feature']:\n    'extra_value'",
      "data": {
        "attributes": [
          {
            "id": "attribute1",
            "min": 1,
            "max": 10,
            "featureId": "feature1"
          },
          {
            "id": "attribute2",
            "min": 5,
            "max": 20,
            "featureId": "feature2",
            "extra_key": "extra_value"
          }
        ],
        "contexts": [
          {
            "id": "context1",
            "min": 1,
            "max": 5
          },
          {
            "id": "context2",
            "min": 10,
            "max": 20
          }
        ],
        "configuration": {
          "selectedFeatures": [
            "feature1",
            "feature2"
          ],
          "attribute_values": [
            {
              "id": "attribute1",
              "value": 5
            },
            {
              "id": "attribute2",
              "value": 15
            }
          ],
          "context_values": [
            {
              "id": "context1",
              "value": 3
            },
            {
              "id": "context2",
              "value": 15
            }
          ],
          "extra_key": "extra_value"
        },
        "constraints": [
          "constraint1",
          "constraint2"
        ],
        "preferences": [
          "preference1",
          "preference2"
        ],
        "smt_constraints": {
          "features": [
            "feature1",
            "feature2"
          ],
          "formulas": [
            "(declare-fun feature1 () Bool)",
            "(declare-fun feature2 () Bool)",
            "(assert (or feature1 feature2))"
          ],
          "extra_key": "extra_value"
        },
        "context_constraints": [
          "context_constraint1",
          "context_constraint2"
        ],
        "optional_features": {
          "feature1": [],
          "feature2": [
            [
              1,
              10
            ],
            [
              15,
              20
            ]
          ],
          "extra_feature": "extra_value"
        },
        "time_context": "context1",
        "extra_key": "extra_value"
      }
    }
  ]
}