{
  "description": "sample Github_medium/o75601.json",
  "meta": {
    "full_size": 1629,
    "stripped_size": 1629,
    "features": [
      "@minmaxNumber",
      "enum",
      "items",
      "oneOf"
    ],
    "raw_features": [
      "maximum",
      "minimum",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:boolean",
      "type:null",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "properties": {
      "args": {
        "items": {
          "type": [
            "string",
            "number"
          ]
        },
        "type": "array"
      },
      "description": {
        "type": "string"
      },
      "dialogue": {
        "items": {
          "properties": {
            "name": {
              "type": "string"
            },
            "strictness": {
              "type": "boolean"
            },
            "type": {
              "enum": [
                "output",
                "input"
              ],
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "required": [
            "type",
            "name",
            "value"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "exit_code": {
        "oneOf": [
          {
            "maximum": 255,
            "minimum": 0,
            "type": "number"
          },
          {
            "type": "null"
          }
        ]
      },
      "feedback": {
        "properties": {
          "text": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "type": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object"
      },
      "flow": {
        "type": "boolean"
      },
      "id": {
        "type": "string"
      },
      "log": {
        "properties": {
          "quotes": {
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "properties": {
                    "en": {
                      "enum": [
                        "output",
                        "input",
                        "printing"
                      ],
                      "type": "string"
                    },
                    "he": {
                      "enum": [
                        "פלט",
                        "קלט",
                        "הדפסה"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "en",
                    "he"
                  ],
                  "type": "object"
                },
                "value": {
                  "type": [
                    "string",
                    "number"
                  ]
                }
              },
              "required": [
                "type",
                "value"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "quotes",
          "text"
        ],
        "type": "object"
      },
      "name": {
        "type": "string"
      },
      "result": {
        "properties": {
          "bool": {
            "type": "boolean"
          },
          "text": {
            "enum": [
              "הצלחה",
              "אי-הצלחה"
            ],
            "type": "string"
          }
        },
        "required": [
          "bool",
          "text"
        ],
        "type": "object"
      },
      "signal_code": {
        "oneOf": [
          {
            "maximum": 30,
            "minimum": 1,
            "type": "number"
          },
          {
            "type": "null"
          }
        ]
      },
      "strictness": {
        "type": "boolean"
      },
      "timeout": {
        "minimum": 0,
        "type": "number"
      },
      "verbosity": {
        "maximum": 5,
        "minimum": 0,
        "type": "number"
      }
    },
    "required": [
      "id",
      "name",
      "description",
      "timeout",
      "verbosity",
      "flow",
      "strictness",
      "args",
      "dialogue",
      "log",
      "result",
      "feedback",
      "exit_code",
      "signal_code"
    ],
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "args": [
          "string_arg",
          123
        ],
        "description": "This is a test description",
        "dialogue": [
          {
            "name": "output_name",
            "type": "output",
            "value": "output_value"
          },
          {
            "name": "input_name",
            "type": "input",
            "value": "input_value"
          }
        ],
        "exit_code": 0,
        "feedback": {
          "text": "This is a feedback text",
          "type": "feedback_type"
        },
        "flow": true,
        "id": "test_id",
        "log": {
          "quotes": [
            {
              "type": {
                "en": "output",
                "he": "פלט"
              },
              "value": "quote_value"
            },
            {
              "type": {
                "en": "input",
                "he": "קלט"
              },
              "value": 456
            }
          ],
          "text": "This is a log text"
        },
        "name": "test_name",
        "result": {
          "bool": true,
          "text": "הצלחה"
        },
        "signal_code": 1,
        "strictness": true,
        "timeout": 10,
        "verbosity": 2
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "args": [
          "arg1",
          123
        ],
        "description": "This is a test description",
        "dialogue": [
          {
            "name": "output1",
            "type": "output",
            "value": "This is an output value"
          },
          {
            "name": "input1",
            "strictness": true,
            "type": "input",
            "value": "This is an input value"
          }
        ],
        "exit_code": 0,
        "feedback": {
          "text": "This is a feedback text",
          "type": "success"
        },
        "flow": true,
        "id": "test-id",
        "log": {
          "quotes": [
            {
              "type": {
                "en": "output",
                "he": "פלט"
              },
              "value": "This is a log quote value"
            },
            {
              "type": {
                "en": "input",
                "he": "קלט"
              },
              "value": 456
            }
          ],
          "text": "This is a log text"
        },
        "name": "Test Name",
        "result": {
          "bool": true,
          "text": "הצלחה"
        },
        "signal_code": 1,
        "strictness": true,
        "timeout": 10,
        "verbosity": 2
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "null is not of type \"string\"",
      "python_error": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['dialogue']['items']['properties']['value']:\n    {'type': 'string'}\n\nOn instance['dialogue'][1]['value']:\n    None",
      "data": {
        "args": [
          "arg1",
          123
        ],
        "description": "This is a test description",
        "dialogue": [
          {
            "name": "output1",
            "type": "output",
            "value": "This is an output value"
          },
          {
            "type": "input",
            "name": "input1",
            "value": null,
            "strictness": true
          }
        ],
        "exit_code": 0,
        "feedback": {
          "text": "This is a feedback text",
          "type": "success"
        },
        "flow": true,
        "id": "test-id",
        "log": {
          "quotes": [
            {
              "type": {
                "en": "output",
                "he": "פלט"
              },
              "value": "This is a log quote value"
            },
            {
              "type": {
                "en": "input",
                "he": "קלט"
              },
              "value": 456
            }
          ],
          "text": "This is a log text"
        },
        "name": "Test Name",
        "result": {
          "bool": true,
          "text": "הצלחה"
        },
        "signal_code": 1,
        "strictness": true,
        "timeout": 10,
        "verbosity": 2
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "256 is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "31 is greater than the maximum of 30\n\nFailed validating 'maximum' in schema[0]:\n    {'maximum': 30, 'minimum': 1, 'type': 'number'}\n\nOn instance:\n    31",
      "data": {
        "args": [
          "arg1",
          123
        ],
        "description": "This is a test description",
        "dialogue": [
          {
            "name": "output1",
            "type": "output",
            "value": "This is an output value"
          },
          {
            "name": "input1",
            "strictness": true,
            "type": "input",
            "value": "This is an input value"
          }
        ],
        "exit_code": 256,
        "feedback": {
          "text": "This is a feedback text",
          "type": "success"
        },
        "flow": true,
        "id": "test-id",
        "log": {
          "quotes": [
            {
              "type": {
                "en": "output",
                "he": "פלט"
              },
              "value": "This is a log quote value"
            },
            {
              "type": {
                "en": "input",
                "he": "קלט"
              },
              "value": 456
            }
          ],
          "text": "This is a log text"
        },
        "name": "Test Name",
        "result": {
          "bool": true,
          "text": "הצלחה"
        },
        "signal_code": 31,
        "strictness": true,
        "timeout": 10,
        "verbosity": 2
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "null is not of types \"number\", \"string\"",
      "python_error": "6 is greater than the maximum of 5\n\nFailed validating 'maximum' in schema['properties']['verbosity']:\n    {'maximum': 5, 'minimum': 0, 'type': 'number'}\n\nOn instance['verbosity']:\n    6",
      "data": {
        "args": [
          "arg1",
          null
        ],
        "description": "This is a test description",
        "dialogue": [
          {
            "type": "output",
            "name": "output1",
            "value": "This is an output value"
          },
          {
            "type": "invalidType",
            "name": "input1",
            "value": "This is an input value",
            "strictness": true
          }
        ],
        "exit_code": 256,
        "feedback": {
          "text": "This is a feedback text",
          "type": "success"
        },
        "flow": true,
        "id": "test-id",
        "log": {
          "quotes": [
            {
              "type": {
                "en": "invalidType",
                "he": "פלט"
              },
              "value": "This is a log quote value"
            },
            {
              "type": {
                "en": "input",
                "he": "קלט"
              },
              "value": 456
            }
          ],
          "text": "This is a log text"
        },
        "name": "Test Name",
        "result": {
          "bool": true,
          "text": "Invalid Text"
        },
        "signal_code": 31,
        "strictness": true,
        "timeout": -1,
        "verbosity": 6
      }
    }
  ]
}