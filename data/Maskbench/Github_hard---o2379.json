{
  "description": "sample Github_hard/o2379.json",
  "meta": {
    "full_size": 4311,
    "stripped_size": 1708,
    "features": [
      "enum",
      "items"
    ],
    "raw_features": [
      "$schema",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
      "metadata": {
        "type": "object",
        "description": "Metadata to describe this template",
        "properties": {
          "title": {
            "type": "string",
            "description": "The display name of the template"
          },
          "configurationName": {
            "type": "string",
            "description": "The name of the configuration that will be generated with this template"
          },
          "description": {
            "type": "string",
            "description": "A description of the template"
          }
        },
        "required": [
          "title",
          "configurationName"
        ]
      },
      "configDataSettings": {
        "type": "object",
        "properties": {
          "nodeSettings": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "powershellName": {
                  "type": "string",
                  "description": "The name of this property to be used in PowerShell scripts"
                },
                "displayName": {
                  "type": "string",
                  "description": "The name of the property as shown in the DSC Studio UI"
                },
                "valueType": {
                  "type": "string",
                  "description": "The type of this property to ask the user for",
                  "enum": [
                    "text",
                    "number",
                    "boolean",
                    "choice"
                  ]
                },
                "minOccurences": {
                  "type": "integer",
                  "description": "For boolean properties - the minimum number of nodes that must have this set to 'true' for a configuration to be valid"
                },
                "maxOccurences": {
                  "type": "integer",
                  "description": "For boolean properties - the maximum number of nodes that can have this set to 'true' for a configuration to be valid"
                },
                "choices": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "powershellName",
                "displayName",
                "valueType"
              ]
            }
          },
          "certificateDetails": {
            "type": "boolean",
            "description": "Ask for a certificate thumbprint and path to CER file to allow for encryption of credentials, setting to false will configure DSC to allow plain text passwords (NOT RECOMMENDED)",
            "default": true
          },
          "allowPlainTextPassword": {
            "type": "boolean",
            "description": "Not recommended - Should this template allow users to use plain text passwords in the output? Default is false",
            "default": false
          },
          "minNodeCount": {
            "type": "integer",
            "description": "The minimum number of nodes to be added to this configuration (defaults to 1 if not specified)",
            "default": 1
          },
          "maxNodeCount": {
            "type": "integer",
            "description": "The maximum numbder of nodes that can be added to this configuration (no limit if not specified)"
          }
        }
      },
      "questions": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "An internal ID for this question to use when refering to it in resource values"
            },
            "title": {
              "type": "string",
              "description": "The name of the question to show to the user"
            },
            "type": {
              "type": "string",
              "description": "The type of question to show to the user",
              "enum": [
                "text",
                "number",
                "boolean",
                "filepath",
                "regex",
                "choice",
                "textarray",
                "complextype"
              ]
            },
            "defaultValue": {
              "type": "string",
              "description": "What should the default value of this question be?"
            },
            "group": {
              "type": "string",
              "description": "A group heading to put this question in to"
            },
            "helpText": {
              "type": "string",
              "description": "Additional help text that can be shown for a specific question."
            },
            "validationMessage": {
              "type": "string",
              "description": "The validation error message to be shown to the user"
            },
            "minValue": {
              "type": "integer",
              "description": "The minimum value of this field (for number fields only)"
            },
            "maxValue": {
              "type": "integer",
              "description": "The minimum value of this field (for number fields only)"
            },
            "pattern": {
              "type": "string",
              "description": "The regular expression to validate this field with (for regex fields only)"
            },
            "choices": {
              "type": "array",
              "description": "A list of choices to present the user for this question type",
              "items": {
                "type": "string"
              }
            },
            "showForTrueResponseQuestion": {
              "type": "string",
              "description": "The ID of a boolean question that controls whether or not this question should be displayed and validated"
            },
            "properties": {
              "type": "array",
              "description": "For 'complextype' objects, a collection of properties to record on each object that is added",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the property that appears on the screen"
                  },
                  "powershellName": {
                    "type": "string",
                    "description": "The name of the variable to save this value as in PowerShell scripts"
                  },
                  "type": {
                    "type": "string",
                    "description": "What data type should the UI collect the value as",
                    "enum": [
                      "text",
                      "number",
                      "boolean"
                    ]
                  },
                  "default": {
                    "type": "string",
                    "description": "The default value for this question"
                  }
                },
                "required": [
                  "name",
                  "powershellName",
                  "type"
                ]
              }
            }
          },
          "required": [
            "id",
            "title",
            "type"
          ]
        }
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "metadata": {
          "title": "Example Template",
          "configurationName": "ExampleConfig",
          "description": "This is an example template"
        },
        "configDataSettings": {
          "nodeSettings": [
            {
              "powershellName": "ExampleSetting",
              "displayName": "Example Setting",
              "valueType": "text"
            },
            {
              "powershellName": "ExampleBoolean",
              "displayName": "Example Boolean",
              "valueType": "boolean",
              "minOccurences": 1,
              "maxOccurences": 1
            },
            {
              "powershellName": "ExampleChoice",
              "displayName": "Example Choice",
              "valueType": "choice",
              "choices": [
                "Option 1",
                "Option 2",
                "Option 3"
              ]
            }
          ],
          "certificateDetails": true,
          "allowPlainTextPassword": false,
          "minNodeCount": 1,
          "maxNodeCount": 5
        },
        "questions": [
          {
            "id": "exampleText",
            "title": "Example Text",
            "type": "text",
            "defaultValue": "Example Value",
            "group": "Example Group",
            "helpText": "This is an example text field",
            "validationMessage": "Please enter a valid value"
          },
          {
            "id": "exampleNumber",
            "title": "Example Number",
            "type": "number",
            "defaultValue": "10",
            "minValue": 1,
            "maxValue": 100
          },
          {
            "id": "exampleBoolean",
            "title": "Example Boolean",
            "type": "boolean",
            "defaultValue": "true"
          },
          {
            "id": "exampleChoice",
            "title": "Example Choice",
            "type": "choice",
            "defaultValue": "Option 1",
            "choices": [
              "Option 1",
              "Option 2",
              "Option 3"
            ]
          },
          {
            "id": "exampleComplexType",
            "title": "Example Complex Type",
            "type": "complextype",
            "properties": [
              {
                "name": "Example Property 1",
                "powershellName": "ExampleProperty1",
                "type": "text",
                "default": "Example Value 1"
              },
              {
                "name": "Example Property 2",
                "powershellName": "ExampleProperty2",
                "type": "number",
                "default": "10"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"invalid\" is not one of [\"text\",\"number\",\"boolean\",\"choice\"]",
      "python_error": "'invalid' is not one of ['text', 'number', 'boolean', 'filepath', 'regex', 'choice', 'textarray', 'complextype']\n\nFailed validating 'enum' in schema['properties']['questions']['items']['properties']['type']:\n    {'type': 'string',\n     'description': 'The type of question to show to the user',\n     'enum': ['text',\n              'number',\n              'boolean',\n              'filepath',\n              'regex',\n              'choice',\n              'textarray',\n              'complextype']}\n\nOn instance['questions'][5]['type']:\n    'invalid'",
      "data": {
        "metadata": {
          "title": "Example Template",
          "configurationName": "ExampleConfig",
          "description": "This is an example template"
        },
        "configDataSettings": {
          "nodeSettings": [
            {
              "powershellName": "ExampleSetting",
              "displayName": "Example Setting",
              "valueType": "text"
            },
            {
              "powershellName": "ExampleBoolean",
              "displayName": "Example Boolean",
              "valueType": "boolean",
              "minOccurences": 1,
              "maxOccurences": 1
            },
            {
              "powershellName": "ExampleChoice",
              "displayName": "Example Choice",
              "valueType": "choice",
              "choices": [
                "Option 1",
                "Option 2",
                "Option 3"
              ]
            },
            {
              "powershellName": "ExampleInvalid",
              "displayName": "Example Invalid",
              "valueType": "invalid"
            }
          ],
          "certificateDetails": true,
          "allowPlainTextPassword": false,
          "minNodeCount": 1,
          "maxNodeCount": 5
        },
        "questions": [
          {
            "id": "exampleText",
            "title": "Example Text",
            "type": "text",
            "defaultValue": "Example Value",
            "group": "Example Group",
            "helpText": "This is an example text field",
            "validationMessage": "Please enter a valid value"
          },
          {
            "id": "exampleNumber",
            "title": "Example Number",
            "type": "number",
            "defaultValue": "10",
            "minValue": 1,
            "maxValue": 100
          },
          {
            "id": "exampleBoolean",
            "title": "Example Boolean",
            "type": "boolean",
            "defaultValue": "true"
          },
          {
            "id": "exampleChoice",
            "title": "Example Choice",
            "type": "choice",
            "defaultValue": "Option 1",
            "choices": [
              "Option 1",
              "Option 2",
              "Option 3"
            ]
          },
          {
            "id": "exampleComplexType",
            "title": "Example Complex Type",
            "type": "complextype",
            "properties": [
              {
                "name": "Example Property 1",
                "powershellName": "ExampleProperty1",
                "type": "text",
                "default": "Example Value 1"
              },
              {
                "name": "Example Property 2",
                "powershellName": "ExampleProperty2",
                "type": "number",
                "default": "10"
              }
            ]
          },
          {
            "id": "exampleInvalid",
            "title": "Example Invalid",
            "type": "invalid"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['metadata']['properties']['description']:\n    {'type': 'string', 'description': 'A description of the template'}\n\nOn instance['metadata']['description']:\n    123",
      "data": {
        "metadata": {
          "title": "Example Template",
          "configurationName": "ExampleConfig",
          "description": 123
        },
        "configDataSettings": {
          "nodeSettings": [
            {
              "powershellName": "ExampleSetting",
              "displayName": "Example Setting",
              "valueType": "text"
            },
            {
              "powershellName": "ExampleBoolean",
              "displayName": "Example Boolean",
              "valueType": "boolean",
              "minOccurences": 1,
              "maxOccurences": 1
            },
            {
              "powershellName": "ExampleChoice",
              "displayName": "Example Choice",
              "valueType": "choice",
              "choices": []
            }
          ],
          "certificateDetails": true,
          "allowPlainTextPassword": false,
          "minNodeCount": 1,
          "maxNodeCount": 0
        },
        "questions": [
          {
            "id": "exampleText",
            "title": "Example Text",
            "type": "text",
            "defaultValue": "Example Value",
            "group": "Example Group",
            "helpText": "This is an example text field",
            "validationMessage": "Please enter a valid value"
          },
          {
            "id": "exampleNumber",
            "title": "Example Number",
            "type": "number",
            "defaultValue": "10",
            "minValue": 100,
            "maxValue": 1
          },
          {
            "id": "exampleBoolean",
            "title": "Example Boolean",
            "type": "boolean",
            "defaultValue": "true"
          },
          {
            "id": "exampleChoice",
            "title": "Example Choice",
            "type": "choice",
            "defaultValue": "Option 1",
            "choices": [
              "Option 1",
              "Option 2",
              "Option 3"
            ]
          },
          {
            "id": "exampleComplexType",
            "title": "Example Complex Type",
            "type": "complextype",
            "properties": [
              {
                "name": "Example Property 1",
                "powershellName": "ExampleProperty1",
                "type": "text",
                "default": "Example Value 1"
              },
              {
                "name": "Example Property 2",
                "powershellName": "ExampleProperty2",
                "type": "number",
                "default": "ten"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "metadata": {
          "title": "Example Template",
          "configurationName": "example-config",
          "description": "This is an example template"
        },
        "configDataSettings": {
          "nodeSettings": [
            {
              "powershellName": "exampleProperty",
              "displayName": "Example Property",
              "valueType": "text"
            },
            {
              "powershellName": "exampleBoolean",
              "displayName": "Example Boolean",
              "valueType": "boolean",
              "minOccurences": 1,
              "maxOccurences": 1
            },
            {
              "powershellName": "exampleChoice",
              "displayName": "Example Choice",
              "valueType": "choice",
              "choices": [
                "Option 1",
                "Option 2",
                "Option 3"
              ]
            }
          ],
          "certificateDetails": true,
          "allowPlainTextPassword": false,
          "minNodeCount": 1,
          "maxNodeCount": 5
        },
        "questions": [
          {
            "id": "exampleQuestion",
            "title": "Example Question",
            "type": "text",
            "defaultValue": "Example default value",
            "group": "Example Group",
            "helpText": "This is an example question"
          },
          {
            "id": "exampleNumberQuestion",
            "title": "Example Number Question",
            "type": "number",
            "defaultValue": "10",
            "minValue": 1,
            "maxValue": 100
          },
          {
            "id": "exampleBooleanQuestion",
            "title": "Example Boolean Question",
            "type": "boolean",
            "defaultValue": "true"
          },
          {
            "id": "exampleChoiceQuestion",
            "title": "Example Choice Question",
            "type": "choice",
            "defaultValue": "Option 1",
            "choices": [
              "Option 1",
              "Option 2",
              "Option 3"
            ]
          },
          {
            "id": "exampleComplexTypeQuestion",
            "title": "Example Complex Type Question",
            "type": "complextype",
            "properties": [
              {
                "name": "Property 1",
                "powershellName": "property1",
                "type": "text",
                "default": "Example default value"
              },
              {
                "name": "Property 2",
                "powershellName": "property2",
                "type": "number",
                "default": "10"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['questions']['items']['properties']['defaultValue']:\n    {'type': 'string',\n     'description': 'What should the default value of this question be?'}\n\nOn instance['questions'][0]['defaultValue']:\n    123",
      "data": {
        "metadata": {
          "title": "Example Template",
          "configurationName": ""
        },
        "configDataSettings": {
          "nodeSettings": [
            {
              "powershellName": "exampleProperty",
              "displayName": "Example Property",
              "valueType": "choice",
              "choices": []
            },
            {
              "powershellName": "exampleBoolean",
              "displayName": "Example Boolean",
              "valueType": "boolean",
              "minOccurences": -1,
              "maxOccurences": 1
            }
          ],
          "certificateDetails": true,
          "allowPlainTextPassword": false,
          "minNodeCount": 0,
          "maxNodeCount": -5
        },
        "questions": [
          {
            "id": "",
            "title": "Example Question",
            "type": "text",
            "defaultValue": 123,
            "group": "Example Group",
            "helpText": "This is an example question"
          },
          {
            "id": "exampleNumberQuestion",
            "title": "Example Number Question",
            "type": "number",
            "defaultValue": "ten",
            "minValue": 100,
            "maxValue": 1
          },
          {
            "id": "exampleBooleanQuestion",
            "title": "Example Boolean Question",
            "type": "boolean",
            "defaultValue": "maybe"
          },
          {
            "id": "exampleChoiceQuestion",
            "title": "Example Choice Question",
            "type": "choice",
            "defaultValue": "Option 1",
            "choices": []
          },
          {
            "id": "exampleComplexTypeQuestion",
            "title": "Example Complex Type Question",
            "type": "complextype",
            "properties": [
              {
                "name": "Property 1",
                "powershellName": "",
                "type": "text",
                "default": 123
              }
            ]
          }
        ]
      }
    }
  ]
}