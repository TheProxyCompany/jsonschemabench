{
  "description": "sample Handwritten/notnames10.json",
  "meta": {
    "full_size": 1122,
    "stripped_size": 895,
    "features": [
      "$ref",
      "@minmaxProperties",
      "@siblingKeys",
      "allOf",
      "const",
      "not",
      "pattern",
      "patternProperties",
      "propertyNames"
    ],
    "raw_features": [
      "definitions",
      "maxProperties",
      "type",
      "type:object"
    ]
  },
  "schema": {
    "type": "object",
    "comment": "exactly one field, and 5 implies 7 that implies 9, and 9 implies, recursively, just 5 and 7",
    "comment2": "propertyNames impose two patterns",
    "comment3": "here we combine it with const and with a new top level pattern",
    "const": {
      "0000a5b00079": {
        "0000a5b00078": {
          "a5b0": 123
        }
      }
    },
    "allOf": [
      {
        "$ref": "#/definitions/npn1"
      },
      {
        "$ref": "#/definitions/npn2"
      },
      {
        "$ref": "#/definitions/npn3"
      },
      {
        "$ref": "#/definitions/pp"
      },
      {
        "propertyNames": {
          "pattern": "^(\\w\\w\\d)+$"
        }
      },
      {
        "propertyNames": {
          "pattern": "^(\\w\\d)+$"
        }
      },
      {
        "maxProperties": 1
      }
    ],
    "definitions": {
      "npn1": {
        "not": {
          "propertyNames": {
            "not": {
              "pattern": "a5b"
            }
          }
        }
      },
      "npn2": {
        "not": {
          "propertyNames": {
            "not": {
              "pattern": "(^[^5]*$)|7"
            }
          }
        }
      },
      "npn3": {
        "not": {
          "propertyNames": {
            "not": {
              "pattern": "(^[^7]*$)|9"
            }
          }
        }
      },
      "pp": {
        "patternProperties": {
          "7": {
            "$ref": "#/definitions/al7"
          },
          "9": {
            "$ref": "#/definitions/al9"
          }
        }
      },
      "al7": {
        "allOf": [
          {
            "$ref": "#/definitions/npn1"
          },
          {
            "$ref": "#/definitions/pp"
          },
          {
            "propertyNames": {
              "pattern": "^(\\w\\d)+$"
            }
          },
          {
            "maxProperties": 1
          }
        ]
      },
      "al9": {
        "allOf": [
          {
            "$ref": "#/definitions/npn2"
          },
          {
            "$ref": "#/definitions/pp"
          },
          {
            "propertyNames": {
              "pattern": "^(\\w\\d)+$"
            }
          },
          {
            "maxProperties": 1
          }
        ]
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "0000a5b00079": {
          "0000a5b00078": {
            "a5b0": 123
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on propertyNames keyword",
      "valid": false,
      "rust_error": "{\"0000a5b00079\":{\"0000a5b00078\":{\"a5b0\":123}}} was expected",
      "python_error": "{'0000a5b00079': {'0000a5b00078': {'a5b0': 123}}} was expected\n\nFailed validating 'const' in schema:\n    {'type': 'object',\n     'comment': 'exactly one field, and 5 implies 7 that implies 9, and 9 '\n                'implies, recursively, just 5 and 7',\n     'comment2': 'propertyNames impose two patterns',\n     'comment3': 'here we combine it with const and with a new top level '\n                 'pattern',\n     'const': {'0000a5b00079': {'0000a5b00078': {'a5b0': 123}}},\n     'allOf': [{'$ref': '#/definitions/npn1'},\n               {'$ref': '#/definitions/npn2'},\n               {'$ref': '#/definitions/npn3'},\n               {'$ref': '#/definitions/pp'},\n               {'propertyNames': {'pattern': '^(\\\\w\\\\w\\\\d)+$'}},\n               {'propertyNames': {'pattern': '^(\\\\w\\\\d)+$'}},\n               {'maxProperties': 1}],\n     'definitions': {'npn1': {'not': {'propertyNames': {'not': {'pattern': 'a5b'}}}},\n                     'npn2': {'not': {'propertyNames': {'not': {'pattern': '(^[^5]*$)|7'}}}},\n                 .. (899 more)",
      "data": {
        "0000a5b00079": {
          "ooo000a5b00078": {
            "a5b0": 123
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "{\"0000a5b00079\":{\"0000a5b00078\":{\"a5b0\":123}}} was expected",
      "python_error": "{'0000a5b00079': {'0000a5b00078': {'a5b0': 123}}} was expected\n\nFailed validating 'const' in schema:\n    {'type': 'object',\n     'comment': 'exactly one field, and 5 implies 7 that implies 9, and 9 '\n                'implies, recursively, just 5 and 7',\n     'comment2': 'propertyNames impose two patterns',\n     'comment3': 'here we combine it with const and with a new top level '\n                 'pattern',\n     'const': {'0000a5b00079': {'0000a5b00078': {'a5b0': 123}}},\n     'allOf': [{'$ref': '#/definitions/npn1'},\n               {'$ref': '#/definitions/npn2'},\n               {'$ref': '#/definitions/npn3'},\n               {'$ref': '#/definitions/pp'},\n               {'propertyNames': {'pattern': '^(\\\\w\\\\w\\\\d)+$'}},\n               {'propertyNames': {'pattern': '^(\\\\w\\\\d)+$'}},\n               {'maxProperties': 1}],\n     'definitions': {'npn1': {'not': {'propertyNames': {'not': {'pattern': 'a5b'}}}},\n                     'npn2': {'not': {'propertyNames': {'not': {'pattern': '(^[^5]*$)|7'}}}},\n                 .. (898 more)",
      "data": {
        "0000a5b00079": {
          "0000a5b00078": {
            "a5b0a": 123
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on patternProperties keyword",
      "valid": false,
      "rust_error": "{\"0000a5b00079\":{\"0000a5b00078\":{\"a5b0\":123}}} was expected",
      "python_error": "{'0000a5b00079': {'0000a5b00078': {'a5b0': 123}}} was expected\n\nFailed validating 'const' in schema:\n    {'type': 'object',\n     'comment': 'exactly one field, and 5 implies 7 that implies 9, and 9 '\n                'implies, recursively, just 5 and 7',\n     'comment2': 'propertyNames impose two patterns',\n     'comment3': 'here we combine it with const and with a new top level '\n                 'pattern',\n     'const': {'0000a5b00079': {'0000a5b00078': {'a5b0': 123}}},\n     'allOf': [{'$ref': '#/definitions/npn1'},\n               {'$ref': '#/definitions/npn2'},\n               {'$ref': '#/definitions/npn3'},\n               {'$ref': '#/definitions/pp'},\n               {'propertyNames': {'pattern': '^(\\\\w\\\\w\\\\d)+$'}},\n               {'propertyNames': {'pattern': '^(\\\\w\\\\d)+$'}},\n               {'maxProperties': 1}],\n     'definitions': {'npn1': {'not': {'propertyNames': {'not': {'pattern': 'a5b'}}}},\n                     'npn2': {'not': {'propertyNames': {'not': {'pattern': '(^[^5]*$)|7'}}}},\n                 .. (913 more)",
      "data": {
        "0000a5b00079": {
          "0000a5b00078": {
            "a5b0": 123,
            "a9": {
              "x": 1
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on maxProperties keyword",
      "valid": false,
      "rust_error": "{\"0000a5b00079\":{\"0000a5b00078\":{\"a5b0\":123}}} was expected",
      "python_error": "{'0000a5b00079': {'0000a5b00078': {'a5b0': 123}}} was expected\n\nFailed validating 'const' in schema:\n    {'type': 'object',\n     'comment': 'exactly one field, and 5 implies 7 that implies 9, and 9 '\n                'implies, recursively, just 5 and 7',\n     'comment2': 'propertyNames impose two patterns',\n     'comment3': 'here we combine it with const and with a new top level '\n                 'pattern',\n     'const': {'0000a5b00079': {'0000a5b00078': {'a5b0': 123}}},\n     'allOf': [{'$ref': '#/definitions/npn1'},\n               {'$ref': '#/definitions/npn2'},\n               {'$ref': '#/definitions/npn3'},\n               {'$ref': '#/definitions/pp'},\n               {'propertyNames': {'pattern': '^(\\\\w\\\\w\\\\d)+$'}},\n               {'propertyNames': {'pattern': '^(\\\\w\\\\d)+$'}},\n               {'maxProperties': 1}],\n     'definitions': {'npn1': {'not': {'propertyNames': {'not': {'pattern': 'a5b'}}}},\n                     'npn2': {'not': {'propertyNames': {'not': {'pattern': '(^[^5]*$)|7'}}}},\n                 .. (917 more)",
      "data": {
        "0000a5b00079": {
          "0000a5b00078": {
            "a5b0": 123
          },
          "anotherProp": 456
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on allOf keyword",
      "valid": false,
      "rust_error": "{\"0000a5b00079\":{\"0000a5b00078\":{\"a5b0\":123}}} was expected",
      "python_error": "{'0000a5b00079': {'0000a5b00078': {'a5b0': 123}}} was expected\n\nFailed validating 'const' in schema:\n    {'type': 'object',\n     'comment': 'exactly one field, and 5 implies 7 that implies 9, and 9 '\n                'implies, recursively, just 5 and 7',\n     'comment2': 'propertyNames impose two patterns',\n     'comment3': 'here we combine it with const and with a new top level '\n                 'pattern',\n     'const': {'0000a5b00079': {'0000a5b00078': {'a5b0': 123}}},\n     'allOf': [{'$ref': '#/definitions/npn1'},\n               {'$ref': '#/definitions/npn2'},\n               {'$ref': '#/definitions/npn3'},\n               {'$ref': '#/definitions/pp'},\n               {'propertyNames': {'pattern': '^(\\\\w\\\\w\\\\d)+$'}},\n               {'propertyNames': {'pattern': '^(\\\\w\\\\d)+$'}},\n               {'maxProperties': 1}],\n     'definitions': {'npn1': {'not': {'propertyNames': {'not': {'pattern': 'a5b'}}}},\n                     'npn2': {'not': {'propertyNames': {'not': {'pattern': '(^[^5]*$)|7'}}}},\n                 .. (918 more)",
      "data": {
        "0000a5b00079": {
          "0000a5b00078": {
            "a5b0": 123
          },
          "extraProperty": {}
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"0000a5b00079\":{\"0000a5b00078\":{\"a5b0\":123}}} was expected",
      "python_error": "{'0000a5b00079': {'0000a5b00078': {'a5b0': 123}}} was expected\n\nFailed validating 'const' in schema:\n    {'type': 'object',\n     'comment': 'exactly one field, and 5 implies 7 that implies 9, and 9 '\n                'implies, recursively, just 5 and 7',\n     'comment2': 'propertyNames impose two patterns',\n     'comment3': 'here we combine it with const and with a new top level '\n                 'pattern',\n     'const': {'0000a5b00079': {'0000a5b00078': {'a5b0': 123}}},\n     'allOf': [{'$ref': '#/definitions/npn1'},\n               {'$ref': '#/definitions/npn2'},\n               {'$ref': '#/definitions/npn3'},\n               {'$ref': '#/definitions/pp'},\n               {'propertyNames': {'pattern': '^(\\\\w\\\\w\\\\d)+$'}},\n               {'propertyNames': {'pattern': '^(\\\\w\\\\d)+$'}},\n               {'maxProperties': 1}],\n     'definitions': {'npn1': {'not': {'propertyNames': {'not': {'pattern': 'a5b'}}}},\n                     'npn2': {'not': {'propertyNames': {'not': {'pattern': '(^[^5]*$)|7'}}}},\n                 .. (909 more)",
      "data": {
        "0000a5b00079": {
          "0000a5b00078": {
            "a5b0": 123,
            "abc": 456
          }
        }
      }
    }
  ]
}