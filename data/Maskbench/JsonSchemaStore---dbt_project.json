{
  "description": "sample JsonSchemaStore/dbt_project.json",
  "meta": {
    "full_size": 12656,
    "stripped_size": 11142,
    "features": [
      "$ref",
      "additionalProperties",
      "additionalProperties:object",
      "anyOf",
      "enum",
      "items",
      "oneOf",
      "pattern",
      "patternProperties"
    ],
    "raw_features": [
      "$defs",
      "$schema",
      "_boolSchema",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:null",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "title": "dbt_project",
    "type": "object",
    "required": [
      "name"
    ],
    "$schema": "http://json-schema.org/draft-07/schema#",
    "properties": {
      "version": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "analysis-paths": {
        "$ref": "#/$defs/array_of_strings"
      },
      "asset-paths": {
        "$ref": "#/$defs/array_of_strings"
      },
      "clean-targets": {
        "$ref": "#/$defs/array_of_strings"
      },
      "config-version": {
        "type": "number",
        "default": 2
      },
      "dispatch": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "macro_namespace",
            "search_order"
          ],
          "properties": {
            "macro_namespace": {
              "type": "string"
            },
            "search_order": {
              "$ref": "#/$defs/array_of_strings"
            }
          },
          "additionalProperties": false
        }
      },
      "docs-paths": {
        "$ref": "#/$defs/array_of_strings"
      },
      "log-path": {
        "type": "string"
      },
      "macro-paths": {
        "$ref": "#/$defs/array_of_strings"
      },
      "metrics": {
        "$ref": "#/$defs/metric_configs"
      },
      "model-paths": {
        "$ref": "#/$defs/array_of_strings"
      },
      "models": {
        "$ref": "#/$defs/model_configs"
      },
      "on-run-end": {
        "anyOf": [
          {
            "$ref": "#/$defs/array_of_strings"
          },
          {
            "type": "string"
          }
        ]
      },
      "on-run-start": {
        "anyOf": [
          {
            "$ref": "#/$defs/array_of_strings"
          },
          {
            "type": "string"
          }
        ]
      },
      "packages-install-path": {
        "type": "string"
      },
      "profile": {
        "type": "string"
      },
      "query-comment": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "object",
            "properties": {
              "append": {
                "$ref": "#/$defs/boolean_or_jinja_string"
              },
              "comment": {
                "type": "string"
              },
              "job-label": {
                "$ref": "#/$defs/boolean_or_jinja_string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "quoting": {
        "type": "object",
        "properties": {
          "database": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "identifier": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "schema": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          }
        }
      },
      "require-dbt-version": {
        "$ref": "#/$defs/string_or_array_of_strings"
      },
      "seed-paths": {
        "$ref": "#/$defs/array_of_strings"
      },
      "seeds": {
        "$ref": "#/$defs/seed_configs"
      },
      "snapshot-paths": {
        "$ref": "#/$defs/array_of_strings"
      },
      "snapshots": {
        "$ref": "#/$defs/snapshot_configs"
      },
      "sources": {
        "$ref": "#/$defs/source_configs"
      },
      "target-path": {
        "type": "string"
      },
      "test-paths": {
        "$ref": "#/$defs/array_of_strings"
      },
      "tests": {
        "$ref": "#/$defs/test_configs"
      },
      "vars": {
        "type": "object"
      }
    },
    "additionalProperties": false,
    "$defs": {
      "array_of_strings": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "contract": {
        "type": "object",
        "required": [
          "enforced"
        ],
        "properties": {
          "enforced": {
            "$ref": "#/$defs/boolean_or_jinja_string",
            "default": "true"
          }
        }
      },
      "empty_directory": {
        "type": "null"
      },
      "boolean_or_jinja_string": {
        "oneOf": [
          {
            "$ref": "#/$defs/jinja_string"
          },
          {
            "type": "boolean"
          }
        ]
      },
      "docs_config": {
        "title": "Docs config",
        "type": "object",
        "description": "Configurations for the appearance of nodes in the dbt documentation.",
        "properties": {
          "node_color": {
            "type": "string",
            "description": "The color of the node on the DAG in the documentation. It must be an Hex code or a valid CSS color name.",
            "pattern": "^(#[a-fA-F0-9]{3}|#[a-fA-F0-9]{6}|[^#][a-zA-Z]*)$"
          },
          "show": {
            "type": "boolean",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "jinja_string": {
        "type": "string",
        "pattern": "\\{\\{.*\\}\\}"
      },
      "label_configs": {
        "title": "Label configs",
        "type": "object",
        "description": "Configurations specific to BigQuery adapter used to add labels and tags to tables & views created by dbt.",
        "patternProperties": {
          "^[a-z][a-z0-9_-]{0,63}$": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^[a-z0-9_-]{0,64}$"
              },
              {
                "$ref": "#/$defs/jinja_string"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "metric_configs": {
        "title": "Metric configs",
        "type": "object",
        "description": "Configurations set in the dbt_project.yml file will apply to all metrics that don't have a more specific configuration set.",
        "properties": {
          "+enabled": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+treat_null_values_as_zero": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "enabled": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "treat_null_values_as_zero": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          }
        },
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/$defs/metric_configs"
            },
            {
              "$ref": "#/$defs/empty_directory"
            }
          ]
        }
      },
      "model_configs": {
        "title": "Model configs",
        "type": "object",
        "description": "Configurations set in the dbt_project.yml file will apply to all models that don't have a more specific configuration set.",
        "properties": {
          "+alias": {
            "$ref": "#/$defs/alias"
          },
          "+bind": {
            "$ref": "#/$defs/boolean_or_jinja_string",
            "default": false
          },
          "+contract": {
            "$ref": "#/$defs/contract"
          },
          "+copy_grants": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+database": {
            "$ref": "#/$defs/database"
          },
          "+docs": {
            "$ref": "#/$defs/docs_config"
          },
          "+enabled": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+file_format": {
            "$ref": "#/$defs/file_format"
          },
          "+grant_access_to": {
            "$ref": "#/$defs/grant_access_to"
          },
          "+hours_to_expiration": {
            "$ref": "#/$defs/hours_to_expiration"
          },
          "+incremental_strategy": {
            "$ref": "#/$defs/incremental_strategy"
          },
          "+kms_key_name": {
            "$ref": "#/$defs/kms_key_name"
          },
          "+labels": {
            "$ref": "#/$defs/label_configs"
          },
          "+location": {
            "$ref": "#/$defs/location"
          },
          "+materialized": {
            "$ref": "#/$defs/materialized"
          },
          "+on_schema_change": {
            "$ref": "#/$defs/on_schema_change"
          },
          "+persist_docs": {
            "$ref": "#/$defs/persist_docs_config"
          },
          "+post-hook": {
            "$ref": "#/$defs/array_of_strings"
          },
          "+pre-hook": {
            "$ref": "#/$defs/array_of_strings"
          },
          "+schema": {
            "$ref": "#/$defs/schema"
          },
          "+sql_header": {
            "$ref": "#/$defs/sql_header"
          },
          "+tags": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "+transient": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "alias": {
            "$ref": "#/$defs/alias"
          },
          "bind": {
            "$ref": "#/$defs/boolean_or_jinja_string",
            "default": false
          },
          "contract": {
            "$ref": "#/$defs/contract"
          },
          "copy_grants": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "database": {
            "$ref": "#/$defs/database"
          },
          "docs": {
            "$ref": "#/$defs/docs_config"
          },
          "enabled": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "file_format": {
            "$ref": "#/$defs/file_format"
          },
          "grant_access_to": {
            "$ref": "#/$defs/grant_access_to"
          },
          "hours_to_expiration": {
            "$ref": "#/$defs/hours_to_expiration"
          },
          "incremental_strategy": {
            "$ref": "#/$defs/incremental_strategy"
          },
          "kms_key_name": {
            "$ref": "#/$defs/kms_key_name"
          },
          "labels": {
            "$ref": "#/$defs/label_configs"
          },
          "location": {
            "$ref": "#/$defs/location"
          },
          "materialized": {
            "$ref": "#/$defs/materialized"
          },
          "on_schema_change": {
            "$ref": "#/$defs/on_schema_change"
          },
          "persist_docs": {
            "$ref": "#/$defs/persist_docs_config"
          },
          "post-hook": {
            "$ref": "#/$defs/array_of_strings"
          },
          "pre-hook": {
            "$ref": "#/$defs/array_of_strings"
          },
          "schema": {
            "$ref": "#/$defs/schema"
          },
          "sql_header": {
            "$ref": "#/$defs/sql_header"
          },
          "tags": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "transient": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          }
        },
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/$defs/model_configs"
            },
            {
              "$ref": "#/$defs/empty_directory"
            }
          ]
        }
      },
      "persist_docs_config": {
        "title": "Persist docs config",
        "type": "object",
        "description": "Configurations for the persistence of the dbt documentation.",
        "properties": {
          "columns": {
            "$ref": "#/$defs/boolean_or_jinja_string",
            "default": true
          },
          "relation": {
            "$ref": "#/$defs/boolean_or_jinja_string",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "seed_configs": {
        "title": "Seed configs",
        "type": "object",
        "properties": {
          "+copy_grants": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+database": {
            "$ref": "#/$defs/database"
          },
          "+enabled": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+persist_docs": {
            "$ref": "#/$defs/persist_docs_config"
          },
          "+quote_columns": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+schema": {
            "$ref": "#/$defs/schema"
          },
          "+tags": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "+transient": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+column_types": {
            "$ref": "#/$defs/column_types"
          },
          "+full_refresh": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "copy_grants": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "enabled": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "persist_docs": {
            "$ref": "#/$defs/persist_docs_config"
          },
          "quote_columns": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "tags": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "transient": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "column_types": {
            "$ref": "#/$defs/column_types"
          },
          "full_refresh": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "database": {
            "$ref": "#/$defs/database"
          },
          "schema": {
            "$ref": "#/$defs/schema"
          }
        },
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/$defs/seed_configs"
            },
            {
              "$ref": "#/$defs/empty_directory"
            }
          ]
        }
      },
      "snapshot_configs": {
        "title": "Snapshot configs",
        "type": "object",
        "properties": {
          "+alias": {
            "$ref": "#/$defs/alias"
          },
          "+check_cols": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "+enabled": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+grants": {
            "$ref": "#/$defs/grants"
          },
          "+persist_docs": {
            "$ref": "#/$defs/persist_docs_config"
          },
          "+post-hook": {
            "$ref": "#/$defs/array_of_strings"
          },
          "+pre-hook": {
            "$ref": "#/$defs/array_of_strings"
          },
          "+quote_columns": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+strategy": {
            "$ref": "#/$defs/strategy"
          },
          "+tags": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "+target_database": {
            "$ref": "#/$defs/target_database"
          },
          "+target_schema": {
            "$ref": "#/$defs/target_schema"
          },
          "+transient": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+unique_key": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "+updated_at": {
            "$ref": "#/$defs/updated_at"
          },
          "alias": {
            "$ref": "#/$defs/alias"
          },
          "check_cols": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "enabled": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "grants": {
            "$ref": "#/$defs/grants"
          },
          "persist_docs": {
            "$ref": "#/$defs/persist_docs_config"
          },
          "post-hook": {
            "$ref": "#/$defs/array_of_strings"
          },
          "pre-hook": {
            "$ref": "#/$defs/array_of_strings"
          },
          "quote_columns": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "strategy": {
            "$ref": "#/$defs/strategy"
          },
          "tags": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "target_database": {
            "$ref": "#/$defs/target_database"
          },
          "target_schema": {
            "$ref": "#/$defs/target_schema"
          },
          "transient": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "unique_key": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "updated_at": {
            "$ref": "#/$defs/updated_at"
          }
        },
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/$defs/snapshot_configs"
            },
            {
              "$ref": "#/$defs/empty_directory"
            }
          ]
        }
      },
      "source_configs": {
        "title": "Source configs",
        "type": "object",
        "properties": {
          "+enabled": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+tags": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "enabled": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "tags": {
            "$ref": "#/$defs/string_or_array_of_strings"
          }
        },
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/$defs/source_configs"
            },
            {
              "$ref": "#/$defs/empty_directory"
            }
          ]
        }
      },
      "string_or_array_of_strings": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "$ref": "#/$defs/array_of_strings"
          }
        ]
      },
      "test_configs": {
        "title": "Test configs",
        "type": "object",
        "description": "Configurations set in the dbt_project.yml file will apply to all tests that don't have a more specific configuration set.",
        "properties": {
          "+alias": {
            "$ref": "#/$defs/alias"
          },
          "+database": {
            "$ref": "#/$defs/database"
          },
          "+enabled": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+error_if": {
            "$ref": "#/$defs/error_if"
          },
          "+fail_calc": {
            "$ref": "#/$defs/fail_calc"
          },
          "+limit": {
            "$ref": "#/$defs/limit"
          },
          "+schema": {
            "$ref": "#/$defs/schema"
          },
          "+severity": {
            "$ref": "#/$defs/severity"
          },
          "+store_failures": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "+tags": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "+warn_if": {
            "$ref": "#/$defs/warn_if"
          },
          "enabled": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "error_if": {
            "$ref": "#/$defs/error_if"
          },
          "fail_calc": {
            "$ref": "#/$defs/fail_calc"
          },
          "limit": {
            "$ref": "#/$defs/limit"
          },
          "severity": {
            "$ref": "#/$defs/severity"
          },
          "store_failures": {
            "$ref": "#/$defs/boolean_or_jinja_string"
          },
          "tags": {
            "$ref": "#/$defs/string_or_array_of_strings"
          },
          "warn_if": {
            "$ref": "#/$defs/warn_if"
          },
          "alias": {
            "$ref": "#/$defs/alias"
          },
          "database": {
            "$ref": "#/$defs/database"
          },
          "schema": {
            "$ref": "#/$defs/schema"
          }
        },
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/$defs/test_configs"
            },
            {
              "$ref": "#/$defs/empty_directory"
            }
          ]
        }
      },
      "database": {
        "type": "string"
      },
      "file_format": {
        "type": "string"
      },
      "grant_access_to": {
        "title": "Authorized views",
        "type": "array",
        "description": "Configuration, specific to BigQuery adapter, used to setup authorized views.",
        "items": {
          "type": "object",
          "properties": {
            "database": {
              "type": "string"
            },
            "project": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "hours_to_expiration": {
        "type": "number",
        "description": "Configuration specific to BigQuery adapter used to set an expiration delay (in hours) to a table."
      },
      "incremental_strategy": {
        "type": "string"
      },
      "kms_key_name": {
        "type": "string",
        "description": "Configuration, specific to BigQuery adapter, of the KMS key name used for data encryption."
      },
      "location": {
        "type": "string"
      },
      "materialized": {
        "type": "string"
      },
      "on_schema_change": {
        "type": "string",
        "enum": [
          "append_new_columns",
          "fail",
          "ignore",
          "sync_all_columns"
        ]
      },
      "schema": {
        "type": "string"
      },
      "sql_header": {
        "type": "string"
      },
      "column_types": {
        "type": "object",
        "patternProperties": {
          "": {
            "type": "string"
          }
        }
      },
      "alias": {
        "type": "string"
      },
      "grants": {
        "type": "object"
      },
      "strategy": {
        "type": "string"
      },
      "target_database": {
        "type": "string"
      },
      "target_schema": {
        "type": "string"
      },
      "updated_at": {
        "type": "string"
      },
      "error_if": {
        "type": "string"
      },
      "fail_calc": {
        "type": "string"
      },
      "limit": {
        "type": "number"
      },
      "severity": {
        "oneOf": [
          {
            "$ref": "#/$defs/jinja_string"
          },
          {
            "type": "string",
            "enum": [
              "warn",
              "error"
            ]
          }
        ]
      },
      "warn_if": {
        "type": "string"
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "name": "my_dbt_project",
        "version": "1.0.0",
        "config-version": 2,
        "analysis-paths": [
          "analysis"
        ],
        "asset-paths": [
          "assets"
        ],
        "clean-targets": [
          "target"
        ],
        "dispatch": [
          {
            "macro_namespace": "dbt",
            "search_order": [
              "macros"
            ]
          }
        ],
        "docs-paths": [
          "docs"
        ],
        "log-path": "logs",
        "macro-paths": [
          "macros"
        ],
        "metrics": {
          "+enabled": true,
          "+treat_null_values_as_zero": true
        },
        "model-paths": [
          "models"
        ],
        "models": {
          "+materialized": "table",
          "+alias": "my_model",
          "+schema": "my_schema",
          "+database": "my_database"
        },
        "on-run-end": [
          "echo 'Run ended'"
        ],
        "on-run-start": [
          "echo 'Run started'"
        ],
        "packages-install-path": "dbt_packages",
        "profile": "my_profile",
        "query-comment": "my_query_comment",
        "quoting": {
          "database": true,
          "identifier": true,
          "schema": true
        },
        "require-dbt-version": ">=1.0.0,<2.0.0",
        "seed-paths": [
          "seeds"
        ],
        "seeds": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          }
        },
        "snapshot-paths": [
          "snapshots"
        ],
        "snapshots": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          }
        },
        "sources": {
          "+enabled": true
        },
        "target-path": "target",
        "test-paths": [
          "tests"
        ],
        "tests": {
          "+enabled": true
        },
        "vars": {
          "my_var": "my_value"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"invalid_value\" is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "'invalid_value' is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['seeds']['additionalProperties']:\n    {'oneOf': [{'$ref': '#/$defs/seed_configs'},\n               {'$ref': '#/$defs/empty_directory'}]}\n\nOn instance['seeds']['invalid_key']:\n    'invalid_value'",
      "data": {
        "name": "my_dbt_project",
        "version": "1.0.0",
        "config-version": 2,
        "analysis-paths": [
          "analysis"
        ],
        "asset-paths": [
          "assets"
        ],
        "clean-targets": [
          "target"
        ],
        "dispatch": [
          {
            "macro_namespace": "dbt",
            "search_order": [
              "macros"
            ]
          }
        ],
        "docs-paths": [
          "docs"
        ],
        "log-path": "logs",
        "macro-paths": [
          "macros"
        ],
        "metrics": {
          "+enabled": true,
          "+treat_null_values_as_zero": true
        },
        "model-paths": [
          "models"
        ],
        "models": {
          "+materialized": "table",
          "+alias": "my_model",
          "+schema": "my_schema",
          "+database": "my_database"
        },
        "on-run-end": [
          "echo 'Run ended'"
        ],
        "on-run-start": [
          "echo 'Run started'"
        ],
        "packages-install-path": "dbt_packages",
        "profile": "my_profile",
        "query-comment": "my_query_comment",
        "quoting": {
          "database": true,
          "identifier": true,
          "schema": true
        },
        "require-dbt-version": ">=1.0.0,<2.0.0",
        "seed-paths": [
          "seeds"
        ],
        "seeds": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          },
          "invalid_key": "invalid_value"
        },
        "snapshot-paths": [
          "snapshots"
        ],
        "snapshots": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          }
        },
        "sources": {
          "+enabled": true
        },
        "target-path": "target",
        "test-paths": [
          "tests"
        ],
        "tests": {
          "+enabled": true
        },
        "vars": {
          "my_var": "my_value"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['log-path']:\n    {'type': 'string'}\n\nOn instance['log-path']:\n    123",
      "data": {
        "name": "my_dbt_project",
        "version": "1.0.0",
        "config-version": 2,
        "analysis-paths": [
          "analysis"
        ],
        "asset-paths": [
          "assets"
        ],
        "clean-targets": [
          "target"
        ],
        "dispatch": [
          {
            "macro_namespace": "dbt",
            "search_order": [
              "macros",
              123
            ]
          }
        ],
        "docs-paths": [
          "docs"
        ],
        "log-path": 123,
        "macro-paths": [
          "macros"
        ],
        "metrics": {
          "+enabled": true,
          "+treat_null_values_as_zero": true
        },
        "model-paths": [
          "models"
        ],
        "models": {
          "+materialized": "table",
          "+alias": "my_model",
          "+schema": "my_schema",
          "+database": "my_database"
        },
        "on-run-end": [
          "echo 'Run ended'"
        ],
        "on-run-start": [
          "echo 'Run started'"
        ],
        "packages-install-path": "dbt_packages",
        "profile": "my_profile",
        "query-comment": "my_query_comment",
        "quoting": {
          "database": true,
          "identifier": true,
          "schema": true
        },
        "require-dbt-version": ">=1.0.0,<2.0.0",
        "seed-paths": [
          "seeds"
        ],
        "seeds": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          }
        },
        "snapshot-paths": [
          "snapshots"
        ],
        "snapshots": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          }
        },
        "sources": {
          "+enabled": true
        },
        "target-path": "target",
        "test-paths": [
          "tests"
        ],
        "tests": {
          "+enabled": true
        },
        "vars": {
          "my_var": "my_value"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on patternProperties keyword",
      "valid": false,
      "rust_error": "\"extra_value\" is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "'extra_value' is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['models']['additionalProperties']:\n    {'oneOf': [{'$ref': '#/$defs/model_configs'},\n               {'$ref': '#/$defs/empty_directory'}]}\n\nOn instance['models']['extra_property']:\n    'extra_value'",
      "data": {
        "name": "my_dbt_project",
        "version": "1.0.0",
        "config-version": 2,
        "analysis-paths": [
          "analysis"
        ],
        "asset-paths": [
          "assets"
        ],
        "clean-targets": [
          "target"
        ],
        "dispatch": [
          {
            "macro_namespace": "dbt",
            "search_order": [
              "macros"
            ]
          }
        ],
        "docs-paths": [
          "docs"
        ],
        "log-path": "logs",
        "macro-paths": [
          "macros"
        ],
        "metrics": {
          "+enabled": true,
          "+treat_null_values_as_zero": true
        },
        "model-paths": [
          "models"
        ],
        "models": {
          "+materialized": "table",
          "+alias": "my_model",
          "+schema": "my_schema",
          "+database": "my_database",
          "extra_property": "extra_value",
          "123_invalid_property": "value"
        },
        "on-run-end": [
          "echo 'Run ended'"
        ],
        "on-run-start": [
          "echo 'Run started'"
        ],
        "packages-install-path": "dbt_packages",
        "profile": "my_profile",
        "query-comment": "my_query_comment",
        "quoting": {
          "database": true,
          "identifier": true,
          "schema": true
        },
        "require-dbt-version": ">=1.0.0,<2.0.0",
        "seed-paths": [
          "seeds"
        ],
        "seeds": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          }
        },
        "snapshot-paths": [
          "snapshots"
        ],
        "snapshots": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          }
        },
        "sources": {
          "+enabled": true
        },
        "target-path": "target",
        "test-paths": [
          "tests"
        ],
        "tests": {
          "+enabled": true
        },
        "vars": {
          "my_var": "my_value",
          "1_invalid_property": 123,
          "another_invalid_property": true
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('extra_property' was unexpected)",
      "python_error": "Additional properties are not allowed ('extra_property' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['dispatch']['items']:\n    {'type': 'object',\n     'required': ['macro_namespace', 'search_order'],\n     'properties': {'macro_namespace': {'type': 'string'},\n                    'search_order': {'$ref': '#/$defs/array_of_strings'}},\n     'additionalProperties': False}\n\nOn instance['dispatch'][0]:\n    {'macro_namespace': 'dbt',\n     'search_order': ['macros'],\n     'extra_property': 'value'}",
      "data": {
        "name": "my_dbt_project",
        "version": "1.0.0",
        "config-version": 2,
        "analysis-paths": [
          "analysis"
        ],
        "asset-paths": [
          "assets"
        ],
        "clean-targets": [
          "target"
        ],
        "dispatch": [
          {
            "macro_namespace": "dbt",
            "search_order": [
              "macros"
            ],
            "extra_property": "value"
          }
        ],
        "docs-paths": [
          "docs"
        ],
        "log-path": "logs",
        "macro-paths": [
          "macros"
        ],
        "metrics": {
          "+enabled": true,
          "+treat_null_values_as_zero": true
        },
        "model-paths": [
          "models"
        ],
        "models": {
          "+materialized": "table",
          "+alias": "my_model",
          "+schema": "my_schema",
          "+database": "my_database"
        },
        "on-run-end": [
          "echo 'Run ended'"
        ],
        "on-run-start": [
          "echo 'Run started'"
        ],
        "packages-install-path": "dbt_packages",
        "profile": "my_profile",
        "query-comment": "my_query_comment",
        "quoting": {
          "database": true,
          "identifier": true,
          "schema": true,
          "extra_property": "value"
        },
        "require-dbt-version": ">=1.0.0,<2.0.0",
        "seed-paths": [
          "seeds"
        ],
        "seeds": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          }
        },
        "snapshot-paths": [
          "snapshots"
        ],
        "snapshots": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          }
        },
        "sources": {
          "+enabled": true
        },
        "target-path": "target",
        "test-paths": [
          "tests"
        ],
        "tests": {
          "+enabled": true
        },
        "vars": {
          "my_var": "my_value"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "{\"append\":\"true\",\"comment\":\"my_query_comment\",\"job-label\":\"my_job_label\",\"extra_key\":\"extra_value\"} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "'true' does not match '\\\\{\\\\{.*\\\\}\\\\}'\n\nFailed validating 'pattern' in schema[0]:\n    {'type': 'string', 'pattern': '\\\\{\\\\{.*\\\\}\\\\}'}\n\nOn instance:\n    'true'",
      "data": {
        "name": "my_dbt_project",
        "version": "1.0.0",
        "config-version": 2,
        "analysis-paths": [
          "analysis"
        ],
        "asset-paths": [
          "assets"
        ],
        "clean-targets": [
          "target"
        ],
        "dispatch": [
          {
            "macro_namespace": "dbt",
            "search_order": [
              "macros"
            ]
          }
        ],
        "docs-paths": [
          "docs"
        ],
        "log-path": "logs",
        "macro-paths": [
          "macros"
        ],
        "metrics": {
          "+enabled": true,
          "+treat_null_values_as_zero": true
        },
        "model-paths": [
          "models"
        ],
        "models": {
          "+materialized": "table",
          "+alias": "my_model",
          "+schema": "my_schema",
          "+database": "my_database"
        },
        "on-run-end": [
          "echo 'Run ended'"
        ],
        "on-run-start": [
          "echo 'Run started'"
        ],
        "packages-install-path": "dbt_packages",
        "profile": "my_profile",
        "query-comment": {
          "append": "true",
          "comment": "my_query_comment",
          "job-label": "my_job_label",
          "extra_key": "extra_value"
        },
        "quoting": {
          "database": true,
          "identifier": true,
          "schema": true
        },
        "require-dbt-version": ">=1.0.0,<2.0.0",
        "seed-paths": [
          "seeds"
        ],
        "seeds": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          }
        },
        "snapshot-paths": [
          "snapshots"
        ],
        "snapshots": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          }
        },
        "sources": {
          "+enabled": true
        },
        "target-path": "target",
        "test-paths": [
          "tests"
        ],
        "tests": {
          "+enabled": true
        },
        "vars": {
          "my_var": "my_value"
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"invalid_value\" is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['target-path']:\n    {'type': 'string'}\n\nOn instance['target-path']:\n    None",
      "data": {
        "name": "my_dbt_project",
        "version": "1.0.0",
        "config-version": 2,
        "analysis-paths": [
          "analysis"
        ],
        "asset-paths": [
          "assets"
        ],
        "clean-targets": [
          "target"
        ],
        "dispatch": [
          {
            "macro_namespace": "dbt",
            "search_order": [
              "macros"
            ]
          },
          {
            "macro_namespace": "dbt",
            "search_order": [
              "macros"
            ]
          }
        ],
        "docs-paths": [
          "docs"
        ],
        "log-path": "logs",
        "macro-paths": [
          "macros"
        ],
        "metrics": {
          "+enabled": true,
          "+treat_null_values_as_zero": true,
          "+invalid_key": "invalid_value"
        },
        "model-paths": [
          "models"
        ],
        "models": {
          "+materialized": "invalid_materialized",
          "+alias": "my_model",
          "+schema": "my_schema",
          "+database": "my_database"
        },
        "on-run-end": [
          "echo 'Run ended'",
          "echo 'Run ended'"
        ],
        "on-run-start": [
          "echo 'Run started'",
          "echo 'Run started'"
        ],
        "packages-install-path": "dbt_packages",
        "profile": "my_profile",
        "query-comment": "my_query_comment",
        "quoting": {
          "database": true,
          "identifier": true,
          "schema": true,
          "invalid_key": true
        },
        "require-dbt-version": ">=1.0.0,<2.0.0",
        "seed-paths": [
          "seeds"
        ],
        "seeds": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          },
          "+invalid_key": "invalid_value"
        },
        "snapshot-paths": [
          "snapshots"
        ],
        "snapshots": {
          "+enabled": true,
          "+persist_docs": {
            "columns": true,
            "relation": true
          },
          "+invalid_key": "invalid_value"
        },
        "sources": {
          "+enabled": true,
          "+invalid_key": "invalid_value"
        },
        "target-path": null,
        "test-paths": [
          "tests"
        ],
        "tests": {
          "+enabled": true,
          "+invalid_key": "invalid_value"
        },
        "vars": {
          "my_var": true
        }
      }
    }
  ]
}