{
  "description": "sample Github_medium/o61580.json",
  "meta": {
    "full_size": 2999,
    "stripped_size": 845,
    "features": [
      "enum",
      "pattern"
    ],
    "raw_features": [
      "properties",
      "type",
      "type:boolean",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "properties": {
      "AllowAllAppsAccess": {
        "default": false,
        "description": "Allow all apps to access the certificate in the keychain",
        "type": "boolean"
      },
      "CertServer": {
        "description": "Fully qualified host name of the Active Directory issuing CA.",
        "type": "string"
      },
      "CertTemplate": {
        "default": "User",
        "description": "Template Name as it appears in the General tab of the template’s object in the Certificate Templates’ Microsoft Management Console snap-in component.",
        "type": "string"
      },
      "CertificateAcquisitionMechanism": {
        "description": "Most commonly RPC. If using Web enrollment, HTTP.",
        "enum": [
          "RPC",
          "HTTP"
        ],
        "type": "string"
      },
      "CertificateAuthority": {
        "description": "Name of the CA. This value is determined from the Common Name (CN) of the Active Directory entry: CN=(your CA name), CN='Certification Authorities', CN='Public Key Services', CN='Services', or CN='Configuration', (your base Domain Name).",
        "type": "string"
      },
      "CertificateRenewalTimeInterval": {
        "default": 14,
        "description": "The number of days before the certificate expires at which to start showing the expiration notification",
        "type": "number"
      },
      "Description": {
        "description": "The description of the certificate request as shown in the certificate selector of other payloads such as VPN and Network",
        "type": "string"
      },
      "KeyIsExtractable": {
        "default": false,
        "description": "Allow admin to export private key from the keychain",
        "type": "boolean"
      },
      "Keysize": {
        "default": 2048,
        "description": "The RSA key size for the Certificate Signing Request (CSR).",
        "type": "number"
      },
      "Password": {
        "description": "The password with which to authenticate to the certificate server",
        "type": "string"
      },
      "PayloadDescription": {
        "default": "Requests an Active Directory certificate",
        "description": "Description of the payload",
        "type": "string"
      },
      "PayloadDisplayName": {
        "default": "AD Certificate",
        "description": "Name of the payload",
        "type": "string"
      },
      "PayloadIdentifier": {
        "default": "com.apple.ADCertificate.managed",
        "description": "A unique identifier for the payload, dot-delimited.  Usually root PayloadIdentifier+subidentifier",
        "type": "string"
      },
      "PayloadOrganization": {
        "description": "This value describes the issuing organization of the profile, as displayed to the user",
        "type": "string"
      },
      "PayloadType": {
        "default": "com.apple.ADCertificate.managed",
        "description": "The type of the payload, a reverse dns string",
        "type": "string"
      },
      "PayloadUUID": {
        "default": "",
        "description": "Unique identifier for the payload (format 01234567-89AB-CDEF-0123-456789ABCDEF)",
        "pattern": "^[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}$",
        "type": "string"
      },
      "PayloadVersion": {
        "default": 1,
        "description": "The version of the whole configuration profile.",
        "type": "number"
      },
      "PromptForCredentials": {
        "default": false,
        "description": "Prompt the user for credentials.  This setting is not supported for pushed profiles",
        "type": "boolean"
      },
      "UserName": {
        "description": "The user name with which to authenticate to the certificate server",
        "type": "string"
      }
    },
    "title": "com.apple.ADCertificate.managed",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "AllowAllAppsAccess": true,
        "CertServer": "certserver.example.com",
        "CertTemplate": "User",
        "CertificateAcquisitionMechanism": "RPC",
        "CertificateAuthority": "Example CA",
        "CertificateRenewalTimeInterval": 14,
        "Description": "Example Certificate Request",
        "KeyIsExtractable": false,
        "Keysize": 2048,
        "Password": "password123",
        "PayloadDescription": "Requests an Active Directory certificate",
        "PayloadDisplayName": "AD Certificate",
        "PayloadIdentifier": "com.apple.ADCertificate.managed",
        "PayloadOrganization": "Example Organization",
        "PayloadType": "com.apple.ADCertificate.managed",
        "PayloadUUID": "01234567-89AB-CDEF-0123-456789ABCDEF",
        "PayloadVersion": 1,
        "PromptForCredentials": false,
        "UserName": "username123"
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"InvalidUUID\" does not match \"^[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}$\"",
      "python_error": "'InvalidUUID' does not match '^[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}$'\n\nFailed validating 'pattern' in schema['properties']['PayloadUUID']:\n    {'default': '',\n     'description': 'Unique identifier for the payload (format '\n                    '01234567-89AB-CDEF-0123-456789ABCDEF)',\n     'pattern': '^[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}$',\n     'type': 'string'}\n\nOn instance['PayloadUUID']:\n    'InvalidUUID'",
      "data": {
        "AllowAllAppsAccess": true,
        "CertServer": "certserver.example.com",
        "CertTemplate": "User",
        "CertificateAcquisitionMechanism": "RPC",
        "CertificateAuthority": "Example CA",
        "CertificateRenewalTimeInterval": 14,
        "Description": "Example Certificate Request",
        "KeyIsExtractable": false,
        "Keysize": 2048,
        "Password": "password123",
        "PayloadDescription": "Requests an Active Directory certificate",
        "PayloadDisplayName": "AD Certificate",
        "PayloadIdentifier": "com.apple.ADCertificate.managed",
        "PayloadOrganization": "Example Organization",
        "PayloadType": "com.apple.ADCertificate.managed",
        "PayloadUUID": "InvalidUUID",
        "PayloadVersion": 1,
        "PromptForCredentials": false,
        "UserName": "username123"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"FTP\" is not one of [\"RPC\",\"HTTP\"]",
      "python_error": "'FTP' is not one of ['RPC', 'HTTP']\n\nFailed validating 'enum' in schema['properties']['CertificateAcquisitionMechanism']:\n    {'description': 'Most commonly RPC. If using Web enrollment, HTTP.',\n     'enum': ['RPC', 'HTTP'],\n     'type': 'string'}\n\nOn instance['CertificateAcquisitionMechanism']:\n    'FTP'",
      "data": {
        "AllowAllAppsAccess": true,
        "CertServer": "certserver.example.com",
        "CertTemplate": "User",
        "CertificateAcquisitionMechanism": "FTP",
        "CertificateAuthority": "Example CA",
        "CertificateRenewalTimeInterval": 14,
        "Description": "Example Certificate Request",
        "KeyIsExtractable": false,
        "Keysize": 2048,
        "Password": "password123",
        "PayloadDescription": "Requests an Active Directory certificate",
        "PayloadDisplayName": "AD Certificate",
        "PayloadIdentifier": "com.apple.ADCertificate.managed",
        "PayloadOrganization": "Example Organization",
        "PayloadType": "com.apple.ADCertificate.managed",
        "PayloadUUID": "01234567-89AB-CDEF-0123-456789ABCDEF",
        "PayloadVersion": 1,
        "PromptForCredentials": false,
        "UserName": "username123"
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"01234567-89AB-CDEF-0123-456789ABCDE\" does not match \"^[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}$\"",
      "python_error": "'01234567-89AB-CDEF-0123-456789ABCDE' does not match '^[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}$'\n\nFailed validating 'pattern' in schema['properties']['PayloadUUID']:\n    {'default': '',\n     'description': 'Unique identifier for the payload (format '\n                    '01234567-89AB-CDEF-0123-456789ABCDEF)',\n     'pattern': '^[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}$',\n     'type': 'string'}\n\nOn instance['PayloadUUID']:\n    '01234567-89AB-CDEF-0123-456789ABCDE'",
      "data": {
        "AllowAllAppsAccess": true,
        "CertServer": "certserver.example.com",
        "CertTemplate": "User",
        "CertificateAcquisitionMechanism": "RPC",
        "CertificateAuthority": "Example CA",
        "CertificateRenewalTimeInterval": 14,
        "Description": "Example Certificate Request",
        "KeyIsExtractable": false,
        "Keysize": 2048,
        "Password": "password123",
        "PayloadDescription": "Requests an Active Directory certificate",
        "PayloadDisplayName": "AD Certificate",
        "PayloadIdentifier": "com.apple.ADCertificate.managed",
        "PayloadOrganization": "Example Organization",
        "PayloadType": "com.apple.ADCertificate.managed",
        "PayloadUUID": "01234567-89AB-CDEF-0123-456789ABCDE",
        "PayloadVersion": 1,
        "PromptForCredentials": false,
        "UserName": "username123"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "AllowAllAppsAccess": true,
        "CertServer": "cert-server.example.com",
        "CertTemplate": "User",
        "CertificateAcquisitionMechanism": "RPC",
        "CertificateAuthority": "Example CA",
        "CertificateRenewalTimeInterval": 14,
        "Description": "Example certificate request",
        "KeyIsExtractable": false,
        "Keysize": 2048,
        "Password": "password123",
        "PayloadDescription": "Requests an Active Directory certificate",
        "PayloadDisplayName": "AD Certificate",
        "PayloadIdentifier": "com.apple.ADCertificate.managed",
        "PayloadOrganization": "Example Organization",
        "PayloadType": "com.apple.ADCertificate.managed",
        "PayloadUUID": "01234567-89AB-CDEF-0123-456789ABCDEF",
        "PayloadVersion": 1,
        "PromptForCredentials": false,
        "UserName": "username"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"Web\" is not one of [\"RPC\",\"HTTP\"]",
      "python_error": "'Web' is not one of ['RPC', 'HTTP']\n\nFailed validating 'enum' in schema['properties']['CertificateAcquisitionMechanism']:\n    {'description': 'Most commonly RPC. If using Web enrollment, HTTP.',\n     'enum': ['RPC', 'HTTP'],\n     'type': 'string'}\n\nOn instance['CertificateAcquisitionMechanism']:\n    'Web'",
      "data": {
        "AllowAllAppsAccess": true,
        "CertServer": "cert-server.example.com",
        "CertTemplate": "User",
        "CertificateAcquisitionMechanism": "Web",
        "CertificateAuthority": "Example CA",
        "CertificateRenewalTimeInterval": 14,
        "Description": "Example certificate request",
        "KeyIsExtractable": false,
        "Keysize": 2048,
        "Password": "password123",
        "PayloadDescription": "Requests an Active Directory certificate",
        "PayloadDisplayName": "AD Certificate",
        "PayloadIdentifier": "com.apple.ADCertificate.managed",
        "PayloadOrganization": "Example Organization",
        "PayloadType": "com.apple.ADCertificate.managed",
        "PayloadUUID": "01234567-89AB-CDEF-0123-456789ABCDEF",
        "PayloadVersion": 1,
        "PromptForCredentials": false,
        "UserName": "username"
      }
    }
  ]
}