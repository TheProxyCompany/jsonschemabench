{
  "description": "sample Github_easy/o31293.json",
  "meta": {
    "full_size": 824,
    "stripped_size": 447,
    "features": [
      "additionalProperties",
      "items",
      "patternProperties"
    ],
    "raw_features": [
      "$id",
      "$schema",
      "_boolSchema",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema",
    "$id": "segment",
    "description": "define segments to insert into a jinja template",
    "type": "object",
    "additionalProperties": true,
    "required": [
      "identifier",
      "description",
      "segments"
    ],
    "properties": {
      "$schema": {
        "type": "string"
      },
      "identifier": {
        "description": "the identification of the segments",
        "type": "string"
      },
      "description": {
        "description": "the purpose of this group of segments",
        "type": "string"
      },
      "segments": {
        "additionalProperties": false,
        "description": "the segments to insert",
        "patternProperties": {
          ".+": {
            "description": "a segment of the template, each line should be a separate list item",
            "type": [
              "string",
              "array"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "overwrite": {
        "description": "a list of segment keys that may overwrite previously defined entries",
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema",
        "identifier": "example-segments",
        "description": "Example segments for a jinja template",
        "segments": {
          "header": [
            "This is the header",
            "It can span multiple lines"
          ],
          "footer": "This is the footer",
          "sidebar": [
            "This is the sidebar",
            "It can also span multiple lines"
          ]
        },
        "overwrite": [
          "header",
          "footer"
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema",
        "identifier": "example-segments",
        "description": "Example segments for a jinja template",
        "segments": {
          "header": [
            "This is the header",
            "It can be multiple lines"
          ],
          "footer": "This is the footer",
          "sidebar": [
            "This is the sidebar",
            "It can also be multiple lines"
          ]
        },
        "overwrite": [
          "header",
          "footer"
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on patternProperties keyword",
      "valid": false,
      "rust_error": "42 is not of type \"string\"",
      "python_error": "42 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['segments']['patternProperties']['.+']['items']:\n    {'type': 'string'}\n\nOn instance['segments']['sidebar'][2]:\n    42",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema",
        "identifier": "example-segments",
        "description": "Example segments for a jinja template",
        "segments": {
          "header": [
            "This is the header",
            "It can be multiple lines"
          ],
          "footer": "This is the footer",
          "sidebar": [
            "This is the sidebar",
            "It can also be multiple lines",
            42
          ],
          "invalid-key-with-special-chars!@#$": "This is an invalid key"
        },
        "overwrite": [
          "header",
          "footer"
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['segments']['patternProperties']['.+']['items']:\n    {'type': 'string'}\n\nOn instance['segments']['header'][1]:\n    123",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema",
        "identifier": "example-segments",
        "description": "Example segments for a jinja template",
        "segments": {
          "header": [
            "This is the header",
            123
          ],
          "footer": "This is the footer",
          "sidebar": [
            "This is the sidebar",
            "It can also be multiple lines"
          ]
        },
        "overwrite": [
          "header",
          "footer"
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['overwrite']['items']:\n    {'type': 'string'}\n\nOn instance['overwrite'][2]:\n    None",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema",
        "identifier": "example-segments",
        "description": "Example segments for a jinja template",
        "segments": {
          "header": [
            "This is the header",
            123
          ],
          "footer": "This is the footer",
          "sidebar": [
            "This is the sidebar",
            "It can also be multiple lines"
          ]
        },
        "overwrite": [
          "header",
          "footer",
          null
        ]
      }
    }
  ]
}