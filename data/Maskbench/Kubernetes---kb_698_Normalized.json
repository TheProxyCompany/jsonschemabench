{
  "description": "sample Kubernetes/kb_698_Normalized.json",
  "meta": {
    "full_size": 3338,
    "stripped_size": 1326,
    "features": [
      "$ref",
      "additionalProperties",
      "additionalProperties:object",
      "items",
      "oneOf"
    ],
    "raw_features": [
      "definitions",
      "properties",
      "required",
      "type",
      "type:array",
      "type:integer",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "definitions": {
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelector": {
        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
        "properties": {
          "matchExpressions": {
            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
            "items": {
              "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelectorRequirement"
            },
            "type": "array"
          },
          "matchLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelectorRequirement": {
        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
        "properties": {
          "key": {
            "description": "key is the label key that the selector applies to.",
            "type": "string",
            "x-kubernetes-patch-merge-key": "key",
            "x-kubernetes-patch-strategy": "merge"
          },
          "operator": {
            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
            "type": "string"
          },
          "values": {
            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "key",
          "operator"
        ],
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_util_intstr_IntOrString": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ]
      }
    },
    "description": "PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.",
    "properties": {
      "maxUnavailable": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_util_intstr_IntOrString",
        "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by \"selector\" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with \"minAvailable\"."
      },
      "minAvailable": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_util_intstr_IntOrString",
        "description": "An eviction is allowed if at least \"minAvailable\" pods selected by \"selector\" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying \"100%\"."
      },
      "selector": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelector",
        "description": "Label query over pods whose evictions are managed by the disruption budget."
      }
    },
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "maxUnavailable": 1,
        "selector": {
          "matchLabels": {
            "app": "nginx"
          }
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "maxUnavailable": 1,
        "selector": {
          "matchExpressions": [
            {
              "key": "environment",
              "operator": "In",
              "values": [
                "dev",
                "stg"
              ]
            }
          ],
          "matchLabels": {
            "app": "example"
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "1.5 is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "1.5 is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['maxUnavailable']:\n    {'oneOf': [{'type': 'string'}, {'type': 'integer'}]}\n\nOn instance['maxUnavailable']:\n    1.5",
      "data": {
        "maxUnavailable": 1.5,
        "selector": {
          "matchExpressions": [
            {
              "key": "environment",
              "operator": "In",
              "values": [
                "dev",
                "stg"
              ]
            }
          ],
          "matchLabels": {
            "app": "example"
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['selector']['properties']['matchLabels']['additionalProperties']:\n    {'type': 'string'}\n\nOn instance['selector']['matchLabels']['extra']:\n    123",
      "data": {
        "maxUnavailable": 1,
        "selector": {
          "matchLabels": {
            "app": "example",
            "extra": 123
          },
          "matchExpressions": [
            {
              "key": "environment",
              "operator": "In",
              "values": [
                "dev",
                "stg"
              ]
            }
          ]
        }
      }
    }
  ]
}