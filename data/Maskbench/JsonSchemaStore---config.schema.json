{
  "description": "sample JsonSchemaStore/config.schema.json",
  "meta": {
    "full_size": 4615,
    "stripped_size": 2682,
    "features": [
      "$ref",
      "@siblingKeys",
      "additionalProperties",
      "anyOf",
      "dependencies",
      "items",
      "patternProperties"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/Config",
    "definitions": {
      "BazelStep": {
        "properties": {
          "build_targets": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of bazel targets to build"
          },
          "test_targets": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of bazel targets to test"
          },
          "build_flags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Build flags to use in addition to defined in /etc/bazel.bazelrc"
          },
          "test_flags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Test flags to use in addition to defined in /etc/bazel.bazelrc"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "BranchesAndPaths": {
        "required": [
          "branches"
        ],
        "properties": {
          "branches": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of branch name masks (doubleglob) to match"
          },
          "paths": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of path masks (doubleglob) to match. If not specified, all paths are matched"
          },
          "branches-ignore": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of branch name masks (doubleglob) to ignore"
          },
          "paths-ignore": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of path masks (doubleglob) to match. If not specified, all paths are ignored"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "BranchesOrTags": {
        "anyOf": [
          {
            "required": [
              "branches"
            ]
          },
          {
            "required": [
              "tags"
            ]
          }
        ],
        "properties": {
          "branches": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of branch name masks (doubleglob) to match"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of tag masks (doubleglob) to match"
          },
          "branches-ignore": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of branch name masks (doubleglob) to ignore"
          },
          "tags-ignore": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of tag masks (doubleglob) to ignore"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Config": {
        "required": [
          "workflows"
        ],
        "properties": {
          "workflows": {
            "items": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "$ref": "#/definitions/Workflow"
            },
            "type": "array",
            "description": "The list of FasterCI workflows"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "On": {
        "anyOf": [
          {
            "required": [
              "push"
            ]
          },
          {
            "required": [
              "pull_request"
            ]
          }
        ],
        "properties": {
          "push": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/BranchesOrTags",
            "description": "Run the workflow on code push"
          },
          "pull_request": {
            "$ref": "#/definitions/BranchesAndPaths",
            "description": "Run the workflow on pull request"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Step": {
        "anyOf": [
          {
            "required": [
              "github_check_md_file"
            ]
          },
          {
            "required": [
              "run"
            ]
          },
          {
            "required": [
              "bazel"
            ]
          }
        ],
        "dependencies": {
          "github_check": [
            "name"
          ],
          "github_check_md_file": [
            "name"
          ]
        },
        "properties": {
          "name": {
            "type": "string",
            "description": "Step name, optional"
          },
          "working-directory": {
            "type": "string",
            "description": "Directory to run the step instead of default repo directory"
          },
          "github_check": {
            "type": "boolean",
            "description": "Report the result of the step as a separate github check"
          },
          "github_check_md_file": {
            "type": "string",
            "description": "After completing the step, report as a separate Github Check, using the content of the file as a report body, optional"
          },
          "run": {
            "type": "string",
            "description": "Arbitrary command execution; Could be multiline"
          },
          "bazel": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/BazelStep",
            "description": "Bazel step"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Workflow": {
        "required": [
          "name",
          "on"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Workflow name"
          },
          "on": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/On",
            "description": "Event to activate the workflow on"
          },
          "image": {
            "type": "string",
            "description": "Docker image to run the workflow"
          },
          "cleanup": {
            "type": "string",
            "description": "optional cleanup command, executed after the workflow"
          },
          "max_parallel": {
            "type": "integer",
            "description": "optional maximum number of parallel runs of this workflow"
          },
          "env": {
            "patternProperties": {
              ".*": {
                "type": "string"
              }
            },
            "type": "object",
            "description": "Environment variables"
          },
          "secrets": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of secrets to mount as environment variables"
          },
          "hide_from_github": {
            "type": "boolean",
            "description": "Do not notify github"
          },
          "init": {
            "type": "string",
            "description": "Optional command to run before the workflow. Use multiline for multiple commands"
          },
          "steps": {
            "items": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "$ref": "#/definitions/Step"
            },
            "type": "array",
            "description": "List of workflow steps to execute"
          }
        },
        "additionalProperties": false,
        "type": "object"
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "workflows": [
          {
            "name": "My Workflow",
            "on": {
              "push": {
                "branches": [
                  "main",
                  "release/*"
                ],
                "branches-ignore": [
                  "release/old"
                ]
              }
            },
            "image": "ubuntu:latest",
            "env": {
              "MY_VAR": "my_value"
            },
            "secrets": [
              "MY_SECRET"
            ],
            "steps": [
              {
                "name": "Checkout Code",
                "run": "git checkout ."
              },
              {
                "name": "Install Dependencies",
                "run": "pip install -r requirements.txt"
              },
              {
                "name": "Run Tests",
                "run": "python -m unittest discover -s tests"
              },
              {
                "name": "Bazel Build",
                "bazel": {
                  "build_targets": [
                    "//my_project:my_target"
                  ],
                  "test_targets": [
                    "//my_project:my_test"
                  ],
                  "build_flags": [
                    "--config=opt"
                  ],
                  "test_flags": [
                    "--test_output=errors"
                  ]
                }
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "workflows": [
          {
            "name": "Build and Test",
            "on": {
              "push": {
                "branches": [
                  "main",
                  "release/*"
                ],
                "branches-ignore": [
                  "release/old"
                ]
              }
            },
            "image": "ubuntu:latest",
            "env": {
              "BUILD_TYPE": "debug"
            },
            "secrets": [
              "GITHUB_TOKEN"
            ],
            "steps": [
              {
                "name": "Checkout Code",
                "run": "git checkout main"
              },
              {
                "name": "Install Dependencies",
                "run": "apt-get update && apt-get install -y bazel"
              },
              {
                "name": "Build and Test",
                "bazel": {
                  "build_targets": [
                    "//src:lib"
                  ],
                  "test_targets": [
                    "//src:lib_test"
                  ],
                  "build_flags": [
                    "-c opt"
                  ],
                  "test_flags": [
                    "--test_output=errors"
                  ]
                }
              },
              {
                "name": "Report Results",
                "github_check_md_file": "results.md"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on patternProperties keyword",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "True is not of type 'string'\n\nFailed validating 'type' in schema['properties']['workflows']['items']['properties']['env']['patternProperties']['.*']:\n    {'type': 'string'}\n\nOn instance['workflows'][0]['env']['invalid-key']:\n    True",
      "data": {
        "workflows": [
          {
            "name": "Build and Test",
            "on": {
              "push": {
                "branches": [
                  "main",
                  "release/*"
                ],
                "branches-ignore": [
                  "release/old"
                ]
              }
            },
            "image": "ubuntu:latest",
            "env": {
              "BUILD_TYPE": 123,
              "invalid-key": true
            },
            "secrets": [
              "GITHUB_TOKEN"
            ],
            "steps": [
              {
                "name": "Checkout Code",
                "run": "git checkout main"
              },
              {
                "name": "Install Dependencies",
                "run": "apt-get update && apt-get install -y bazel"
              },
              {
                "name": "Build and Test",
                "bazel": {
                  "build_targets": [
                    "//src:lib"
                  ],
                  "test_targets": [
                    "//src:lib_test"
                  ],
                  "build_flags": [
                    "-c opt"
                  ],
                  "test_flags": [
                    "--test_output=errors"
                  ]
                }
              },
              {
                "name": "Report Results",
                "github_check_md_file": "results.md"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on dependencies keyword",
      "valid": false,
      "rust_error": "{\"github_check\":true} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "'name' is a dependency of 'github_check'\n\nFailed validating 'dependencies' in schema['properties']['workflows']['items']['properties']['steps']['items']:\n    {'anyOf': [{'required': ['github_check_md_file']},\n               {'required': ['run']},\n               {'required': ['bazel']}],\n     'dependencies': {'github_check': ['name'],\n                      'github_check_md_file': ['name']},\n     'properties': {'name': {'type': 'string',\n                             'description': 'Step name, optional'},\n                    'working-directory': {'type': 'string',\n                                          'description': 'Directory to run '\n                                                         'the step instead '\n                                                         'of default repo '\n                                                         'directory'},\n                    'github_check': {'type': 'boolean',\n                                     'description': 'Report the result of '\n                       .. (1579 more)",
      "data": {
        "workflows": [
          {
            "name": "Build and Test",
            "on": {
              "push": {
                "branches": [
                  "main",
                  "release/*"
                ],
                "branches-ignore": [
                  "release/old"
                ]
              }
            },
            "image": "ubuntu:latest",
            "env": {
              "BUILD_TYPE": "debug"
            },
            "secrets": [
              "GITHUB_TOKEN"
            ],
            "steps": [
              {
                "name": "Checkout Code",
                "run": "git checkout main"
              },
              {
                "name": "Install Dependencies",
                "run": "apt-get update && apt-get install -y bazel"
              },
              {
                "name": "Build and Test",
                "bazel": {
                  "build_targets": [
                    "//src:lib"
                  ],
                  "test_targets": [
                    "//src:lib_test"
                  ],
                  "build_flags": [
                    "-c opt"
                  ],
                  "test_flags": [
                    "--test_output=errors"
                  ]
                },
                "github_check": true
              },
              {
                "github_check": true
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "Additional properties are not allowed ('extra_property' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['workflows']['items']['properties']['steps']['items']['properties']['bazel']:\n    {'properties': {'build_targets': {'items': {'type': 'string'},\n                                      'type': 'array',\n                                      'description': 'List of bazel '\n                                                     'targets to build'},\n                    'test_targets': {'items': {'type': 'string'},\n                                     'type': 'array',\n                                     'description': 'List of bazel targets '\n                                                    'to test'},\n                    'build_flags': {'items': {'type': 'string'},\n                                    'type': 'array',\n                                    'description': 'Build flags to use in '\n                                                   'addition to defined in '\n          .. (700 more)",
      "data": {
        "workflows": [
          {
            "name": "Build and Test",
            "on": {
              "push": {
                "branches": [
                  123,
                  "release/*"
                ],
                "branches-ignore": [
                  "release/old"
                ]
              }
            },
            "image": "ubuntu:latest",
            "env": {
              "BUILD_TYPE": "debug"
            },
            "secrets": [
              "GITHUB_TOKEN"
            ],
            "steps": [
              {
                "name": "Checkout Code",
                "run": "git checkout main"
              },
              {
                "name": "Install Dependencies",
                "run": "apt-get update && apt-get install -y bazel"
              },
              {
                "name": "Build and Test",
                "bazel": {
                  "build_targets": [
                    "//src:lib"
                  ],
                  "test_targets": [
                    "//src:lib_test"
                  ],
                  "build_flags": [
                    "-c opt"
                  ],
                  "test_flags": [
                    "--test_output=errors"
                  ],
                  "extra_property": "value"
                }
              },
              {
                "name": "Report Results",
                "github_check_md_file": "results.md"
              }
            ]
          }
        ]
      }
    }
  ]
}