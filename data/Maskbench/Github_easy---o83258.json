{
  "description": "sample Github_easy/o83258.json",
  "meta": {
    "full_size": 1032,
    "stripped_size": 411,
    "features": [
      "$ref",
      "@siblingKeys",
      "additionalProperties",
      "items",
      "oneOf"
    ],
    "raw_features": [
      "_boolSchema",
      "definitions",
      "properties",
      "required",
      "type",
      "type:array",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$ref": "#/definitions/json_react_element",
    "definitions": {
      "json_react_element": {
        "additionalProperties": false,
        "properties": {
          "children": {
            "description": "The children of the element you want to create. If it is a string it will be used as `textContent`; if it is an array it will be mapped using the `json2react` function; if it is an object it will be used as an object described by this schema.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/json_react_element"
              },
              {
                "items": {
                  "$ref": "#/definitions/json_react_element"
                },
                "type": "array"
              }
            ]
          },
          "props": {
            "additionalProperties": true,
            "description": "The properties of the element you want to create. e.g.: { 'className': 'col-xs-12' }. Can be any value accepted as second argument of `React.createElement`",
            "type": "object"
          },
          "type": {
            "description": "The `nodeName` of the element you want to create. e.g.: div; span; strong. Can be any value accepted as first argument of `React.createElement`.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      }
    },
    "title": "JSON React Element",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "type": "div",
        "props": {
          "className": "container"
        },
        "children": [
          {
            "type": "h1",
            "children": "Hello, World!"
          },
          {
            "type": "p",
            "children": "This is a paragraph of text."
          },
          {
            "type": "ul",
            "children": [
              {
                "type": "li",
                "children": "Item 1"
              },
              {
                "type": "li",
                "children": "Item 2"
              },
              {
                "type": "li",
                "children": "Item 3"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "type": "div",
        "props": {
          "className": "container"
        },
        "children": [
          {
            "type": "h1",
            "props": {
              "style": {
                "color": "blue"
              }
            },
            "children": "Hello, World!"
          },
          {
            "type": "p",
            "children": "This is a paragraph of text."
          },
          {
            "type": "ul",
            "children": [
              {
                "type": "li",
                "children": "Item 1"
              },
              {
                "type": "li",
                "children": "Item 2"
              },
              {
                "type": "li",
                "children": "Item 3"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "[{\"type\":\"h1\",\"props\":{\"style\":{\"color\":\"blue\"}},\"children\":\"Hello, World!\"},{\"type\":\"p\",\"children\":1234},{\"type\":\"ul\",\"children\":[{\"type\":\"li\",\"children\":\"Item 1\"},{\"type\":\"li\",\"children\":\"Item 2\"},{\"type\":\"li\",\"children\":\"Item 3\"}]}] is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "1234 is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema[2]['items']['properties']['children']:\n    {'description': 'The children of the element you want to create. If it '\n                    'is a string it will be used as `textContent`; if it '\n                    'is an array it will be mapped using the `json2react` '\n                    'function; if it is an object it will be used as an '\n                    'object described by this schema.',\n     'oneOf': [{'type': 'string'},\n               {'$ref': '#/definitions/json_react_element'},\n               {'items': {'$ref': '#/definitions/json_react_element'},\n                'type': 'array'}]}\n\nOn instance[1]['children']:\n    1234",
      "data": {
        "type": "div",
        "props": {
          "className": "container"
        },
        "children": [
          {
            "type": "h1",
            "props": {
              "style": {
                "color": "blue"
              }
            },
            "children": "Hello, World!"
          },
          {
            "type": "p",
            "children": 1234
          },
          {
            "type": "ul",
            "children": [
              {
                "type": "li",
                "children": "Item 1"
              },
              {
                "type": "li",
                "children": "Item 2"
              },
              {
                "type": "li",
                "children": "Item 3"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['type']:\n    {'description': 'The `nodeName` of the element you want to create. '\n                    'e.g.: div; span; strong. Can be any value accepted as '\n                    'first argument of `React.createElement`.',\n     'type': 'string'}\n\nOn instance['type']:\n    123",
      "data": {
        "type": 123,
        "props": {
          "className": "container"
        },
        "children": [
          {
            "type": "h1",
            "props": {
              "style": {
                "color": "blue"
              }
            },
            "children": "Hello, World!"
          },
          {
            "type": "p",
            "children": "This is a paragraph of text."
          },
          {
            "type": "ul",
            "children": [
              {
                "type": "li",
                "children": "Item 1"
              },
              {
                "type": "li",
                "children": "Item 2"
              },
              {
                "type": "li",
                "children": "Item 3"
              }
            ]
          }
        ]
      }
    }
  ]
}