{
  "description": "sample Github_medium/o71260.json",
  "meta": {
    "full_size": 3686,
    "stripped_size": 1478,
    "features": [
      "@minmaxItems",
      "enum",
      "items",
      "pattern"
    ],
    "raw_features": [
      "$schema",
      "minItems",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "This is a json-schema for the statemachines as defined by the php izzum library. see http://jsonschemalint.com/draft4/# to validate your json definitions",
    "properties": {
      "comment": {
        "description": "comments for the description of the file contents can be placed here.",
        "type": [
          "string",
          "null"
        ]
      },
      "machines": {
        "description": "All machines are defined here",
        "items": {
          "description": "A full machine definition",
          "properties": {
            "description": {
              "description": "a description of the machine",
              "type": [
                "string",
                "null"
              ]
            },
            "factory": {
              "description": "\\fully\\qualified\\Factory class name",
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "description": "the name of the machine",
              "pattern": "^([a-z0-9])+((-)?([a-z0-9])+)*$",
              "type": "string"
            },
            "states": {
              "description": "All state definitions for a machine go in this array",
              "items": {
                "description": "A state definition",
                "properties": {
                  "description": {
                    "description": "A description of the state",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "entry_callable": {
                    "description": "A php callable for state entry. can only be in form of fully\\qualified\\Class::staticMethod",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "entry_command": {
                    "description": "\\fully\\qualified\\Command (multiple can be comma seperated) that will be executed on entry of the state",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "exit_callable": {
                    "description": "A php callable for state exit. can only be in form of fully\\qualified\\Class::staticMethod",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "exit_command": {
                    "description": "\\fully\\qualified\\Command name (multiple can be comma seperated) that will be executed on exit of the state",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "name": {
                    "description": "the state name",
                    "pattern": "^([a-z0-9])+((-)?([a-z0-9])+)*$|^(not-)?regex:(.*)$",
                    "type": "string"
                  },
                  "type": {
                    "description": "the type of state: initial (1), normal(0..n), final (1..n) or regex (0..n)",
                    "enum": [
                      "initial",
                      "normal",
                      "final",
                      "regex"
                    ]
                  }
                },
                "required": [
                  "name",
                  "type"
                ],
                "type": "object"
              },
              "minItems": 2,
              "type": "array",
              "_uniqueItems": true
            },
            "transitions": {
              "description": "A list of transitions, referring to the states",
              "items": {
                "description": "A transition definition",
                "properties": {
                  "command": {
                    "description": "\\fully\\qualified\\Command name (multiple can be comma seperated) that will be executed as the transition logic",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "description": {
                    "description": "The description of the transition",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "event": {
                    "description": "an event name by which you can call this transition",
                    "pattern": "^[a-zA-Z0-9]+$",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "guard_callable": {
                    "description": "A php callable for guard logic. can only be in form of fully\\qualified\\Class::staticMethod",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "rule": {
                    "description": "\\fully\\qualified\\Rule name (multiple can be comma seperated) that will be checked as boolean guard logic before the transition",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "state_from": {
                    "description": "the state from which the transition is made. this can be a regex.",
                    "pattern": "^([a-z0-9])+((-)?([a-z0-9])+)*$|^(not-)?regex:(.*)$",
                    "type": "string"
                  },
                  "state_to": {
                    "description": "the state to which the transition is made. this can be a regex.",
                    "pattern": "^([a-z0-9])+((-)?([a-z0-9])+)*$|^(not-)?regex:(.*)$",
                    "type": "string"
                  },
                  "transition_callable": {
                    "description": "A php callable for transition logic. can only be in form of fully\\qualified\\Class::staticMethod",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "required": [
                  "state_from",
                  "state_to",
                  "event"
                ],
                "type": "object"
              },
              "minItems": 1,
              "type": "array",
              "_uniqueItems": true
            }
          },
          "required": [
            "name",
            "description",
            "states",
            "transitions"
          ],
          "type": "object"
        },
        "minItems": 1,
        "type": "array",
        "_uniqueItems": true
      }
    },
    "required": [
      "machines"
    ],
    "title": "izzum statemachines definitions schema",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "comment": "This is a sample statemachine definition",
        "machines": [
          {
            "description": "A sample machine",
            "factory": "App\\Machines\\SampleMachineFactory",
            "name": "sample-machine",
            "states": [
              {
                "description": "The initial state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterInitialState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitInitialState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "initial-state",
                "type": "initial"
              },
              {
                "description": "A normal state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterNormalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitNormalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "normal-state",
                "type": "normal"
              },
              {
                "description": "A final state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterFinalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitFinalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "final-state",
                "type": "final"
              }
            ],
            "transitions": [
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from initial state to normal state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "initial-state",
                "state_to": "normal-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              },
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from normal state to final state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "normal-state",
                "state_to": "final-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"sample-machine!\" does not match \"^([a-z0-9])+((-)?([a-z0-9])+)*$\"",
      "python_error": "'sample-machine!' does not match '^([a-z0-9])+((-)?([a-z0-9])+)*$'\n\nFailed validating 'pattern' in schema['properties']['machines']['items']['properties']['name']:\n    {'description': 'the name of the machine',\n     'pattern': '^([a-z0-9])+((-)?([a-z0-9])+)*$',\n     'type': 'string'}\n\nOn instance['machines'][0]['name']:\n    'sample-machine!'",
      "data": {
        "comment": "This is a sample statemachine definition",
        "machines": [
          {
            "description": "A sample machine",
            "factory": "App\\Machines\\SampleMachineFactory",
            "name": "sample-machine!",
            "states": [
              {
                "description": "The initial state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterInitialState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitInitialState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "initial-state",
                "type": "initial"
              },
              {
                "description": "A normal state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterNormalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitNormalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "normal-state",
                "type": "normal"
              },
              {
                "description": "A final state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterFinalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitFinalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "final-state",
                "type": "final"
              }
            ],
            "transitions": [
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from initial state to normal state",
                "event": "transitionEvent!",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "initial-state",
                "state_to": "normal-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              },
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from normal state to final state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "normal-state",
                "state_to": "final-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"null\", \"string\"",
      "python_error": "123 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['comment']:\n    {'description': 'comments for the description of the file contents can '\n                    'be placed here.',\n     'type': ['string', 'null']}\n\nOn instance['comment']:\n    123",
      "data": {
        "comment": 123,
        "machines": [
          {
            "description": "A sample machine",
            "factory": "App\\Machines\\SampleMachineFactory",
            "name": "sample-machine",
            "states": [
              {
                "description": "The initial state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterInitialState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitInitialState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "initial-state",
                "type": "initial"
              },
              {
                "description": "A normal state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterNormalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitNormalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "normal-state",
                "type": "normal"
              },
              {
                "description": "A final state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterFinalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitFinalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "final-state",
                "type": "final"
              }
            ],
            "transitions": [
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from initial state to normal state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "initial-state",
                "state_to": "normal-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              },
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from normal state to final state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "normal-state",
                "state_to": "final-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minItems keyword",
      "valid": false,
      "rust_error": "[{\"description\":\"The initial state\",\"entry_callable\":\"App\\\\Machines\\\\SampleMachine::onEnterInitialState\",\"entry_command\":\"App\\\\Commands\\\\SampleCommand\",\"exit_callable\":\"App\\\\Machines\\\\SampleMachine::onExitInitialState\",\"exit_command\":\"App\\\\Commands\\\\SampleExitCommand\",\"name\":\"initial-state\",\"type\":\"initial\"}] has less than 2 items",
      "python_error": "[{'description': 'The initial state', 'entry_callable': 'App\\\\Machines\\\\SampleMachine::onEnterInitialState', 'entry_command': 'App\\\\Commands\\\\SampleCommand', 'exit_callable': 'App\\\\Machines\\\\SampleMachine::onExitInitialState', 'exit_command': 'App\\\\Commands\\\\SampleExitCommand', 'name': 'initial-state', 'type': 'initial'}] is too short\n\nFailed validating 'minItems' in schema['properties']['machines']['items']['properties']['states']:\n    {'description': 'All state definitions for a machine go in this array',\n     'items': {'description': 'A state definition',\n               'properties': {'description': {'description': 'A '\n                                                             'description '\n                                                             'of the state',\n                                              'type': ['string', 'null']},\n                              'entry_callable': {'description': 'A php '\n                                                                'callable '\n                .. (4355 more)",
      "data": {
        "comment": "This is a sample statemachine definition",
        "machines": [
          {
            "description": "A sample machine",
            "factory": "App\\Machines\\SampleMachineFactory",
            "name": "sample-machine",
            "states": [
              {
                "description": "The initial state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterInitialState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitInitialState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "initial-state",
                "type": "initial"
              }
            ],
            "transitions": [
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from initial state to normal state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "initial-state",
                "state_to": "normal-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"Invalid-State!\" does not match \"^([a-z0-9])+((-)?([a-z0-9])+)*$|^(not-)?regex:(.*)$\"",
      "python_error": "'Invalid-State!' does not match '^([a-z0-9])+((-)?([a-z0-9])+)*$|^(not-)?regex:(.*)$'\n\nFailed validating 'pattern' in schema['properties']['machines']['items']['properties']['states']['items']['properties']['name']:\n    {'description': 'the state name',\n     'pattern': '^([a-z0-9])+((-)?([a-z0-9])+)*$|^(not-)?regex:(.*)$',\n     'type': 'string'}\n\nOn instance['machines'][0]['states'][1]['name']:\n    'Invalid-State!'",
      "data": {
        "comment": "This is a sample statemachine definition",
        "machines": [
          {
            "description": "A sample machine",
            "factory": "App\\Machines\\SampleMachineFactory",
            "name": "sample-machine",
            "states": [
              {
                "description": "The initial state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterInitialState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitInitialState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "initial-state",
                "type": "initial"
              },
              {
                "description": "A normal state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterNormalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitNormalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "Invalid-State!",
                "type": "normal"
              },
              {
                "description": "A final state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterFinalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitFinalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "final-state",
                "type": "final"
              }
            ],
            "transitions": [
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from initial state to normal state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "initial-state",
                "state_to": "normal-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              },
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from normal state to final state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "normal-state",
                "state_to": "final-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "1 is not one of [\"initial\",\"normal\",\"final\",\"regex\"]",
      "python_error": "1 is not one of ['initial', 'normal', 'final', 'regex']\n\nFailed validating 'enum' in schema['properties']['machines']['items']['properties']['states']['items']['properties']['type']:\n    {'description': 'the type of state: initial (1), normal(0..n), final '\n                    '(1..n) or regex (0..n)',\n     'enum': ['initial', 'normal', 'final', 'regex']}\n\nOn instance['machines'][0]['states'][0]['type']:\n    1",
      "data": {
        "comment": "This is a sample statemachine definition",
        "machines": [
          {
            "description": "A sample machine",
            "factory": "App\\Machines\\SampleMachineFactory",
            "name": "sample-machine",
            "states": [
              {
                "description": "The initial state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterInitialState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitInitialState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "initial-state",
                "type": 1
              },
              {
                "description": "A normal state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterNormalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitNormalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "normal-state",
                "type": "normal"
              },
              {
                "description": "A final state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterFinalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitFinalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "final-state",
                "type": "final"
              }
            ],
            "transitions": [
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from initial state to normal state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "initial-state",
                "state_to": "normal-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              },
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from normal state to final state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "normal-state",
                "state_to": "final-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"Invalid-State!\" does not match \"^([a-z0-9])+((-)?([a-z0-9])+)*$|^(not-)?regex:(.*)$\"",
      "python_error": "'Invalid-Event!' does not match '^[a-zA-Z0-9]+$'\n\nFailed validating 'pattern' in schema['properties']['machines']['items']['properties']['transitions']['items']['properties']['event']:\n    {'description': 'an event name by which you can call this transition',\n     'pattern': '^[a-zA-Z0-9]+$',\n     'type': ['string', 'null']}\n\nOn instance['machines'][0]['transitions'][0]['event']:\n    'Invalid-Event!'",
      "data": {
        "comment": "This is a sample statemachine definition",
        "machines": [
          {
            "description": "A sample machine",
            "factory": "App\\Machines\\SampleMachineFactory",
            "name": "sample-machine",
            "states": [
              {
                "description": "The initial state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterInitialState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitInitialState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "initial-state",
                "type": "initial"
              },
              {
                "description": "A normal state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterNormalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitNormalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "normal-state",
                "type": "normal"
              },
              {
                "description": "A final state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterFinalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitFinalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "Invalid-State!",
                "type": "final"
              }
            ],
            "transitions": [
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from initial state to normal state",
                "event": "Invalid-Event!",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "initial-state",
                "state_to": "normal-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              },
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from normal state to final state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "normal-state",
                "state_to": "final-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "12345 is not of types \"null\", \"string\"",
      "python_error": "12345 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['comment']:\n    {'description': 'comments for the description of the file contents can '\n                    'be placed here.',\n     'type': ['string', 'null']}\n\nOn instance['comment']:\n    12345",
      "data": {
        "comment": 12345,
        "machines": [
          {
            "description": "A sample machine",
            "factory": "App\\Machines\\SampleMachineFactory",
            "name": "sample-machine",
            "states": [
              {
                "description": "The initial state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterInitialState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitInitialState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "initial-state",
                "type": 12345
              },
              {
                "description": "A normal state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterNormalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitNormalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "normal-state",
                "type": "normal"
              },
              {
                "description": "A final state",
                "entry_callable": "App\\Machines\\SampleMachine::onEnterFinalState",
                "entry_command": "App\\Commands\\SampleCommand",
                "exit_callable": "App\\Machines\\SampleMachine::onExitFinalState",
                "exit_command": "App\\Commands\\SampleExitCommand",
                "name": "final-state",
                "type": "final"
              }
            ],
            "transitions": [
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from initial state to normal state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "initial-state",
                "state_to": "normal-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              },
              {
                "command": "App\\Commands\\SampleCommand",
                "description": "Transition from normal state to final state",
                "event": "transitionEvent",
                "guard_callable": "App\\Machines\\SampleMachine::guardTransition",
                "rule": "App\\Rules\\SampleRule",
                "state_from": "normal-state",
                "state_to": "final-state",
                "transition_callable": "App\\Machines\\SampleMachine::onTransition"
              }
            ]
          }
        ]
      }
    }
  ]
}