{
  "description": "sample Kubernetes/kb_600_Normalized.json",
  "meta": {
    "full_size": 744,
    "stripped_size": 377,
    "features": [
      "$ref",
      "oneOf"
    ],
    "raw_features": [
      "definitions",
      "properties",
      "type",
      "type:[]",
      "type:integer",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "definitions": {
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_util_intstr_IntOrString": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ]
      }
    },
    "description": "NetworkPolicyPort describes a port to allow traffic on",
    "properties": {
      "port": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_util_intstr_IntOrString",
        "description": "The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers."
      },
      "protocol": {
        "description": "The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "port": 8080,
        "protocol": "TCP"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "true is not of types \"null\", \"string\"",
      "python_error": "True is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['protocol']:\n    {'description': 'The protocol (TCP, UDP, or SCTP) which traffic must '\n                    'match. If not specified, this field defaults to TCP.',\n     'type': ['string', 'null']}\n\nOn instance['protocol']:\n    True",
      "data": {
        "port": 8080,
        "protocol": true
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "[8080] is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "[8080] is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['port']:\n    {'oneOf': [{'type': 'string'}, {'type': 'integer'}]}\n\nOn instance['port']:\n    [8080]",
      "data": {
        "port": [
          8080
        ],
        "protocol": "TCP"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "1.2 is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "1.2 is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['port']:\n    {'oneOf': [{'type': 'string'}, {'type': 'integer'}]}\n\nOn instance['port']:\n    1.2",
      "data": {
        "port": 1.2,
        "protocol": "TCP"
      }
    }
  ]
}