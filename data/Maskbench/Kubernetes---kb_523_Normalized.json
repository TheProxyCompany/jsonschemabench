{
  "description": "sample Kubernetes/kb_523_Normalized.json",
  "meta": {
    "full_size": 3896,
    "stripped_size": 829,
    "features": [
      "$ref",
      "format",
      "format:int32"
    ],
    "raw_features": [
      "definitions",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:integer",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "definitions": {
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_flowcontrol_v1alpha1_LimitResponse": {
        "description": "LimitResponse defines how to handle requests that can not be executed right now.",
        "properties": {
          "queuing": {
            "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_flowcontrol_v1alpha1_QueuingConfiguration",
            "description": "`queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `\"Queue\"`."
          },
          "type": {
            "description": "`type` is \"Queue\" or \"Reject\". \"Queue\" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. \"Reject\" means that requests that can not be executed upon arrival are rejected. Required.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object",
        "x-kubernetes-unions": [
          {
            "discriminator": "type",
            "fields-to-discriminateBy": {
              "queuing": "Queuing"
            }
          }
        ]
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_flowcontrol_v1alpha1_QueuingConfiguration": {
        "description": "QueuingConfiguration holds the configuration parameters for queuing",
        "properties": {
          "handSize": {
            "_format": "int32",
            "description": "`handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.",
            "type": "integer"
          },
          "queueLengthLimit": {
            "_format": "int32",
            "description": "`queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.",
            "type": "integer"
          },
          "queues": {
            "_format": "int32",
            "description": "`queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.",
            "type": "integer"
          }
        },
        "type": "object"
      }
    },
    "description": "LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:\n * How are requests for this priority level limited?\n * What should be done with requests that exceed the limit?",
    "properties": {
      "assuredConcurrencyShares": {
        "description": "`assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:\n\n            ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )\n\nbigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.",
        "format": "int32",
        "type": [
          "integer",
          "null"
        ]
      },
      "limitResponse": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_flowcontrol_v1alpha1_LimitResponse",
        "description": "`limitResponse` indicates what to do with requests that can not be executed right now"
      }
    },
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "assuredConcurrencyShares": 50,
        "limitResponse": {
          "type": "Queue",
          "queuingConfiguration": {
            "handSize": 8,
            "queueLengthLimit": 100,
            "queues": 64
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"50\" is not of types \"integer\", \"null\"",
      "python_error": "'50' is not of type 'integer', 'null'\n\nFailed validating 'type' in schema['properties']['assuredConcurrencyShares']:\n    {'description': '`assuredConcurrencyShares` (ACS) configures the '\n                    'execution limit, which is a limit on the number of '\n                    'requests of this priority level that may be exeucting '\n                    'at a given time.  ACS must be a positive number. The '\n                    \"server's concurrency limit (SCL) is divided among the \"\n                    'concurrency-controlled priority levels in proportion '\n                    'to their assured concurrency shares. This produces '\n                    'the assured concurrency value (ACV) --- the number of '\n                    'requests that may be executing at a time --- for each '\n                    'such priority level:\\n'\n                    '\\n'\n                    '            ACV(l) = ceil( SCL * ACS(l) / ( '\n                    'sum[priority levels k] ACS(k) ) )\\n'\n                    '\\n'\n        .. (304 more)",
      "data": {
        "assuredConcurrencyShares": "50",
        "limitResponse": {
          "type": "Queue",
          "queuingConfiguration": {
            "handSize": 8,
            "queueLengthLimit": 100,
            "queues": 64
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on format keyword",
      "valid": false,
      "rust_error": "\"fifty\" is not of types \"integer\", \"null\"",
      "python_error": "'fifty' is not of type 'integer', 'null'\n\nFailed validating 'type' in schema['properties']['assuredConcurrencyShares']:\n    {'description': '`assuredConcurrencyShares` (ACS) configures the '\n                    'execution limit, which is a limit on the number of '\n                    'requests of this priority level that may be exeucting '\n                    'at a given time.  ACS must be a positive number. The '\n                    \"server's concurrency limit (SCL) is divided among the \"\n                    'concurrency-controlled priority levels in proportion '\n                    'to their assured concurrency shares. This produces '\n                    'the assured concurrency value (ACV) --- the number of '\n                    'requests that may be executing at a time --- for each '\n                    'such priority level:\\n'\n                    '\\n'\n                    '            ACV(l) = ceil( SCL * ACS(l) / ( '\n                    'sum[priority levels k] ACS(k) ) )\\n'\n                    '\\n'\n     .. (310 more)",
      "data": {
        "assuredConcurrencyShares": "fifty",
        "limitResponse": {
          "type": "Queue",
          "queuingConfiguration": {
            "handSize": 8,
            "queueLengthLimit": 100,
            "queues": 64
          }
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "assuredConcurrencyShares": 100,
        "limitResponse": {
          "queuing": {
            "handSize": 8,
            "queueLengthLimit": 50,
            "queues": 64
          },
          "type": "Queue"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"100\" is not of types \"integer\", \"null\"",
      "python_error": "'100' is not of type 'integer', 'null'\n\nFailed validating 'type' in schema['properties']['assuredConcurrencyShares']:\n    {'description': '`assuredConcurrencyShares` (ACS) configures the '\n                    'execution limit, which is a limit on the number of '\n                    'requests of this priority level that may be exeucting '\n                    'at a given time.  ACS must be a positive number. The '\n                    \"server's concurrency limit (SCL) is divided among the \"\n                    'concurrency-controlled priority levels in proportion '\n                    'to their assured concurrency shares. This produces '\n                    'the assured concurrency value (ACV) --- the number of '\n                    'requests that may be executing at a time --- for each '\n                    'such priority level:\\n'\n                    '\\n'\n                    '            ACV(l) = ceil( SCL * ACS(l) / ( '\n                    'sum[priority levels k] ACS(k) ) )\\n'\n                    '\\n'\n       .. (306 more)",
      "data": {
        "assuredConcurrencyShares": "100",
        "limitResponse": {
          "queuing": {
            "handSize": 8,
            "queueLengthLimit": 50,
            "queues": 64
          },
          "type": "Queue"
        }
      }
    }
  ]
}