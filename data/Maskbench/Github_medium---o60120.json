{
  "description": "sample Github_medium/o60120.json",
  "meta": {
    "full_size": 549,
    "stripped_size": 444,
    "features": [
      "items"
    ],
    "raw_features": [
      "$schema",
      "properties",
      "required",
      "type",
      "type:array",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "A document returned by GET /{db}/_design/{ddoc}",
    "properties": {
      "_id": {
        "type": "string"
      },
      "_rev": {
        "type": "string"
      },
      "language": {
        "type": "string"
      },
      "options": {
        "type": "object"
      },
      "filters": {
        "type": "object"
      },
      "lists": {
        "type": "object"
      },
      "rewrites": {
        "items": {
          "type": "object"
        },
        "type": "array"
      },
      "shows": {
        "type": "object"
      },
      "updates": {
        "type": "object"
      },
      "validate_doc_update": {
        "type": "string"
      },
      "views": {
        "type": "object"
      }
    },
    "required": [
      "_id",
      "_rev"
    ],
    "title": "CouchDB GET of design document",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "_id": "_design/example",
        "_rev": "1-1234567890abcdef",
        "language": "javascript",
        "options": {
          "partitioned": true
        },
        "filters": {
          "by_user": "function(doc, req) { if (doc.type === 'user') { return true; } return false; }"
        },
        "lists": {
          "by_name": "function(head, req) { var row; while (row = getRow()) { send(row.value.name); } }"
        },
        "rewrites": [
          {
            "from": "/users",
            "to": "_view/users"
          },
          {
            "from": "/users/:id",
            "to": "_view/users/:id"
          }
        ],
        "shows": {
          "user": "function(doc, req) { return { body: 'Hello, ' + doc.name + '!' }; }"
        },
        "updates": {
          "add_user": "function(doc, req) { if (!doc) { return [{ _id: req.uuid }, req.body]; } return [doc, req.body]; }"
        },
        "validate_doc_update": "function(newDoc, oldDoc, userCtx, secObj) { if (newDoc.type !== 'user') { throw { forbidden: 'Only users allowed' }; } }",
        "views": {
          "users": {
            "map": "function(doc) { if (doc.type === 'user') { emit(doc.name, doc); } }"
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"object\"",
      "python_error": "123 is not of type 'object'\n\nFailed validating 'type' in schema['properties']['rewrites']['items']:\n    {'type': 'object'}\n\nOn instance['rewrites'][2]:\n    123",
      "data": {
        "_id": "_design/example",
        "_rev": "1-1234567890abcdef",
        "language": "javascript",
        "options": {
          "partitioned": true
        },
        "filters": {
          "by_user": "function(doc, req) { if (doc.type === 'user') { return true; } return false; }"
        },
        "lists": {
          "by_name": "function(head, req) { var row; while (row = getRow()) { send(row.value.name); } }"
        },
        "rewrites": [
          {
            "from": "/users",
            "to": "_view/users"
          },
          {
            "from": "/users/:id",
            "to": "_view/users/:id"
          },
          123
        ],
        "shows": {
          "user": "function(doc, req) { return { body: 'Hello, ' + doc.name + '!' }; }"
        },
        "updates": {
          "add_user": "function(doc, req) { if (!doc) { return [{ _id: req.uuid }, req.body]; } return [doc, req.body]; }"
        },
        "validate_doc_update": "function(newDoc, oldDoc, userCtx, secObj) { if (newDoc.type !== 'user') { throw { forbidden: 'Only users allowed' }; } }",
        "views": {
          "users": {
            "map": "function(doc) { if (doc.type === 'user') { emit(doc.name, doc); } }"
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "1234567890 is not of type \"string\"",
      "python_error": "1234567890 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['_rev']:\n    {'type': 'string'}\n\nOn instance['_rev']:\n    1234567890",
      "data": {
        "_id": "_design/example",
        "_rev": 1234567890,
        "language": "javascript",
        "options": {
          "partitioned": true
        },
        "filters": {
          "by_user": "function(doc, req) { if (doc.type === 'user') { return true; } return false; }"
        },
        "lists": {
          "by_name": "function(head, req) { var row; while (row = getRow()) { send(row.value.name); } }"
        },
        "rewrites": [
          {
            "from": "/users",
            "to": "_view/users"
          },
          {
            "from": "/users/:id",
            "to": "_view/users/:id"
          }
        ],
        "shows": {
          "user": "function(doc, req) { return { body: 'Hello, ' + doc.name + '!' }; }"
        },
        "updates": {
          "add_user": "function(doc, req) { if (!doc) { return [{ _id: req.uuid }, req.body]; } return [doc, req.body]; }"
        },
        "validate_doc_update": "function(newDoc, oldDoc, userCtx, secObj) { if (newDoc.type !== 'user') { throw { forbidden: 'Only users allowed' }; } }",
        "views": {
          "users": {
            "map": "function(doc) { if (doc.type === 'user') { emit(doc.name, doc); } }"
          }
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "_id": "_design/example",
        "_rev": "1-1234567890abcdef",
        "language": "javascript",
        "options": {
          "partitioned": true
        },
        "filters": {
          "my_filter": "function(doc, req) { return true; }"
        },
        "lists": {
          "my_list": "function(head, req) { ... }"
        },
        "rewrites": [
          {
            "from": "/my-rewrite",
            "to": "/my-view"
          }
        ],
        "shows": {
          "my_show": "function(doc, req) { ... }"
        },
        "updates": {
          "my_update": "function(doc, req) { ... }"
        },
        "validate_doc_update": "function(newDoc, oldDoc, userCtx, secObj) { ... }",
        "views": {
          "my_view": {
            "map": "function(doc) { emit(doc._id, doc); }"
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "12345 is not of type \"string\"",
      "python_error": "12345 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['_id']:\n    {'type': 'string'}\n\nOn instance['_id']:\n    12345",
      "data": {
        "_id": 12345,
        "_rev": "1-1234567890abcdef",
        "language": "javascript",
        "options": {
          "partitioned": true
        },
        "filters": {
          "my_filter": "function(doc, req) { return true; }"
        },
        "lists": {
          "my_list": "function(head, req) { ... }"
        },
        "rewrites": [
          {
            "from": "/my-rewrite",
            "to": "/my-view"
          }
        ],
        "shows": {
          "my_show": "function(doc, req) { ... }"
        },
        "updates": {
          "my_update": "function(doc, req) { ... }"
        },
        "validate_doc_update": "function(newDoc, oldDoc, userCtx, secObj) { ... }",
        "views": {
          "my_view": {
            "map": "function(doc) { emit(doc._id, doc); }"
          }
        }
      }
    }
  ]
}