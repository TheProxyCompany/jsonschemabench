{
  "description": "sample Github_hard/o40394.json",
  "meta": {
    "full_size": 4017,
    "stripped_size": 3459,
    "features": [
      "$ref",
      "@minmaxItems",
      "@minmaxLength",
      "additionalProperties",
      "enum",
      "items"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "id",
      "minItems",
      "minLength",
      "properties",
      "required",
      "type",
      "type:array",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "additionalProperties": true,
    "definitions": {
      "condition": {
        "type": "object",
        "properties": {
          "dependency": {
            "type": "array",
            "description": "",
            "additionalProperties": false,
            "items": {
              "type": "string",
              "additionalProperties": false
            }
          },
          "simple": {
            "type": "array",
            "description": "",
            "additionalProperties": false,
            "items": {
              "type": "string",
              "additionalProperties": false
            }
          },
          "environnement": {
            "type": "array",
            "additionalProperties": false,
            "description": "",
            "items": {
              "type": "string",
              "additionalProperties": false
            }
          }
        }
      },
      "response": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "additionalProperties": false
          },
          "default": {
            "type": "string",
            "additionalProperties": false
          },
          "predefined": {
            "type": "array",
            "additionalProperties": false,
            "items": {
              "id": "http://jsonschema.net/questions/0#",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "response": {
                  "type": "string",
                  "additionalProperties": false,
                  "description": "The question type",
                  "minLength": 1
                },
                "text": {
                  "type": "string",
                  "additionalProperties": false,
                  "minLength": 1
                }
              }
            }
          }
        }
      }
    },
    "properties": {
      "name": {
        "type": "string",
        "additionalProperties": false,
        "description": "The name of the generator",
        "minLength": 1
      },
      "definition": {
        "type": "string",
        "additionalProperties": false,
        "description": "The description of the generator",
        "minLength": 1
      },
      "metadataTypeAccepted": {
        "type": "array",
        "additionalProperties": false,
        "description": "The list of the metadataType allowed in this generator",
        "minItems": 1,
        "items": {
          "type": "string",
          "additionalProperties": false,
          "minLength": 1
        }
      },
      "dependencies": {
        "type": "array",
        "additionalProperties": false,
        "description": "The list of the metadataType allowed in this generator",
        "items": {
          "id": "http://jsonschema.net/metadataTypeAccepted/0#",
          "type": "string",
          "additionalProperties": false,
          "minLength": 1
        }
      },
      "questions": {
        "type": "array",
        "additionalProperties": false,
        "items": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "dtoAttribute"
          ],
          "properties": {
            "dtoAttribute": {
              "type": "string",
              "additionalProperties": false,
              "minLength": 1
            },
            "type": {
              "type": "string",
              "additionalProperties": false,
              "description": "The question type",
              "enum": [
                "simple",
                "complex",
                "directory",
                "askCollection",
                "askCollectionOverIterator"
              ],
              "default": "simple"
            },
            "text": {
              "type": "string",
              "description": "",
              "additionalProperties": false,
              "minLength": 1
            },
            "factory": {
              "type": "string",
              "description": "",
              "additionalProperties": false,
              "minLength": 1
            },
            "response": {
              "$ref": "#/definitions/response"
            },
            "condition": {
              "$ref": "#/definitions/condition"
            },
            "iteration": {
              "type": "object",
              "required": [
                "text",
                "iterator",
                "retrieveBy"
              ],
              "properties": {
                "iterator": {
                  "type": "string",
                  "description": "",
                  "additionalProperties": false
                },
                "retrieveBy": {
                  "type": "string",
                  "description": "",
                  "additionalProperties": false
                },
                "text": {
                  "type": "string",
                  "description": "",
                  "additionalProperties": false
                },
                "condition": {
                  "$ref": "#/definitions/condition"
                }
              }
            }
          }
        },
        "required": [
          "0"
        ]
      },
      "directories": {
        "type": "array",
        "additionalProperties": false,
        "items": {
          "type": "string",
          "description": "",
          "additionalProperties": false
        },
        "required": [
          "0"
        ]
      },
      "templateVariables": {
        "type": "array",
        "additionalProperties": false,
        "items": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "variableName": {
              "type": "string",
              "description": "",
              "additionalProperties": false,
              "minLength": 1
            },
            "value": {
              "type": "string",
              "description": "",
              "additionalProperties": false,
              "minLength": 1
            },
            "condition": {
              "$ref": "#/definitions/condition"
            }
          },
          "required": [
            "variableName",
            "value"
          ]
        },
        "required": [
          "0"
        ]
      },
      "filesList": {
        "type": "array",
        "additionalProperties": false,
        "minItems": 1,
        "items": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "templatePath": {
              "type": "string",
              "description": "",
              "additionalProperties": false,
              "minLength": 1
            },
            "destinationPath": {
              "type": "string",
              "description": "",
              "additionalProperties": false,
              "minLength": 1
            },
            "description": {
              "type": "string",
              "description": "",
              "additionalProperties": false
            },
            "condition": {
              "$ref": "#/definitions/condition"
            }
          },
          "required": [
            "templatePath",
            "destinationPath"
          ]
        }
      }
    },
    "required": [
      "name",
      "definition",
      "metadataTypeAccepted",
      "questions",
      "directories",
      "templateVariables",
      "filesList"
    ]
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "name": "Example Generator",
        "definition": "This is an example generator",
        "metadataTypeAccepted": [
          "type1",
          "type2"
        ],
        "dependencies": [
          "dependency1",
          "dependency2"
        ],
        "questions": [
          {
            "dtoAttribute": "attribute1",
            "type": "simple",
            "text": "What is your name?",
            "factory": "factory1",
            "response": {
              "type": "string",
              "default": "John Doe",
              "predefined": [
                {
                  "response": "John",
                  "text": "John"
                },
                {
                  "response": "Doe",
                  "text": "Doe"
                }
              ]
            },
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "dtoAttribute": "attribute2",
            "type": "complex",
            "text": "What is your address?",
            "factory": "factory2",
            "response": {
              "type": "object",
              "default": "{}",
              "predefined": []
            },
            "iteration": {
              "iterator": "iterator1",
              "retrieveBy": "retrieveBy1",
              "text": "What is your street?",
              "condition": {
                "dependency": [
                  "dependency2"
                ],
                "simple": [
                  "simple2"
                ],
                "environnement": [
                  "env2"
                ]
              }
            }
          }
        ],
        "directories": [
          "directory1",
          "directory2"
        ],
        "templateVariables": [
          {
            "variableName": "variable1",
            "value": "value1",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "variableName": "variable2",
            "value": "value2",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ],
        "filesList": [
          {
            "templatePath": "template1",
            "destinationPath": "destination1",
            "description": "This is a file",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "templatePath": "template2",
            "destinationPath": "destination2",
            "description": "This is another file",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['name']:\n    {'type': 'string',\n     'additionalProperties': False,\n     'description': 'The name of the generator',\n     'minLength': 1}\n\nOn instance['name']:\n    ''",
      "data": {
        "name": "",
        "definition": "This is an example generator",
        "metadataTypeAccepted": [
          "",
          "type2"
        ],
        "dependencies": [
          "",
          "dependency2"
        ],
        "questions": [
          {
            "dtoAttribute": "",
            "type": "simple",
            "text": "",
            "factory": "",
            "response": {
              "type": "string",
              "default": "",
              "predefined": [
                {
                  "response": "",
                  "text": ""
                },
                {
                  "response": "Doe",
                  "text": "Doe"
                }
              ]
            },
            "condition": {
              "dependency": [
                ""
              ],
              "simple": [
                ""
              ],
              "environnement": [
                ""
              ]
            }
          },
          {
            "dtoAttribute": "attribute2",
            "type": "complex",
            "text": "What is your address?",
            "factory": "factory2",
            "response": {
              "type": "object",
              "default": "{}",
              "predefined": []
            },
            "iteration": {
              "iterator": "iterator1",
              "retrieveBy": "retrieveBy1",
              "text": "What is your street?",
              "condition": {
                "dependency": [
                  ""
                ],
                "simple": [
                  ""
                ],
                "environnement": [
                  ""
                ]
              }
            }
          }
        ],
        "directories": [
          "",
          "directory2"
        ],
        "templateVariables": [
          {
            "variableName": "",
            "value": "",
            "condition": {
              "dependency": [
                ""
              ],
              "simple": [
                ""
              ],
              "environnement": [
                ""
              ]
            }
          },
          {
            "variableName": "variable2",
            "value": "",
            "condition": {
              "dependency": [
                ""
              ],
              "simple": [
                ""
              ],
              "environnement": [
                ""
              ]
            }
          }
        ],
        "filesList": [
          {
            "templatePath": "",
            "destinationPath": "",
            "description": "",
            "condition": {
              "dependency": [
                ""
              ],
              "simple": [
                ""
              ],
              "environnement": [
                ""
              ]
            }
          },
          {
            "templatePath": "template2",
            "destinationPath": "",
            "description": "",
            "condition": {
              "dependency": [
                ""
              ],
              "simple": [
                ""
              ],
              "environnement": [
                ""
              ]
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minItems keyword",
      "valid": false,
      "rust_error": "[] has less than 1 item",
      "python_error": "[] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['metadataTypeAccepted']:\n    {'type': 'array',\n     'additionalProperties': False,\n     'description': 'The list of the metadataType allowed in this '\n                    'generator',\n     'minItems': 1,\n     'items': {'type': 'string',\n               'additionalProperties': False,\n               'minLength': 1}}\n\nOn instance['metadataTypeAccepted']:\n    []",
      "data": {
        "name": "Example Generator",
        "definition": "This is an example generator",
        "metadataTypeAccepted": [],
        "dependencies": [
          "dependency1",
          "dependency2"
        ],
        "questions": [
          {
            "dtoAttribute": "attribute1",
            "type": "simple",
            "text": "What is your name?",
            "factory": "factory1",
            "response": {
              "type": "string",
              "default": "John Doe",
              "predefined": [
                {
                  "response": "John",
                  "text": "John"
                },
                {
                  "response": "Doe",
                  "text": "Doe"
                }
              ]
            },
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "dtoAttribute": "attribute2",
            "type": "complex",
            "text": "What is your address?",
            "factory": "factory2",
            "response": {
              "type": "object",
              "default": "{}",
              "predefined": []
            },
            "iteration": {
              "iterator": "iterator1",
              "retrieveBy": "retrieveBy1",
              "text": "What is your street?",
              "condition": {
                "dependency": [
                  "dependency2"
                ],
                "simple": [
                  "simple2"
                ],
                "environnement": [
                  "env2"
                ]
              }
            }
          }
        ],
        "directories": [
          "directory1",
          "directory2"
        ],
        "templateVariables": [
          {
            "variableName": "variable1",
            "value": "value1",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "variableName": "variable2",
            "value": "value2",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ],
        "filesList": []
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['name']:\n    {'type': 'string',\n     'additionalProperties': False,\n     'description': 'The name of the generator',\n     'minLength': 1}\n\nOn instance['name']:\n    ''",
      "data": {
        "name": "",
        "definition": "This is an example generator",
        "metadataTypeAccepted": [
          "type1",
          "type2"
        ],
        "dependencies": [
          "dependency1",
          "dependency2"
        ],
        "questions": [
          {
            "dtoAttribute": "attribute1",
            "type": "simple",
            "text": "What is your name?",
            "factory": "factory1",
            "response": {
              "type": "string",
              "default": "John Doe",
              "predefined": [
                {
                  "response": "John",
                  "text": "John"
                },
                {
                  "response": "Doe",
                  "text": "Doe"
                }
              ]
            },
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "dtoAttribute": "attribute2",
            "type": "complex",
            "text": "What is your address?",
            "factory": "factory2",
            "response": {
              "type": "object",
              "default": "{}",
              "predefined": []
            },
            "iteration": {
              "iterator": "iterator1",
              "retrieveBy": "retrieveBy1",
              "text": "What is your street?",
              "condition": {
                "dependency": [
                  "dependency2"
                ],
                "simple": [
                  "simple2"
                ],
                "environnement": [
                  "env2"
                ]
              }
            }
          }
        ],
        "directories": [
          "directory1",
          "directory2"
        ],
        "templateVariables": [
          {
            "variableName": "variable1",
            "value": "value1",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "variableName": "variable2",
            "value": "value2",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ],
        "filesList": [
          {
            "templatePath": "template1",
            "destinationPath": "destination1",
            "description": "This is a file",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "templatePath": "template2",
            "destinationPath": "destination2",
            "description": "This is another file",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['questions']['items']['properties']['response']['properties']['predefined']['items']['properties']['response']:\n    {'type': 'string',\n     'additionalProperties': False,\n     'description': 'The question type',\n     'minLength': 1}\n\nOn instance['questions'][0]['response']['predefined'][0]['response']:\n    ''",
      "data": {
        "name": "Example Generator",
        "definition": "This is an example generator",
        "metadataTypeAccepted": [
          "type1",
          "type2"
        ],
        "dependencies": [
          "dependency1",
          "dependency2"
        ],
        "questions": [
          {
            "dtoAttribute": "attribute1",
            "type": "simple",
            "text": "What is your name?",
            "factory": "factory1",
            "response": {
              "type": "string",
              "default": "John Doe",
              "predefined": [
                {
                  "response": "",
                  "text": "John"
                },
                {
                  "response": "Doe",
                  "text": "Doe"
                }
              ]
            },
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "dtoAttribute": "attribute2",
            "type": "complex",
            "text": "What is your address?",
            "factory": "factory2",
            "response": {
              "type": "object",
              "default": "{}",
              "predefined": []
            },
            "iteration": {
              "iterator": "iterator1",
              "retrieveBy": "retrieveBy1",
              "text": "What is your street?",
              "condition": {
                "dependency": [
                  "dependency2"
                ],
                "simple": [
                  "simple2"
                ],
                "environnement": [
                  "env2"
                ]
              }
            }
          }
        ],
        "directories": [
          "directory1",
          "directory2"
        ],
        "templateVariables": [
          {
            "variableName": "variable1",
            "value": "value1",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "variableName": "variable2",
            "value": "value2",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ],
        "filesList": [
          {
            "templatePath": "template1",
            "destinationPath": "destination1",
            "description": "This is a file",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "templatePath": "template2",
            "destinationPath": "destination2",
            "description": "This is another file",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['name']:\n    {'type': 'string',\n     'additionalProperties': False,\n     'description': 'The name of the generator',\n     'minLength': 1}\n\nOn instance['name']:\n    ''",
      "data": {
        "name": "",
        "definition": "This is an example generator",
        "metadataTypeAccepted": [
          "",
          "type2"
        ],
        "dependencies": [
          "dependency1",
          "dependency2"
        ],
        "questions": [
          {
            "dtoAttribute": "",
            "type": "simple",
            "text": "What is your name?",
            "factory": "factory1",
            "response": {
              "type": "string",
              "default": "John Doe",
              "predefined": [
                {
                  "response": "",
                  "text": "John"
                },
                {
                  "response": "Doe",
                  "text": "Doe"
                }
              ]
            },
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "dtoAttribute": "attribute2",
            "type": "complex",
            "text": "What is your address?",
            "factory": "factory2",
            "response": {
              "type": "object",
              "default": "{}",
              "predefined": []
            },
            "iteration": {
              "iterator": "iterator1",
              "retrieveBy": "retrieveBy1",
              "text": "What is your street?",
              "condition": {
                "dependency": [
                  "dependency2"
                ],
                "simple": [
                  "simple2"
                ],
                "environnement": [
                  "env2"
                ]
              }
            }
          }
        ],
        "directories": [
          "directory1",
          "directory2"
        ],
        "templateVariables": [
          {
            "variableName": "",
            "value": "value1",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "variableName": "variable2",
            "value": "value2",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ],
        "filesList": [
          {
            "templatePath": "",
            "destinationPath": "destination1",
            "description": "This is a file",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "templatePath": "template2",
            "destinationPath": "destination2",
            "description": "This is another file",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minItems keyword",
      "valid": false,
      "rust_error": "[] has less than 1 item",
      "python_error": "[] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['filesList']:\n    {'type': 'array',\n     'additionalProperties': False,\n     'minItems': 1,\n     'items': {'type': 'object',\n               'additionalProperties': False,\n               'properties': {'templatePath': {'type': 'string',\n                                               'description': '',\n                                               'additionalProperties': False,\n                                               'minLength': 1},\n                              'destinationPath': {'type': 'string',\n                                                  'description': '',\n                                                  'additionalProperties': False,\n                                                  'minLength': 1},\n                              'description': {'type': 'string',\n                                              'description': '',\n                                              'additionalProperties': False},\n           .. (168 more)",
      "data": {
        "name": "Example Generator",
        "definition": "This is an example generator",
        "metadataTypeAccepted": [
          "type1",
          "type2"
        ],
        "dependencies": [
          "dependency1",
          "dependency2"
        ],
        "questions": [
          {
            "dtoAttribute": "attribute1",
            "type": "simple",
            "text": "What is your name?",
            "factory": "factory1",
            "response": {
              "type": "string",
              "default": "John Doe",
              "predefined": [
                {
                  "response": "John",
                  "text": "John"
                },
                {
                  "response": "Doe",
                  "text": "Doe"
                }
              ]
            },
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "dtoAttribute": "attribute2",
            "type": "complex",
            "text": "What is your address?",
            "factory": "factory2",
            "response": {
              "type": "object",
              "default": "{}",
              "predefined": []
            },
            "iteration": {
              "iterator": "iterator1",
              "retrieveBy": "retrieveBy1",
              "text": "What is your street?",
              "condition": {
                "dependency": [
                  "dependency2"
                ],
                "simple": [
                  "simple2"
                ],
                "environnement": [
                  "env2"
                ]
              }
            }
          }
        ],
        "directories": [
          "directory1",
          "directory2"
        ],
        "templateVariables": [
          {
            "variableName": "variable1",
            "value": "value1",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "variableName": "variable2",
            "value": "value2",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ],
        "filesList": []
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['questions']['items']['properties']['text']:\n    {'type': 'string',\n     'description': '',\n     'additionalProperties': False,\n     'minLength': 1}\n\nOn instance['questions'][0]['text']:\n    ''",
      "data": {
        "name": "Example Generator",
        "definition": "This is an example generator",
        "metadataTypeAccepted": [
          "type1",
          "type2"
        ],
        "dependencies": [
          "dependency1",
          "dependency2"
        ],
        "questions": [
          {
            "dtoAttribute": "attribute1",
            "type": "simple",
            "text": "",
            "factory": "factory1",
            "response": {
              "type": "string",
              "default": "John Doe",
              "predefined": [
                {
                  "response": "John",
                  "text": "John"
                },
                {
                  "response": "Doe",
                  "text": "Doe"
                }
              ]
            },
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "dtoAttribute": "attribute2",
            "type": "complex",
            "text": "What is your address?",
            "factory": "factory2",
            "response": {
              "type": "object",
              "default": "{}",
              "predefined": []
            },
            "iteration": {
              "iterator": "iterator1",
              "retrieveBy": "retrieveBy1",
              "text": "What is your street?",
              "condition": {
                "dependency": [
                  "dependency2"
                ],
                "simple": [
                  "simple2"
                ],
                "environnement": [
                  "env2"
                ]
              }
            }
          }
        ],
        "directories": [
          "directory1",
          "directory2"
        ],
        "templateVariables": [
          {
            "variableName": "variable1",
            "value": "value1",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "variableName": "variable2",
            "value": "value2",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ],
        "filesList": [
          {
            "templatePath": "template1",
            "destinationPath": "destination1",
            "description": "This is a file",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "templatePath": "template2",
            "destinationPath": "destination2",
            "description": "This is another file",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "name": "Example Generator",
        "definition": "This is an example generator",
        "metadataTypeAccepted": [
          "type1",
          "type2"
        ],
        "dependencies": [
          "dependency1",
          "dependency2"
        ],
        "questions": [
          {
            "dtoAttribute": "attribute1",
            "type": "simple",
            "text": "What is your name?",
            "factory": "factory1",
            "response": {
              "type": "string",
              "default": "John Doe",
              "predefined": [
                {
                  "response": "John",
                  "text": "John"
                },
                {
                  "response": "Doe",
                  "text": "Doe"
                }
              ]
            },
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "dtoAttribute": "attribute2",
            "type": "complex",
            "text": "What is your address?",
            "factory": "factory2",
            "response": {
              "type": "object",
              "default": "{}",
              "predefined": []
            },
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            },
            "iteration": {
              "iterator": "iterator1",
              "retrieveBy": "retrieveBy1",
              "text": "What is your address?",
              "condition": {
                "dependency": [
                  "dependency1"
                ],
                "simple": [
                  "simple1"
                ],
                "environnement": [
                  "env1"
                ]
              }
            }
          }
        ],
        "directories": [
          "directory1",
          "directory2"
        ],
        "templateVariables": [
          {
            "variableName": "variable1",
            "value": "value1",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "variableName": "variable2",
            "value": "value2",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ],
        "filesList": [
          {
            "templatePath": "template1",
            "destinationPath": "destination1",
            "description": "This is a file",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "templatePath": "template2",
            "destinationPath": "destination2",
            "description": "This is another file",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['name']:\n    {'type': 'string',\n     'additionalProperties': False,\n     'description': 'The name of the generator',\n     'minLength': 1}\n\nOn instance['name']:\n    ''",
      "data": {
        "name": "",
        "definition": "This is an example generator",
        "metadataTypeAccepted": [
          "type1",
          "type2"
        ],
        "dependencies": [
          "dependency1",
          "dependency2"
        ],
        "questions": [
          {
            "dtoAttribute": "attribute1",
            "type": "simple",
            "text": "",
            "factory": "factory1",
            "response": {
              "type": "string",
              "default": "John Doe",
              "predefined": [
                {
                  "response": "John",
                  "text": ""
                },
                {
                  "response": "Doe",
                  "text": "Doe"
                }
              ]
            },
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "dtoAttribute": "attribute2",
            "type": "complex",
            "text": "What is your address?",
            "factory": "factory2",
            "response": {
              "type": "object",
              "default": "{}",
              "predefined": []
            },
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            },
            "iteration": {
              "iterator": "iterator1",
              "retrieveBy": "retrieveBy1",
              "text": "What is your address?",
              "condition": {
                "dependency": [
                  "dependency1"
                ],
                "simple": [
                  "simple1"
                ],
                "environnement": [
                  "env1"
                ]
              }
            }
          }
        ],
        "directories": [
          "directory1",
          "directory2"
        ],
        "templateVariables": [
          {
            "variableName": "variable1",
            "value": "value1",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "variableName": "variable2",
            "value": "value2",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ],
        "filesList": [
          {
            "templatePath": "template1",
            "destinationPath": "destination1",
            "description": "",
            "condition": {
              "dependency": [
                "dependency1"
              ],
              "simple": [
                "simple1"
              ],
              "environnement": [
                "env1"
              ]
            }
          },
          {
            "templatePath": "template2",
            "destinationPath": "destination2",
            "description": "This is another file",
            "condition": {
              "dependency": [
                "dependency2"
              ],
              "simple": [
                "simple2"
              ],
              "environnement": [
                "env2"
              ]
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['name']:\n    {'type': 'string',\n     'additionalProperties': False,\n     'description': 'The name of the generator',\n     'minLength': 1}\n\nOn instance['name']:\n    ''",
      "data": {
        "name": "",
        "definition": "This is an example generator",
        "metadataTypeAccepted": [],
        "dependencies": [
          "dependency1",
          "dependency2"
        ],
        "questions": [
          {
            "dtoAttribute": "",
            "type": "simple",
            "text": "",
            "factory": "",
            "response": {
              "type": "",
              "default": "",
              "predefined": [
                {
                  "response": "",
                  "text": ""
                }
              ]
            },
            "condition": {
              "dependency": [],
              "simple": [],
              "environnement": []
            }
          }
        ],
        "directories": [],
        "templateVariables": [
          {
            "variableName": "",
            "value": "",
            "condition": {
              "dependency": [],
              "simple": [],
              "environnement": []
            }
          }
        ],
        "filesList": [
          {
            "templatePath": "",
            "destinationPath": "",
            "description": "",
            "condition": {
              "dependency": [],
              "simple": [],
              "environnement": []
            }
          }
        ]
      }
    }
  ]
}