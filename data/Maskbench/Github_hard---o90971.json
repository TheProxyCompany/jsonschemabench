{
  "description": "sample Github_hard/o90971.json",
  "meta": {
    "full_size": 17534,
    "stripped_size": 8820,
    "features": [
      "$ref",
      "@minmaxItems",
      "@siblingKeys",
      "additionalProperties",
      "additionalProperties:object",
      "allOf",
      "const",
      "enum",
      "format",
      "format:uri-reference",
      "if",
      "items",
      "not",
      "oneOf",
      "pattern",
      "patternProperties",
      "then"
    ],
    "raw_features": [
      "$id",
      "$schema",
      "_boolSchema",
      "allOf:trivial",
      "definitions",
      "minItems",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://json.schemastore.org/prometheus",
    "title": "Prometheus",
    "description": "Prometheus configuration file",
    "type": [
      "object",
      "null"
    ],
    "properties": {
      "global": {
        "description": "The global configuration specifies parameters that are valid in all other configuration contexts. They also serve as defaults for other configuration sections.",
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "scrape_interval": {
            "description": "How frequently to scrape targets by default.",
            "$ref": "#/definitions/duration",
            "default": "1m"
          },
          "scrape_timeout": {
            "description": "How long until a scrape request times out.",
            "$ref": "#/definitions/duration",
            "default": "10s"
          },
          "evaluation_interval": {
            "description": "How frequently to evaluate rules.",
            "$ref": "#/definitions/duration",
            "default": "1m"
          },
          "external_labels": {
            "description": "The labels to add to any time series or alerts when communicating with external systems (federation, remote storage, Alertmanager).",
            "$ref": "#/definitions/labels"
          }
        },
        "additionalProperties": false
      },
      "rule_files": {
        "description": "Rule files specifies a list of globs. Rules and alerts are read from all matching files.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "$ref": "#/definitions/filepath_glob"
        }
      },
      "remote_write": {
        "description": "Settings related to the remote write feature.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "object",
          "properties": {
            "url": {
              "description": "The URL of the endpoint to send samples to.",
              "type": "string",
              "format": "uri-reference"
            },
            "remote_timeout": {
              "description": "Timeout for requests to the remote write endpoint.",
              "$ref": "#/definitions/duration",
              "default": "30s"
            },
            "write_relabel_configs": {
              "description": "List of remote write relabel configurations.",
              "$ref": "#/definitions/relabel_configs"
            },
            "basic_auth": {
              "$ref": "#/definitions/basic_auth"
            },
            "bearer_token": {
              "$ref": "#/definitions/bearer_token"
            },
            "bearer_token_file": {
              "$ref": "#/definitions/bearer_token_file"
            },
            "tls_config": {
              "description": "Configures the remote write request's TLS settings.",
              "$ref": "#/definitions/tls_config"
            },
            "proxy_url": {
              "description": "Optional proxy URL.",
              "type": [
                "string",
                "null"
              ],
              "format": "uri-reference"
            },
            "queue_config": {
              "description": "Configures the queue used to write to remote storage.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "capacity": {
                  "description": "Number of samples to buffer per shard before we block reading of more samples from the WAL. It is recommended to have enough capacity in each shard to buffer several requests to keep throughput up while processing occasional slow remote requests.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "default": 500
                },
                "max_shards": {
                  "description": "Maximum number of shards, i.e. amount of concurrency.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "default": 1000
                },
                "min_shards": {
                  "description": "Minimum number of shards, i.e. amount of concurrency.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "default": 1
                },
                "max_samples_per_send": {
                  "description": "Maximum number of samples per send.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "default": 100
                },
                "batch_send_deadline": {
                  "description": "Maximum time a sample will wait in buffer.",
                  "$ref": "#/definitions/duration",
                  "default": "5s"
                },
                "min_backoff": {
                  "description": "Initial retry delay. Gets doubled for every retry.",
                  "$ref": "#/definitions/duration",
                  "default": "30ms"
                },
                "max_backoff": {
                  "description": "Maximum retry delay.",
                  "$ref": "#/definitions/duration",
                  "default": "100ms"
                }
              }
            }
          },
          "allOf": [
            {
              "$ref": "#/definitions/auth"
            }
          ],
          "additionalProperties": false,
          "required": [
            "url"
          ]
        }
      },
      "remote_read": {
        "description": "Settings related to the remote read feature.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "object",
          "properties": {
            "url": {
              "description": "The URL of the endpoint to query from.",
              "type": "string",
              "format": "uri-reference"
            },
            "required_matchers": {
              "description": "An optional list of equality matchers which have to be present in a selector to query the remote read endpoint.",
              "$ref": "#/definitions/labels"
            },
            "remote_timeout": {
              "description": "Timeout for requests to the remote read endpoint.",
              "$ref": "#/definitions/duration",
              "default": "1m"
            },
            "read_recent": {
              "description": "Whether reads should be made for queries for time ranges that the local storage should have complete data for.",
              "type": [
                "boolean",
                "null"
              ],
              "default": false
            },
            "basic_auth": {
              "$ref": "#/definitions/basic_auth"
            },
            "bearer_token": {
              "$ref": "#/definitions/bearer_token"
            },
            "bearer_token_file": {
              "$ref": "#/definitions/bearer_token_file"
            },
            "tls_config": {
              "$ref": "#/definitions/tls_config"
            },
            "proxy_url": {
              "description": "Optional proxy URL.",
              "type": [
                "string",
                "null"
              ],
              "format": "uri-reference"
            }
          },
          "allOf": [
            {
              "$ref": "#/definitions/auth"
            }
          ],
          "additionalProperties": false,
          "required": [
            "url"
          ]
        }
      },
      "scrape_configs": {
        "description": "A list of scrape configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "object",
          "properties": {
            "job_name": {
              "description": "The job name assigned to scraped metrics by default. Must be unique across all scrape configurations.",
              "type": "string"
            },
            "scrape_interval": {
              "description": "How frequently to scrape targets from this job. Defaults to `global.scrape_interval`.",
              "$ref": "#/definitions/duration"
            },
            "scrape_timeout": {
              "description": "Per-scrape timeout when scraping this job. Defaults to `global.scrape_timeout`.",
              "$ref": "#/definitions/duration"
            },
            "metrics_path": {
              "description": "The HTTP resource path on which to fetch metrics from targets.",
              "type": [
                "string",
                "null"
              ],
              "default": "/metrics"
            },
            "honor_labels": {
              "description": "Controls how Prometheus handles conflicts between labels that are already present in scraped data and labels that Prometheus would attach server-side (\"job\" and \"instance\" labels, manually configured target labels, and labels generated by service discovery implementations).",
              "type": [
                "boolean",
                "null"
              ],
              "default": false
            },
            "honor_timestamps": {
              "description": "Controls whether Prometheus respects the timestamps present in scraped data.",
              "type": [
                "boolean",
                "null"
              ],
              "default": true
            },
            "scheme": {
              "description": "Configures the protocol scheme used for requests.",
              "$ref": "#/definitions/scheme"
            },
            "params": {
              "description": "Optional HTTP(S) URL parameters.",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "type": "string"
              }
            },
            "basic_auth": {
              "$ref": "#/definitions/basic_auth"
            },
            "bearer_token": {
              "$ref": "#/definitions/bearer_token"
            },
            "bearer_token_file": {
              "$ref": "#/definitions/bearer_token_file"
            },
            "tls_config": {
              "description": "Configures the scrape request's TLS settings.",
              "$ref": "#/definitions/tls_config"
            },
            "proxy_url": {
              "description": "Optional proxy URL.",
              "type": [
                "string",
                "null"
              ],
              "format": "uri-reference"
            },
            "azure_sd_configs": {
              "$ref": "#/definitions/azure_sd_configs"
            },
            "consul_sd_configs": {
              "$ref": "#/definitions/consul_sd_configs"
            },
            "dns_sd_configs": {
              "$ref": "#/definitions/dns_sd_configs"
            },
            "ec2_sd_configs": {
              "$ref": "#/definitions/ec2_sd_configs"
            },
            "openstack_sd_configs": {
              "$ref": "#/definitions/openstack_sd_configs"
            },
            "file_sd_configs": {
              "$ref": "#/definitions/file_sd_configs"
            },
            "gce_sd_configs": {
              "$ref": "#/definitions/gce_sd_configs"
            },
            "kubernetes_sd_configs": {
              "$ref": "#/definitions/kubernetes_sd_configs"
            },
            "marathon_sd_configs": {
              "$ref": "#/definitions/marathon_sd_configs"
            },
            "nerve_sd_configs": {
              "$ref": "#/definitions/nerve_sd_configs"
            },
            "serverset_sd_configs": {
              "$ref": "#/definitions/serverset_sd_configs"
            },
            "triton_sd_configs": {
              "$ref": "#/definitions/triton_sd_configs"
            },
            "static_configs": {
              "$ref": "#/definitions/static_configs"
            },
            "relabel_configs": {
              "description": "List of target relabel configurations.",
              "$ref": "#/definitions/relabel_configs"
            },
            "metric_relabel_configs": {
              "description": "List of metric relabel configurations.",
              "$ref": "#/definitions/relabel_configs"
            },
            "sample_limit": {
              "description": "Per-scrape limit on number of scraped samples that will be accepted. If more than this number of samples are present after metric relabelling the entire scrape will be treated as failed. 0 means no limit.",
              "type": [
                "integer",
                "null"
              ],
              "default": 0
            }
          },
          "allOf": [
            {
              "$ref": "#/definitions/auth"
            }
          ],
          "additionalProperties": false,
          "required": [
            "job_name"
          ]
        }
      },
      "alerting": {
        "description": "Alerting specifies settings related to the Alertmanager.",
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "alert_relabel_configs": {
            "$ref": "#/definitions/relabel_configs"
          },
          "alertmanagers": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "object",
              "properties": {
                "timeout": {
                  "description": "Per-target Alertmanager timeout when pushing alerts.",
                  "$ref": "#/definitions/duration",
                  "default": "10s"
                },
                "api_version": {
                  "description": "The api version of Alertmanager.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "default": "v1"
                },
                "path_prefix": {
                  "description": "Prefix for the HTTP path alerts are pushed to.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "default": "/"
                },
                "scheme": {
                  "description": "Configures the protocol scheme used for requests.",
                  "$ref": "#/definitions/scheme"
                },
                "basic_auth": {
                  "$ref": "#/definitions/basic_auth"
                },
                "bearer_token": {
                  "$ref": "#/definitions/bearer_token"
                },
                "bearer_token_file": {
                  "$ref": "#/definitions/bearer_token_file"
                },
                "tls_config": {
                  "description": "Configures the scrape request's TLS settings.",
                  "$ref": "#/definitions/tls_config"
                },
                "proxy_url": {
                  "description": "Optional proxy URL.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "format": "uri-reference"
                },
                "azure_sd_configs": {
                  "$ref": "#/definitions/azure_sd_configs"
                },
                "consul_sd_configs": {
                  "$ref": "#/definitions/consul_sd_configs"
                },
                "dns_sd_configs": {
                  "$ref": "#/definitions/dns_sd_configs"
                },
                "ec2_sd_configs": {
                  "$ref": "#/definitions/ec2_sd_configs"
                },
                "file_sd_configs": {
                  "$ref": "#/definitions/file_sd_configs"
                },
                "gce_sd_configs": {
                  "$ref": "#/definitions/gce_sd_configs"
                },
                "kubernetes_sd_configs": {
                  "$ref": "#/definitions/kubernetes_sd_configs"
                },
                "marathon_sd_configs": {
                  "$ref": "#/definitions/marathon_sd_configs"
                },
                "nerve_sd_configs": {
                  "$ref": "#/definitions/nerve_sd_configs"
                },
                "serverset_sd_configs": {
                  "$ref": "#/definitions/serverset_sd_configs"
                },
                "triton_sd_configs": {
                  "$ref": "#/definitions/triton_sd_configs"
                },
                "static_configs": {
                  "$ref": "#/definitions/static_configs"
                },
                "relabel_configs": {
                  "description": "List of target relabel configurations.",
                  "$ref": "#/definitions/relabel_configs"
                }
              },
              "allOf": [
                {
                  "$ref": "#/definitions/auth"
                }
              ]
            }
          }
        }
      }
    },
    "additionalProperties": false,
    "definitions": {
      "duration": {
        "type": [
          "string",
          "null"
        ],
        "pattern": "^[0-9]+(ms|[smhdwy])$"
      },
      "label_name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
      },
      "label_value": {
        "type": "string"
      },
      "labels": {
        "type": [
          "object",
          "null"
        ],
        "patternProperties": {
          "^[a-zA-Z_][a-zA-Z0-9_]*$": {
            "$ref": "#/definitions/label_value"
          }
        },
        "additionalProperties": false
      },
      "filepath_glob": {
        "type": "string"
      },
      "filepath": {
        "type": [
          "string",
          "null"
        ],
        "format": "uri-reference"
      },
      "basic_auth": {
        "description": "Sets the `Authorization` header on every remote write request with the configured username and password. password and password_file are mutually exclusive.",
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": [
              "string",
              "null"
            ]
          },
          "password_file": {
            "$ref": "#/definitions/filepath"
          }
        },
        "oneOf": [
          {
            "required": [
              "password"
            ]
          },
          {
            "required": [
              "password_file"
            ]
          }
        ],
        "additionalProperties": false,
        "required": [
          "username"
        ]
      },
      "bearer_token": {
        "description": "Sets the `Authorization` header on every scrape request with the configured bearer token. It is mutually exclusive with `bearer_token_file`.",
        "type": [
          "string",
          "null"
        ]
      },
      "bearer_token_file": {
        "description": "Sets the `Authorization` header on every scrape request with the bearer token read from the configured file. It is mutually exclusive with `bearer_token`.",
        "$ref": "#/definitions/filepath"
      },
      "auth": {
        "allOf": [
          {
            "if": {
              "not": {
                "properties": {
                  "basic_auth": {
                    "const": null
                  }
                }
              }
            },
            "then": {
              "properties": {
                "bearer_token": {
                  "const": null
                },
                "bearer_token_file": {
                  "const": null
                }
              }
            }
          },
          {
            "if": {
              "not": {
                "properties": {
                  "bearer_token": {
                    "const": null
                  }
                }
              }
            },
            "then": {
              "properties": {
                "basic_auth": {
                  "const": null
                },
                "bearer_token_file": {
                  "const": null
                }
              }
            }
          },
          {
            "if": {
              "not": {
                "properties": {
                  "bearer_token_file": {
                    "const": null
                  }
                }
              }
            },
            "then": {
              "properties": {
                "basic_auth": {
                  "const": null
                },
                "bearer_token": {
                  "const": null
                }
              }
            }
          }
        ]
      },
      "relabel_configs": {
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "object",
          "properties": {
            "source_labels": {
              "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/label_name"
              }
            },
            "separator": {
              "description": "Separator placed between concatenated source label values.",
              "type": "string",
              "default": ";"
            },
            "target_label": {
              "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
              "$comment": "https://github.com/prometheus/prometheus/blob/release-2.13/config/testdata/conf.good.yml#L146 has a regex capture group, violating vanilla label_name definition.",
              "type": "string"
            },
            "regex": {
              "description": "Regular expression against which the extracted value is matched.",
              "$comment": "https://github.com/prometheus/prometheus/blob/release-2.13/config/testdata/conf.good.yml#L111 has integer instead of string",
              "default": "(.*)"
            },
            "modulus": {
              "description": "Modulus to take of the hash of the source label values.",
              "type": "integer"
            },
            "replacement": {
              "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available.",
              "type": "string",
              "default": "$1"
            },
            "action": {
              "description": "Action to perform based on regex matching.",
              "type": "string",
              "enum": [
                "replace",
                "keep",
                "drop",
                "hashmod",
                "labelmap",
                "labeldrop",
                "labelkeep"
              ],
              "default": "replace"
            }
          },
          "if": {
            "properties": {
              "action": {
                "const": "replace"
              }
            }
          },
          "then": {
            "required": [
              "target_label"
            ]
          }
        }
      },
      "tls_config": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "ca_file": {
            "description": "CA certificate to validate API server certificate with.",
            "$ref": "#/definitions/filepath"
          },
          "cert_file": {
            "description": "Certificate file for client cert authentication to the server.",
            "$ref": "#/definitions/filepath"
          },
          "key_file": {
            "description": "Key file for client cert authentication to the server.",
            "$ref": "#/definitions/filepath"
          },
          "server_name": {
            "description": "ServerName extension to indicate the name of the server.",
            "type": [
              "string",
              "null"
            ]
          },
          "insecure_skip_verify": {
            "description": "Disable validation of the server certificate.",
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "additionalProperties": false
      },
      "scheme": {
        "type": [
          "string",
          "null"
        ],
        "enum": [
          "http",
          "https",
          null
        ]
      },
      "azure_sd_configs": {
        "description": "List of Azure service discovery configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "description": "The information to access the Azure API.",
          "type": "object"
        }
      },
      "consul_sd_configs": {
        "description": "List of Consul service discovery configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "description": "The information to access the Consul API. It is to be defined as the Consul documentation requires.",
          "type": "object"
        }
      },
      "dns_sd_configs": {
        "description": "List of DNS service discovery configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "description": "A DNS-based service discovery configuration allows specifying a set of DNS domain names which are periodically queried to discover a list of targets. The DNS servers to be contacted are read from /etc/resolv.conf. This service discovery method only supports basic DNS A, AAAA and SRV record queries, but not the advanced DNS-SD approach specified in RFC6763. During the relabeling phase, the meta label __meta_dns_name is available on each target and is set to the record name that produced the discovered target.",
          "type": "object"
        }
      },
      "ec2_sd_configs": {
        "description": "List of EC2 service discovery configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "description": "The information to access the EC2 API.",
          "type": "object"
        }
      },
      "openstack_sd_configs": {
        "description": "List of OpenStack service discovery configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "description": "The information to access the OpenStack API.",
          "type": "object"
        }
      },
      "file_sd_configs": {
        "description": "List of file service discovery configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "object",
          "properties": {
            "files": {
              "description": "Patterns for files from which target groups are extracted. Where the pattern may be a path ending in .json, .yml or .yaml. The last path segment may contain a single * that matches any character sequence, e.g. my/path/tg_*.json.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1
            },
            "refresh_interval": {
              "description": "Refresh interval to re-read the files.",
              "$ref": "#/definitions/duration",
              "default": "5m"
            }
          }
        }
      },
      "gce_sd_configs": {
        "description": "List of GCE service discovery configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "description": "The information to access the GCE API.",
          "type": "object"
        }
      },
      "kubernetes_sd_configs": {
        "description": "List of Kubernetes service discovery configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "description": "The information to access the Kubernetes API.",
          "type": "object"
        }
      },
      "marathon_sd_configs": {
        "description": "List of Marathon service discovery configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "object"
        }
      },
      "nerve_sd_configs": {
        "description": "List of AirBnB's Nerve service discovery configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "object"
        }
      },
      "serverset_sd_configs": {
        "description": "List of Zookeeper Serverset service discovery configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "object"
        }
      },
      "triton_sd_configs": {
        "description": "List of Triton service discovery configurations.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "description": "The information to access the Triton discovery API.",
          "type": "object"
        }
      },
      "static_configs": {
        "description": "List of labeled statically configured targets for this job.",
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "object",
          "properties": {
            "targets": {
              "description": "The targets specified by the static config.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            },
            "labels": {
              "description": "Labels assigned to all metrics scraped from the targets.",
              "$ref": "#/definitions/labels"
            }
          }
        }
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "global": {
          "scrape_interval": "1m",
          "scrape_timeout": "10s",
          "evaluation_interval": "1m",
          "external_labels": {
            "env": "dev"
          }
        },
        "rule_files": [
          "/etc/prometheus/rules/*.yml"
        ],
        "remote_write": [
          {
            "url": "http://localhost:9090/api/v1/write",
            "remote_timeout": "30s",
            "write_relabel_configs": [
              {
                "source_labels": [
                  "__name__"
                ],
                "target_label": "job",
                "replacement": "prometheus"
              }
            ],
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "remote_read": [
          {
            "url": "http://localhost:9090/api/v1/read",
            "required_matchers": {
              "job": "prometheus"
            },
            "remote_timeout": "1m",
            "read_recent": true,
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "scrape_configs": [
          {
            "job_name": "prometheus",
            "scrape_interval": "1m",
            "scrape_timeout": "10s",
            "metrics_path": "/metrics",
            "honor_labels": false,
            "honor_timestamps": true,
            "scheme": "https",
            "params": {
              "match[]": "up"
            },
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            },
            "static_configs": [
              {
                "targets": [
                  "localhost:9090"
                ],
                "labels": {
                  "env": "dev"
                }
              }
            ]
          }
        ],
        "alerting": {
          "alert_relabel_configs": [
            {
              "source_labels": [
                "__name__"
              ],
              "target_label": "job",
              "replacement": "prometheus"
            }
          ],
          "alertmanagers": [
            {
              "timeout": "10s",
              "api_version": "v1",
              "path_prefix": "/",
              "scheme": "https",
              "basic_auth": {
                "username": "prometheus",
                "password": "prometheus"
              },
              "tls_config": {
                "ca_file": "/etc/prometheus/ca.crt",
                "cert_file": "/etc/prometheus/prometheus.crt",
                "key_file": "/etc/prometheus/prometheus.key"
              },
              "static_configs": [
                {
                  "targets": [
                    "localhost:9093"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('foo-bar' was unexpected)",
      "python_error": "'foo-bar' does not match any of the regexes: '^[a-zA-Z_][a-zA-Z0-9_]*$'\n\nFailed validating 'additionalProperties' in schema['properties']['global']['properties']['external_labels']:\n    {'type': ['object', 'null'],\n     'patternProperties': {'^[a-zA-Z_][a-zA-Z0-9_]*$': {'$ref': '#/definitions/label_value'}},\n     'additionalProperties': False}\n\nOn instance['global']['external_labels']:\n    {'env': 'dev', 'foo-bar': 'baz'}",
      "data": {
        "global": {
          "scrape_interval": "1m",
          "scrape_timeout": "10s",
          "evaluation_interval": "1m",
          "external_labels": {
            "env": "dev",
            "foo-bar": "baz"
          }
        },
        "rule_files": [
          "/etc/prometheus/rules/*.yml"
        ],
        "remote_write": [
          {
            "url": "http://localhost:9090/api/v1/write",
            "remote_timeout": "30s",
            "write_relabel_configs": [
              {
                "source_labels": [
                  "__name__"
                ],
                "target_label": "job",
                "replacement": "prometheus",
                "regex": "*(a)"
              }
            ],
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "remote_read": [
          {
            "url": "http://localhost:9090/api/v1/read",
            "required_matchers": {
              "job": "prometheus"
            },
            "remote_timeout": "1m",
            "read_recent": true,
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "scrape_configs": [
          {
            "job_name": "prometheus",
            "scrape_interval": "1m",
            "scrape_timeout": "10s",
            "metrics_path": "/metrics",
            "honor_labels": false,
            "honor_timestamps": true,
            "scheme": "https",
            "params": {
              "match[]": "up"
            },
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            },
            "static_configs": [
              {
                "targets": [
                  "localhost:9090"
                ],
                "labels": {
                  "env": "dev"
                }
              }
            ]
          }
        ],
        "alerting": {
          "alert_relabel_configs": [
            {
              "source_labels": [
                "__name__"
              ],
              "target_label": "job",
              "replacement": "prometheus"
            }
          ],
          "alertmanagers": [
            {
              "timeout": "10s",
              "api_version": "v1",
              "path_prefix": "/",
              "scheme": "https",
              "basic_auth": {
                "username": "prometheus",
                "password": "prometheus"
              },
              "tls_config": {
                "ca_file": "/etc/prometheus/ca.crt",
                "cert_file": "/etc/prometheus/prometheus.crt",
                "key_file": "/etc/prometheus/prometheus.key"
              },
              "static_configs": [
                {
                  "targets": [
                    "localhost:9093"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "{\"username\":\"prometheus\",\"password\":\"prometheus\",\"password_file\":\"/path/to/password\"} is valid under more than one of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'username': 'prometheus', 'password': 'prometheus', 'password_file': '/path/to/password'} is valid under each of {'required': ['password_file']}, {'required': ['password']}\n\nFailed validating 'oneOf' in schema['properties']['scrape_configs']['items']['properties']['basic_auth']:\n    {'description': 'Sets the `Authorization` header on every remote write '\n                    'request with the configured username and password. '\n                    'password and password_file are mutually exclusive.',\n     'type': ['object', 'null'],\n     'properties': {'username': {'type': 'string'},\n                    'password': {'type': ['string', 'null']},\n                    'password_file': {'$ref': '#/definitions/filepath'}},\n     'oneOf': [{'required': ['password']}, {'required': ['password_file']}],\n     'additionalProperties': False,\n     'required': ['username']}\n\nOn instance['scrape_configs'][0]['basic_auth']:\n    {'username': 'prometheus',\n     'password': 'prometheus',\n     'password_file': '/path/to/password'}",
      "data": {
        "global": {
          "scrape_interval": "1m",
          "scrape_timeout": "10s",
          "evaluation_interval": "1m",
          "external_labels": {
            "env": "dev"
          }
        },
        "rule_files": [
          "/etc/prometheus/rules/*.yml"
        ],
        "remote_write": [
          {
            "url": "http://localhost:9090/api/v1/write",
            "remote_timeout": "30s",
            "write_relabel_configs": [
              {
                "source_labels": [
                  "__name__"
                ],
                "target_label": "job",
                "replacement": "prometheus"
              }
            ],
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus",
              "password_file": "/path/to/password"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "remote_read": [
          {
            "url": "http://localhost:9090/api/v1/read",
            "required_matchers": {
              "job": "prometheus"
            },
            "remote_timeout": "1m",
            "read_recent": true,
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus",
              "password_file": "/path/to/password"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "scrape_configs": [
          {
            "job_name": "prometheus",
            "scrape_interval": "1m",
            "scrape_timeout": "10s",
            "metrics_path": "/metrics",
            "honor_labels": false,
            "honor_timestamps": true,
            "scheme": "https",
            "params": {
              "match[]": "up"
            },
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus",
              "password_file": "/path/to/password"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            },
            "static_configs": [
              {
                "targets": [
                  "localhost:9090"
                ],
                "labels": {
                  "env": "dev"
                }
              }
            ]
          }
        ],
        "alerting": {
          "alert_relabel_configs": [
            {
              "source_labels": [
                "__name__"
              ],
              "target_label": "job",
              "replacement": "prometheus"
            }
          ],
          "alertmanagers": [
            {
              "timeout": "10s",
              "api_version": "v1",
              "path_prefix": "/",
              "scheme": "https",
              "basic_auth": {
                "username": "prometheus",
                "password": "prometheus",
                "password_file": "/path/to/password"
              },
              "tls_config": {
                "ca_file": "/etc/prometheus/ca.crt",
                "cert_file": "/etc/prometheus/prometheus.crt",
                "key_file": "/etc/prometheus/prometheus.key"
              },
              "static_configs": [
                {
                  "targets": [
                    "localhost:9093"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on patternProperties keyword",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('env env' was unexpected)",
      "python_error": "'env env' does not match any of the regexes: '^[a-zA-Z_][a-zA-Z0-9_]*$'\n\nFailed validating 'additionalProperties' in schema['properties']['global']['properties']['external_labels']:\n    {'type': ['object', 'null'],\n     'patternProperties': {'^[a-zA-Z_][a-zA-Z0-9_]*$': {'$ref': '#/definitions/label_value'}},\n     'additionalProperties': False}\n\nOn instance['global']['external_labels']:\n    {'env env': 'dev'}",
      "data": {
        "global": {
          "scrape_interval": "1m",
          "scrape_timeout": "10s",
          "evaluation_interval": "1m",
          "external_labels": {
            "env env": "dev"
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['rule_files']['items']:\n    {'type': 'string'}\n\nOn instance['rule_files'][1]:\n    123",
      "data": {
        "global": {
          "scrape_interval": "1m",
          "scrape_timeout": "10s",
          "evaluation_interval": "1m",
          "external_labels": {
            "env": "dev"
          }
        },
        "rule_files": [
          "/etc/prometheus/rules/*.yml",
          123,
          "Invalid value. It should be string or null according to the filepath_glob definition."
        ],
        "remote_write": [
          {
            "url": "http://localhost:9090/api/v1/write",
            "remote_timeout": "30s",
            "write_relabel_configs": [
              {
                "source_labels": [
                  "__name__"
                ],
                "target_label": "job",
                "replacement": "prometheus",
                "action": "invalid",
                "Invalid value. It should be one of the values in the enum according to the relabel_configs definition.": "Invalid label name. It should match the pattern ^[a-zA-Z_][a-zA-Z0-9_]*$ according to the label_name definition."
              }
            ],
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "remote_read": [
          {
            "url": "http://localhost:9090/api/v1/read",
            "required_matchers": {
              "job": "prometheus"
            },
            "remote_timeout": "1m",
            "read_recent": true,
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "scrape_configs": [
          {
            "job_name": "prometheus",
            "scrape_interval": "1m",
            "scrape_timeout": "10s",
            "metrics_path": "/metrics",
            "honor_labels": false,
            "honor_timestamps": true,
            "scheme": "https",
            "params": {
              "match[]": "up"
            },
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            },
            "static_configs": [
              {
                "targets": [
                  "localhost:9090"
                ],
                "labels": {
                  "env": "dev"
                },
                "invalid_key": "invalid_value",
                "Invalid key. It is not allowed according to the additionalProperties keyword in static_configs definition.": "Invalid label name. It should match the pattern ^[a-zA-Z_][a-zA-Z0-9_]*$ according to the label_name definition."
              }
            ]
          }
        ],
        "alerting": {
          "alert_relabel_configs": [
            {
              "source_labels": [
                "__name__"
              ],
              "target_label": "job",
              "replacement": "prometheus"
            }
          ],
          "alertmanagers": [
            {
              "timeout": "10s",
              "api_version": "v1",
              "path_prefix": "/",
              "scheme": "https",
              "basic_auth": {
                "username": "prometheus",
                "password": "prometheus"
              },
              "tls_config": {
                "ca_file": "/etc/prometheus/ca.crt",
                "cert_file": "/etc/prometheus/prometheus.crt",
                "key_file": "/etc/prometheus/prometheus.key"
              },
              "static_configs": [
                {
                  "targets": [
                    "localhost:9093"
                  ]
                }
              ],
              "invalid_key": "invalid_value",
              "Invalid key. It is not allowed according to the additionalProperties keyword in alertmanagers definition.": "Invalid label name. It should match the pattern ^[a-zA-Z_][a-zA-Z0-9_]*$ according to the label_name definition."
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('extra_property' was unexpected)",
      "python_error": "Additional properties are not allowed ('extra_property' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'http://json-schema.org/draft-07/schema#',\n     '$id': 'http://json.schemastore.org/prometheus',\n     'title': 'Prometheus',\n     'description': 'Prometheus configuration file',\n     'type': ['object', 'null'],\n     'properties': {'global': {'description': 'The global configuration '\n                                              'specifies parameters that '\n                                              'are valid in all other '\n                                              'configuration contexts. '\n                                              'They also serve as defaults '\n                                              'for other configuration '\n                                              'sections.',\n                               'type': ['object', 'null'],\n                               'properties': {'scrape_interval': {'description': 'How '\n                      .. (115271 more)",
      "data": {
        "global": {
          "scrape_interval": "1m",
          "scrape_timeout": "10s",
          "evaluation_interval": "1m",
          "external_labels": {
            "env": "dev"
          },
          "extra_property": "extra_value"
        },
        "rule_files": [
          "/etc/prometheus/rules/*.yml"
        ],
        "remote_write": [
          {
            "url": "http://localhost:9090/api/v1/write",
            "remote_timeout": "30s",
            "write_relabel_configs": [
              {
                "source_labels": [
                  "__name__"
                ],
                "target_label": "job",
                "replacement": "prometheus"
              }
            ],
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            },
            "extra_property": "extra_value"
          }
        ],
        "remote_read": [
          {
            "url": "http://localhost:9090/api/v1/read",
            "required_matchers": {
              "job": "prometheus"
            },
            "remote_timeout": "1m",
            "read_recent": true,
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            },
            "extra_property": "extra_value"
          }
        ],
        "scrape_configs": [
          {
            "job_name": "prometheus",
            "scrape_interval": "1m",
            "scrape_timeout": "10s",
            "metrics_path": "/metrics",
            "honor_labels": false,
            "honor_timestamps": true,
            "scheme": "https",
            "params": {
              "match[]": "up"
            },
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            },
            "static_configs": [
              {
                "targets": [
                  "localhost:9090"
                ],
                "labels": {
                  "env": "dev"
                }
              }
            ],
            "extra_property": "extra_value"
          }
        ],
        "alerting": {
          "alert_relabel_configs": [
            {
              "source_labels": [
                "__name__"
              ],
              "target_label": "job",
              "replacement": "prometheus"
            }
          ],
          "alertmanagers": [
            {
              "timeout": "10s",
              "api_version": "v1",
              "path_prefix": "/",
              "scheme": "https",
              "basic_auth": {
                "username": "prometheus",
                "password": "prometheus"
              },
              "tls_config": {
                "ca_file": "/etc/prometheus/ca.crt",
                "cert_file": "/etc/prometheus/prometheus.crt",
                "key_file": "/etc/prometheus/prometheus.key"
              },
              "static_configs": [
                {
                  "targets": [
                    "localhost:9093"
                  ]
                }
              ],
              "extra_property": "extra_value"
            }
          ],
          "extra_property": "extra_value"
        },
        "extra_property": "extra_value"
      }
    },
    {
      "description": "llama-70b generated negative; focus on allOf keyword",
      "valid": false,
      "rust_error": "null was expected",
      "python_error": "None was expected\n\nFailed validating 'const' in schema['properties']['remote_write']['items']['allOf'][0]['allOf'][0]['then']['properties']['bearer_token_file']:\n    {'const': None}\n\nOn instance['remote_write'][0]['bearer_token_file']:\n    '/path/to/token'",
      "data": {
        "global": {
          "scrape_interval": "1m",
          "scrape_timeout": "10s",
          "evaluation_interval": "1m",
          "external_labels": {
            "env": "dev"
          }
        },
        "rule_files": [
          "/etc/prometheus/rules/*.yml"
        ],
        "remote_write": [
          {
            "url": "http://localhost:9090/api/v1/write",
            "remote_timeout": "30s",
            "write_relabel_configs": [
              {
                "source_labels": [
                  "__name__"
                ],
                "target_label": "job",
                "replacement": "prometheus"
              }
            ],
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            },
            "bearer_token": "token",
            "bearer_token_file": "/path/to/token"
          }
        ],
        "remote_read": [
          {
            "url": "http://localhost:9090/api/v1/read",
            "required_matchers": {
              "job": "prometheus"
            },
            "remote_timeout": "1m",
            "read_recent": true,
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "scrape_configs": [
          {
            "job_name": "prometheus",
            "scrape_interval": "1m",
            "scrape_timeout": "10s",
            "metrics_path": "/metrics",
            "honor_labels": false,
            "honor_timestamps": true,
            "scheme": "https",
            "params": {
              "match[]": "up"
            },
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            },
            "static_configs": [
              {
                "targets": [
                  "localhost:9090"
                ],
                "labels": {
                  "env": "dev"
                }
              }
            ]
          }
        ],
        "alerting": {
          "alert_relabel_configs": [
            {
              "source_labels": [
                "__name__"
              ],
              "target_label": "job",
              "replacement": "prometheus"
            }
          ],
          "alertmanagers": [
            {
              "timeout": "10s",
              "api_version": "v1",
              "path_prefix": "/",
              "scheme": "https",
              "basic_auth": {
                "username": "prometheus",
                "password": "prometheus"
              },
              "tls_config": {
                "ca_file": "/etc/prometheus/ca.crt",
                "cert_file": "/etc/prometheus/prometheus.crt",
                "key_file": "/etc/prometheus/prometheus.key"
              },
              "static_configs": [
                {
                  "targets": [
                    "localhost:9093"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on if keyword or then keyword",
      "valid": false,
      "rust_error": "\"target_label\" is a required property",
      "python_error": "'target_label' is a required property\n\nFailed validating 'required' in schema['properties']['alerting']['properties']['alert_relabel_configs']['items']['then']:\n    {'required': ['target_label']}\n\nOn instance['alerting']['alert_relabel_configs'][1]:\n    {'source_labels': ['__name__'],\n     'regex': '(.*)',\n     'action': 'replace',\n     'separator': '/'}",
      "data": {
        "global": {
          "scrape_interval": "1m",
          "scrape_timeout": "10s",
          "evaluation_interval": "1m",
          "external_labels": {
            "env": "dev"
          }
        },
        "rule_files": [
          "/etc/prometheus/rules/*.yml"
        ],
        "remote_write": [
          {
            "url": "http://localhost:9090/api/v1/write",
            "remote_timeout": "30s",
            "write_relabel_configs": [
              {
                "source_labels": [
                  "__name__"
                ],
                "target_label": "job",
                "replacement": "prometheus",
                "action": "replace",
                "regex": "(.*)",
                "modulus": 10,
                "separator": "|"
              },
              {
                "source_labels": [
                  "__name__"
                ],
                "regex": "(.*)",
                "action": "replace",
                "separator": "/"
              }
            ],
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "remote_read": [
          {
            "url": "http://localhost:9090/api/v1/read",
            "required_matchers": {
              "job": "prometheus"
            },
            "remote_timeout": "1m",
            "read_recent": true,
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "scrape_configs": [
          {
            "job_name": "prometheus",
            "scrape_interval": "1m",
            "scrape_timeout": "10s",
            "metrics_path": "/metrics",
            "honor_labels": false,
            "honor_timestamps": true,
            "scheme": "https",
            "params": {
              "match[]": "up"
            },
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            },
            "static_configs": [
              {
                "targets": [
                  "localhost:9090"
                ],
                "labels": {
                  "env": "dev"
                }
              }
            ]
          }
        ],
        "alerting": {
          "alert_relabel_configs": [
            {
              "source_labels": [
                "__name__"
              ],
              "target_label": "job",
              "replacement": "prometheus",
              "action": "replace",
              "regex": "(.*)",
              "modulus": 10,
              "separator": "|"
            },
            {
              "source_labels": [
                "__name__"
              ],
              "regex": "(.*)",
              "action": "replace",
              "separator": "/"
            }
          ],
          "alertmanagers": [
            {
              "timeout": "10s",
              "api_version": "v1",
              "path_prefix": "/",
              "scheme": "https",
              "basic_auth": {
                "username": "prometheus",
                "password": "prometheus"
              },
              "tls_config": {
                "ca_file": "/etc/prometheus/ca.crt",
                "cert_file": "/etc/prometheus/prometheus.crt",
                "key_file": "/etc/prometheus/prometheus.key"
              },
              "static_configs": [
                {
                  "targets": [
                    "localhost:9093"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minItems keyword",
      "valid": false,
      "rust_error": "[] has less than 1 item",
      "python_error": "[] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['scrape_configs']['items']['properties']['file_sd_configs']['items']['properties']['files']:\n    {'description': 'Patterns for files from which target groups are '\n                    'extracted. Where the pattern may be a path ending in '\n                    '.json, .yml or .yaml. The last path segment may '\n                    'contain a single * that matches any character '\n                    'sequence, e.g. my/path/tg_*.json.',\n     'type': 'array',\n     'items': {'type': 'string'},\n     'minItems': 1}\n\nOn instance['scrape_configs'][0]['file_sd_configs'][0]['files']:\n    []",
      "data": {
        "global": {
          "scrape_interval": "1m",
          "scrape_timeout": "10s",
          "evaluation_interval": "1m",
          "external_labels": {
            "env": "dev"
          }
        },
        "rule_files": [
          "/etc/prometheus/rules/*.yml"
        ],
        "remote_write": [
          {
            "url": "http://localhost:9090/api/v1/write",
            "remote_timeout": "30s",
            "write_relabel_configs": [
              {
                "source_labels": [
                  "__name__"
                ],
                "target_label": "job",
                "replacement": "prometheus"
              }
            ],
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "remote_read": [
          {
            "url": "http://localhost:9090/api/v1/read",
            "required_matchers": {
              "job": "prometheus"
            },
            "remote_timeout": "1m",
            "read_recent": true,
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ],
        "scrape_configs": [
          {
            "job_name": "prometheus",
            "scrape_interval": "1m",
            "scrape_timeout": "10s",
            "metrics_path": "/metrics",
            "honor_labels": false,
            "honor_timestamps": true,
            "scheme": "https",
            "params": {
              "match[]": "up"
            },
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            },
            "file_sd_configs": [
              {
                "files": [],
                "refresh_interval": "5m"
              }
            ]
          }
        ],
        "alerting": {
          "alert_relabel_configs": [
            {
              "source_labels": [
                "__name__"
              ],
              "target_label": "job",
              "replacement": "prometheus"
            }
          ],
          "alertmanagers": [
            {
              "timeout": "10s",
              "api_version": "v1",
              "path_prefix": "/",
              "scheme": "https",
              "basic_auth": {
                "username": "prometheus",
                "password": "prometheus"
              },
              "tls_config": {
                "ca_file": "/etc/prometheus/ca.crt",
                "cert_file": "/etc/prometheus/prometheus.crt",
                "key_file": "/etc/prometheus/prometheus.key"
              },
              "static_configs": [
                {
                  "targets": [
                    "localhost:9093"
                  ]
                }
              ]
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"unknown\" is not one of [\"replace\",\"keep\",\"drop\",\"hashmod\",\"labelmap\",\"labeldrop\",\"labelkeep\"]",
      "python_error": "'unknown' is not one of ['replace', 'keep', 'drop', 'hashmod', 'labelmap', 'labeldrop', 'labelkeep']\n\nFailed validating 'enum' in schema['properties']['remote_write']['items']['properties']['write_relabel_configs']['items']['properties']['action']:\n    {'description': 'Action to perform based on regex matching.',\n     'type': 'string',\n     'enum': ['replace',\n              'keep',\n              'drop',\n              'hashmod',\n              'labelmap',\n              'labeldrop',\n              'labelkeep'],\n     'default': 'replace'}\n\nOn instance['remote_write'][0]['write_relabel_configs'][0]['action']:\n    'unknown'",
      "data": {
        "global": {
          "scrape_interval": "1m",
          "scrape_timeout": "10s",
          "evaluation_interval": "1m",
          "external_labels": {
            "env": "dev"
          }
        },
        "rule_files": [
          "/etc/prometheus/rules/*.yml"
        ],
        "remote_write": [
          {
            "url": "http://localhost:9090/api/v1/write",
            "remote_timeout": "30s",
            "write_relabel_configs": [
              {
                "source_labels": [
                  "__name__"
                ],
                "target_label": "job",
                "replacement": "prometheus",
                "action": "unknown"
              }
            ],
            "basic_auth": {
              "username": "prometheus",
              "password": "prometheus"
            },
            "tls_config": {
              "ca_file": "/etc/prometheus/ca.crt",
              "cert_file": "/etc/prometheus/prometheus.crt",
              "key_file": "/etc/prometheus/prometheus.key"
            }
          }
        ]
      }
    }
  ]
}