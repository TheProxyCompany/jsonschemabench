{
  "description": "sample Github_easy/o40352.json",
  "meta": {
    "full_size": 384,
    "stripped_size": 340,
    "features": [
      "enum"
    ],
    "raw_features": [
      "$schema",
      "id",
      "properties",
      "required",
      "type",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "id": "https://letsencrypt.org/schema/01/error#",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "Schema for an error message",
    "type": "object",
    "required": [
      "type",
      "error"
    ],
    "properties": {
      "type": {
        "enum": [
          "error"
        ]
      },
      "error": {
        "enum": [
          "malformed",
          "unauthorized",
          "serverInternal",
          "nonSupported",
          "unknown",
          "badCSR"
        ]
      },
      "message": {
        "type": "string"
      },
      "moreInfo": {
        "type": "string"
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "type": "error",
        "error": "malformed",
        "message": "The request was malformed.",
        "moreInfo": "https://letsencrypt.org/docs/error-handling/"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['moreInfo']:\n    {'type': 'string'}\n\nOn instance['moreInfo']:\n    123",
      "data": {
        "type": "error",
        "error": "malformed",
        "message": "The request was malformed.",
        "moreInfo": 123
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "type": "error",
        "error": "malformed",
        "message": "The request was malformed",
        "moreInfo": "https://letsencrypt.org/docs/error-handling/"
      }
    }
  ]
}