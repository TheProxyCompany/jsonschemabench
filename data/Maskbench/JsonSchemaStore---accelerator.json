{
  "description": "sample JsonSchemaStore/accelerator.json",
  "meta": {
    "full_size": 23636,
    "stripped_size": 15093,
    "features": [
      "$ref",
      "@minmaxItems",
      "@minmaxLength",
      "@siblingKeys",
      "allOf",
      "anyOf",
      "const",
      "enum",
      "format",
      "format:regex",
      "items",
      "pattern"
    ],
    "raw_features": [
      "$id",
      "$schema",
      "definitions",
      "maxItems",
      "minItems",
      "minLength",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:null",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$id": "https://json.schemastore.org/accelerator.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
      "AcceleratorOption": {
        "type": "object",
        "properties": {
          "choices": {
            "title": "choices",
            "description": "A list of predefined choices",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "title": "text",
                  "description": "The displayed text"
                },
                "value": {
                  "title": "value",
                  "description": "The value that the form returns for this choice"
                }
              },
              "title": "choices"
            }
          },
          "dataType": {
            "anyOf": [
              {
                "const": "string"
              },
              {
                "const": "number"
              },
              {
                "const": "boolean"
              },
              {
                "type": "string",
                "pattern": "^$|^[A-Z][a-z0-9A-Z]*$"
              },
              {
                "type": "array",
                "minItems": 1,
                "maxItems": 1,
                "items": {
                  "const": "string"
                }
              },
              {
                "type": "array",
                "minItems": 1,
                "maxItems": 1,
                "items": {
                  "const": "number"
                }
              },
              {
                "type": "array",
                "minItems": 1,
                "maxItems": 1,
                "items": {
                  "const": "boolean"
                }
              },
              {
                "type": "array",
                "minItems": 1,
                "maxItems": 1,
                "items": {
                  "type": "string",
                  "pattern": "^$|^[A-Z][a-z0-9A-Z]*$"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "dataType",
            "description": "The option data type"
          },
          "defaultValue": {
            "title": "defaultValue",
            "description": "The value used to pre-populate the option"
          },
          "dependsOn": {
            "allOf": [
              {
                "$ref": "#/definitions/DependsOn"
              },
              {
                "title": "dependsOn",
                "description": "The dependency that controls this options visibility"
              }
            ]
          },
          "description": {
            "type": "string",
            "title": "description",
            "description": "A tooltip to accompany the input"
          },
          "inputType": {
            "type": "string",
            "enum": [
              "text",
              "textarea",
              "checkbox",
              "select",
              "radio"
            ],
            "title": "inputType",
            "description": "The HTML input type used to display the option"
          },
          "label": {
            "type": "string",
            "title": "label",
            "description": "A human-readable version of the name identifying the option"
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "A unique, camelCase name",
            "minLength": 1,
            "pattern": "^$|^[a-z][a-z0-9A-Z]*$"
          },
          "required": {
            "type": "boolean",
            "title": "required",
            "description": "Whether the user is required to enter a value in the UI"
          },
          "validationRegex": {
            "allOf": [
              {
                "$ref": "#/definitions/Pattern"
              },
              {
                "title": "validationRegex",
                "description": "A regex that validates the string representation of the option value when set"
              }
            ]
          }
        },
        "anyOf": [
          {
            "properties": {
              "dataType": {
                "const": "string"
              },
              "defaultValue": {
                "type": "string"
              }
            }
          },
          {
            "properties": {
              "dataType": {
                "type": "array",
                "items": {
                  "const": "string"
                }
              },
              "defaultValue": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          {
            "properties": {
              "dataType": {
                "const": "number"
              },
              "defaultValue": {
                "type": "number"
              }
            }
          },
          {
            "properties": {
              "dataType": {
                "type": "array",
                "items": {
                  "const": "number"
                }
              },
              "defaultValue": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          },
          {
            "properties": {
              "dataType": {
                "const": "boolean"
              },
              "defaultValue": {
                "type": "boolean"
              }
            }
          },
          {
            "properties": {
              "dataType": {
                "type": "array",
                "items": {
                  "const": "boolean"
                }
              },
              "defaultValue": {
                "type": "array",
                "items": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "properties": {
              "dataType": {
                "type": "string",
                "pattern": "^$|^[A-Z][a-z0-9A-Z]*$"
              },
              "defaultValue": {
                "type": "object"
              }
            }
          },
          {
            "properties": {
              "dataType": {
                "type": "array",
                "items": {
                  "type": "string",
                  "pattern": "^$|^[A-Z][a-z0-9A-Z]*$"
                }
              },
              "defaultValue": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        ]
      },
      "Chain-1": {
        "type": "object",
        "properties": {
          "applyTo": {
            "title": "applyTo",
            "description": "The path patterns used to filter which files to apply the Transforms to",
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "title": "applyTo",
              "minLength": 1,
              "pattern": "^$|^[^/].*$"
            }
          },
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          },
          "transformations": {
            "title": "transformations",
            "description": "A list of child Transforms to apply sequentially",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Loop-2"
                },
                {
                  "$ref": "#/definitions/Chain-2"
                },
                {
                  "$ref": "#/definitions/Provenance-2"
                },
                {
                  "$ref": "#/definitions/Exclude-2"
                },
                {
                  "$ref": "#/definitions/Include-2"
                },
                {
                  "$ref": "#/definitions/Combo-2"
                },
                {
                  "$ref": "#/definitions/ReplaceText-2"
                },
                {
                  "$ref": "#/definitions/InvokeFragment-2"
                },
                {
                  "$ref": "#/definitions/Merge-2"
                },
                {
                  "$ref": "#/definitions/OpenRewriteRecipe-2"
                },
                {
                  "$ref": "#/definitions/RewritePath-2"
                },
                {
                  "$ref": "#/definitions/UniquePath-2"
                },
                {
                  "$ref": "#/definitions/YTT-2"
                },
                {
                  "$ref": "#/definitions/Let-2"
                },
                {
                  "$ref": "#/definitions/UseEncoding-2"
                },
                {
                  "$ref": "#/definitions/InvokeFragment-2"
                }
              ]
            }
          }
        }
      },
      "Chain-2": {
        "allOf": [
          {
            "$ref": "#/definitions/Chain-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "Chain"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "Combo-1": {
        "type": "object",
        "properties": {
          "applyTo": {
            "title": "applyTo",
            "description": "The path patterns used to filter which files to apply the Transforms to",
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "title": "applyTo",
              "minLength": 1,
              "pattern": "^$|^[^/].*$"
            }
          },
          "chain": {
            "title": "chain",
            "description": "A list of child Transforms to apply sequentially",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Loop-2"
                },
                {
                  "$ref": "#/definitions/Chain-2"
                },
                {
                  "$ref": "#/definitions/Provenance-2"
                },
                {
                  "$ref": "#/definitions/Exclude-2"
                },
                {
                  "$ref": "#/definitions/Include-2"
                },
                {
                  "$ref": "#/definitions/Combo-2"
                },
                {
                  "$ref": "#/definitions/ReplaceText-2"
                },
                {
                  "$ref": "#/definitions/InvokeFragment-2"
                },
                {
                  "$ref": "#/definitions/Merge-2"
                },
                {
                  "$ref": "#/definitions/OpenRewriteRecipe-2"
                },
                {
                  "$ref": "#/definitions/RewritePath-2"
                },
                {
                  "$ref": "#/definitions/UniquePath-2"
                },
                {
                  "$ref": "#/definitions/YTT-2"
                },
                {
                  "$ref": "#/definitions/Let-2"
                },
                {
                  "$ref": "#/definitions/UseEncoding-2"
                },
                {
                  "$ref": "#/definitions/InvokeFragment-2"
                }
              ]
            }
          },
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "exclude": {
            "title": "exclude",
            "description": "The path patterns used to filter which files to exclude",
            "type": "array",
            "items": {
              "type": "string",
              "title": "exclude",
              "minLength": 1,
              "pattern": "^$|^[^/].*$"
            }
          },
          "include": {
            "title": "include",
            "description": "The path patterns used to filter which files to include",
            "type": "array",
            "items": {
              "type": "string",
              "title": "include",
              "minLength": 1,
              "pattern": "^$|^[^/].*$"
            }
          },
          "let": {
            "title": "let",
            "description": "A list of additional variables and their values",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/DerivedSymbol"
                },
                {
                  "title": "let"
                }
              ]
            }
          },
          "merge": {
            "title": "merge",
            "description": "A list of child Transforms to be executed in parallel",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Loop-2"
                },
                {
                  "$ref": "#/definitions/Chain-2"
                },
                {
                  "$ref": "#/definitions/Provenance-2"
                },
                {
                  "$ref": "#/definitions/Exclude-2"
                },
                {
                  "$ref": "#/definitions/Include-2"
                },
                {
                  "$ref": "#/definitions/Combo-2"
                },
                {
                  "$ref": "#/definitions/ReplaceText-2"
                },
                {
                  "$ref": "#/definitions/InvokeFragment-2"
                },
                {
                  "$ref": "#/definitions/Merge-2"
                },
                {
                  "$ref": "#/definitions/OpenRewriteRecipe-2"
                },
                {
                  "$ref": "#/definitions/RewritePath-2"
                },
                {
                  "$ref": "#/definitions/UniquePath-2"
                },
                {
                  "$ref": "#/definitions/YTT-2"
                },
                {
                  "$ref": "#/definitions/Let-2"
                },
                {
                  "$ref": "#/definitions/UseEncoding-2"
                },
                {
                  "$ref": "#/definitions/InvokeFragment-2"
                }
              ]
            }
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          },
          "onConflict": {
            "allOf": [
              {
                "$ref": "#/definitions/ConflictResolution"
              },
              {
                "title": "onConflict",
                "description": "How conflict is handled when an operation produces multiple files at the same path"
              }
            ]
          }
        }
      },
      "Combo-2": {
        "allOf": [
          {
            "$ref": "#/definitions/Combo-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "Combo"
              }
            }
          }
        ]
      },
      "ConflictResolution": {
        "type": "string",
        "enum": [
          "Fail",
          "UseFirst",
          "UseLast",
          "Append",
          "FavorOwn",
          "FavorForeign",
          "NWayDiff"
        ]
      },
      "DependsOn": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name",
            "description": "The options name",
            "minLength": 1,
            "pattern": "^$|^[a-z][a-z0-9A-Z]*$"
          },
          "value": {
            "title": "value",
            "description": "The desired options value to compare against"
          }
        }
      },
      "DerivedSymbol": {
        "type": "object",
        "properties": {
          "expression": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "expression",
                "description": "The SpEL expression to evaluate to compute the symbol value"
              }
            ]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The name under which the new symbol will be added",
            "minLength": 1,
            "pattern": "^$|^[a-z][a-z0-9A-Z]*$"
          }
        }
      },
      "Exclude-1": {
        "type": "object",
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          },
          "patterns": {
            "title": "patterns",
            "description": "The path patterns used to filter which files to exclude",
            "type": "array",
            "items": {
              "type": "string",
              "title": "patterns",
              "minLength": 1,
              "pattern": "^$|^[^/].*$"
            }
          }
        }
      },
      "Exclude-2": {
        "allOf": [
          {
            "$ref": "#/definitions/Exclude-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "Exclude"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "Expression": {
        "type": "string"
      },
      "Include-1": {
        "type": "object",
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          },
          "patterns": {
            "title": "patterns",
            "description": "The path patterns used to filter which files to include",
            "type": "array",
            "items": {
              "type": "string",
              "title": "patterns",
              "minLength": 1,
              "pattern": "^$|^[^/].*$"
            }
          }
        }
      },
      "Include-2": {
        "allOf": [
          {
            "$ref": "#/definitions/Include-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "Include"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "InvokeFragment-1": {
        "type": "object",
        "properties": {
          "anchor": {
            "type": "string",
            "title": "anchor",
            "pattern": "^$|^[^/]$|^[^/](.+)[^/]$"
          },
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "let": {
            "title": "let",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/DerivedSymbol"
                },
                {
                  "title": "let"
                }
              ]
            }
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          },
          "reference": {
            "type": "string",
            "title": "reference",
            "minLength": 1,
            "pattern": "^[a-z0-9]([a-z0-9-]*[a-z0-9])?$"
          }
        }
      },
      "InvokeFragment-2": {
        "allOf": [
          {
            "$ref": "#/definitions/InvokeFragment-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "InvokeFragment"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "Let-1": {
        "type": "object",
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "in": {
            "anyOf": [
              {
                "$ref": "#/definitions/Loop-2"
              },
              {
                "$ref": "#/definitions/Chain-2"
              },
              {
                "$ref": "#/definitions/Provenance-2"
              },
              {
                "$ref": "#/definitions/Exclude-2"
              },
              {
                "$ref": "#/definitions/Include-2"
              },
              {
                "$ref": "#/definitions/Combo-2"
              },
              {
                "$ref": "#/definitions/ReplaceText-2"
              },
              {
                "$ref": "#/definitions/InvokeFragment-2"
              },
              {
                "$ref": "#/definitions/Merge-2"
              },
              {
                "$ref": "#/definitions/OpenRewriteRecipe-2"
              },
              {
                "$ref": "#/definitions/RewritePath-2"
              },
              {
                "$ref": "#/definitions/UniquePath-2"
              },
              {
                "$ref": "#/definitions/YTT-2"
              },
              {
                "$ref": "#/definitions/Let-2"
              },
              {
                "$ref": "#/definitions/UseEncoding-2"
              },
              {
                "$ref": "#/definitions/InvokeFragment-2"
              }
            ]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          },
          "noShadow": {
            "type": "boolean",
            "title": "noShadow",
            "description": "Whether shadowing should be turned off"
          },
          "symbols": {
            "title": "symbols",
            "description": "A list of additional variables and their values",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/DerivedSymbol"
                },
                {
                  "title": "symbols"
                }
              ]
            }
          }
        }
      },
      "Let-2": {
        "allOf": [
          {
            "$ref": "#/definitions/Let-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "Let"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "Loop-1": {
        "type": "object",
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "doAsChain": {
            "anyOf": [
              {
                "$ref": "#/definitions/Loop-2"
              },
              {
                "$ref": "#/definitions/Chain-2"
              },
              {
                "$ref": "#/definitions/Provenance-2"
              },
              {
                "$ref": "#/definitions/Exclude-2"
              },
              {
                "$ref": "#/definitions/Include-2"
              },
              {
                "$ref": "#/definitions/Combo-2"
              },
              {
                "$ref": "#/definitions/ReplaceText-2"
              },
              {
                "$ref": "#/definitions/InvokeFragment-2"
              },
              {
                "$ref": "#/definitions/Merge-2"
              },
              {
                "$ref": "#/definitions/OpenRewriteRecipe-2"
              },
              {
                "$ref": "#/definitions/RewritePath-2"
              },
              {
                "$ref": "#/definitions/UniquePath-2"
              },
              {
                "$ref": "#/definitions/YTT-2"
              },
              {
                "$ref": "#/definitions/Let-2"
              },
              {
                "$ref": "#/definitions/UseEncoding-2"
              },
              {
                "$ref": "#/definitions/InvokeFragment-2"
              }
            ]
          },
          "doAsMerge": {
            "anyOf": [
              {
                "$ref": "#/definitions/Loop-2"
              },
              {
                "$ref": "#/definitions/Chain-2"
              },
              {
                "$ref": "#/definitions/Provenance-2"
              },
              {
                "$ref": "#/definitions/Exclude-2"
              },
              {
                "$ref": "#/definitions/Include-2"
              },
              {
                "$ref": "#/definitions/Combo-2"
              },
              {
                "$ref": "#/definitions/ReplaceText-2"
              },
              {
                "$ref": "#/definitions/InvokeFragment-2"
              },
              {
                "$ref": "#/definitions/Merge-2"
              },
              {
                "$ref": "#/definitions/OpenRewriteRecipe-2"
              },
              {
                "$ref": "#/definitions/RewritePath-2"
              },
              {
                "$ref": "#/definitions/UniquePath-2"
              },
              {
                "$ref": "#/definitions/YTT-2"
              },
              {
                "$ref": "#/definitions/Let-2"
              },
              {
                "$ref": "#/definitions/UseEncoding-2"
              },
              {
                "$ref": "#/definitions/InvokeFragment-2"
              }
            ]
          },
          "index": {
            "type": "string",
            "title": "index",
            "description": "The variable's name to be assigned to the index of the current element on each iteration",
            "pattern": "^$|^[a-z][a-z0-9A-Z]*$"
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          },
          "on": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "on",
                "description": "A SpEL expression that evaluates a list that contains the elements to be iterated over"
              }
            ]
          },
          "var": {
            "type": "string",
            "title": "var",
            "description": "The name of the variable to be assigned to the current element on each iteration",
            "pattern": "^$|^[a-z][a-z0-9A-Z]*$"
          }
        }
      },
      "Loop-2": {
        "allOf": [
          {
            "$ref": "#/definitions/Loop-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "Loop"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "Merge-1": {
        "type": "object",
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          },
          "sources": {
            "title": "sources",
            "description": "A list of child Transforms to be executed in parallel",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Loop-2"
                },
                {
                  "$ref": "#/definitions/Chain-2"
                },
                {
                  "$ref": "#/definitions/Provenance-2"
                },
                {
                  "$ref": "#/definitions/Exclude-2"
                },
                {
                  "$ref": "#/definitions/Include-2"
                },
                {
                  "$ref": "#/definitions/Combo-2"
                },
                {
                  "$ref": "#/definitions/ReplaceText-2"
                },
                {
                  "$ref": "#/definitions/InvokeFragment-2"
                },
                {
                  "$ref": "#/definitions/Merge-2"
                },
                {
                  "$ref": "#/definitions/OpenRewriteRecipe-2"
                },
                {
                  "$ref": "#/definitions/RewritePath-2"
                },
                {
                  "$ref": "#/definitions/UniquePath-2"
                },
                {
                  "$ref": "#/definitions/YTT-2"
                },
                {
                  "$ref": "#/definitions/Let-2"
                },
                {
                  "$ref": "#/definitions/UseEncoding-2"
                },
                {
                  "$ref": "#/definitions/InvokeFragment-2"
                }
              ]
            }
          }
        }
      },
      "Merge-2": {
        "allOf": [
          {
            "$ref": "#/definitions/Merge-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "Merge"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "OpenRewriteRecipe-1": {
        "type": "object",
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          },
          "options": {
            "type": "object",
            "title": "options",
            "description": "Keys and values that depend on the class of the recipe"
          },
          "parseOrFail": {
            "type": "boolean",
            "title": "parseOrFail"
          },
          "recipe": {
            "type": "string",
            "pattern": "^[a-zA-Z_$][a-zA-Z\\d_$]*(?:\\.[a-zA-Z_$][a-zA-Z\\d_$]*)*$",
            "title": "recipe",
            "description": "Full qualified classname of the recipe"
          }
        }
      },
      "OpenRewriteRecipe-2": {
        "allOf": [
          {
            "$ref": "#/definitions/OpenRewriteRecipe-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "OpenRewriteRecipe"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "Pattern": {
        "type": "string",
        "format": "regex"
      },
      "Provenance-1": {
        "type": "object",
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          }
        }
      },
      "Provenance-2": {
        "allOf": [
          {
            "$ref": "#/definitions/Provenance-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "Provenance"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "ReplaceText-1": {
        "type": "object",
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          },
          "regex": {
            "type": "object",
            "properties": {
              "pattern": {
                "allOf": [
                  {
                    "$ref": "#/definitions/Pattern"
                  },
                  {
                    "title": "pattern",
                    "description": "The regular expression that determines text that will be replaced"
                  }
                ]
              },
              "with": {
                "allOf": [
                  {
                    "$ref": "#/definitions/Expression"
                  },
                  {
                    "title": "with",
                    "description": "The SpEL expression that evaluates to the text that will replace the previous string"
                  }
                ]
              }
            },
            "title": "regex",
            "description": "The replacement rule using a single regular expression"
          },
          "substitutions": {
            "title": "substitutions",
            "description": "The replacement rules using literal text tokens",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "title": "text",
                  "description": "The text that will be replaced",
                  "minLength": 1
                },
                "with": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/Expression"
                    },
                    {
                      "title": "with",
                      "description": "The SpEL expression that evaluates to the text that will replace the previous string"
                    }
                  ]
                }
              },
              "title": "substitutions"
            }
          }
        }
      },
      "ReplaceText-2": {
        "allOf": [
          {
            "$ref": "#/definitions/ReplaceText-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "ReplaceText"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "RewritePath-1": {
        "type": "object",
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "matchOrFail": {
            "type": "boolean",
            "title": "matchOrFail",
            "description": "Whether an error should occur if the regex doesn't match"
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          },
          "regex": {
            "allOf": [
              {
                "$ref": "#/definitions/Pattern"
              },
              {
                "title": "regex",
                "description": "The regular expression used to match each input files path"
              }
            ]
          },
          "rewriteTo": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "rewriteTo",
                "description": "The SpEL expression of the location that the file will be rewritten to"
              }
            ]
          }
        }
      },
      "RewritePath-2": {
        "allOf": [
          {
            "$ref": "#/definitions/RewritePath-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "RewritePath"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "UniquePath-1": {
        "type": "object",
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          },
          "strategy": {
            "allOf": [
              {
                "$ref": "#/definitions/ConflictResolution"
              },
              {
                "title": "strategy",
                "description": "How conflict is handled when an operation produces multiple files at the same path"
              }
            ]
          }
        }
      },
      "UniquePath-2": {
        "allOf": [
          {
            "$ref": "#/definitions/UniquePath-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "UniquePath"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "UseEncoding-1": {
        "type": "object",
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "encoding": {
            "type": "object",
            "title": "encoding",
            "description": "The encuding to use, as recognized by the java java.nio.charset.Charset class"
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          }
        }
      },
      "UseEncoding-2": {
        "allOf": [
          {
            "$ref": "#/definitions/UseEncoding-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "UseEncoding"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "YTT-1": {
        "type": "object",
        "properties": {
          "allowList": {
            "title": "allowList",
            "description": "A list of variable names that are allowed to be passed to YTT",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Pattern"
                },
                {
                  "title": "allowList"
                }
              ]
            }
          },
          "condition": {
            "allOf": [
              {
                "$ref": "#/definitions/Expression"
              },
              {
                "title": "condition",
                "description": "The SpEL expression that determines if this Transform should execute"
              }
            ]
          },
          "denyList": {
            "title": "denyList",
            "description": "A list of variable names that are denied from being passed to YTT",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Pattern"
                },
                {
                  "title": "denyList"
                }
              ]
            }
          },
          "extraArgs": {
            "title": "extraArgs",
            "description": "A list of SpEL expressions whose results are additional command line arguments",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/Expression"
                },
                {
                  "title": "extraArgs"
                }
              ]
            }
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "The transform name"
          }
        }
      },
      "YTT-2": {
        "allOf": [
          {
            "$ref": "#/definitions/YTT-1"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "const": "YTT"
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      }
    },
    "properties": {
      "accelerator": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "title": "description",
            "description": "A more detailed description"
          },
          "displayName": {
            "type": "string",
            "title": "displayName",
            "description": "A human-readable name"
          },
          "iconUrl": {
            "type": "string",
            "title": "iconUrl",
            "description": "A URL pointing to an icon image"
          },
          "imports": {
            "title": "imports",
            "description": "The list of fragment to import",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "expose": {
                  "title": "expose",
                  "description": "The list of fragment options to make available as accelerator options",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "as": {
                        "type": "string",
                        "title": "as",
                        "description": "The alias to use as the name of the option",
                        "minLength": 1,
                        "pattern": "^$|^[a-z][a-z0-9A-Z]*$"
                      },
                      "dependsOn": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/DependsOn"
                          },
                          {
                            "title": "dependsOn",
                            "description": "The dependency that controls this options visibility"
                          }
                        ]
                      },
                      "name": {
                        "type": "string",
                        "title": "name",
                        "description": "The original name of the option",
                        "minLength": 1,
                        "pattern": "^\\*$|^$|^[a-z][a-z0-9A-Z]*$"
                      }
                    },
                    "title": "expose"
                  }
                },
                "exposeTypes": {
                  "title": "exposeTypes",
                  "description": "The list of fragment types to make available as accelerator types",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "as": {
                        "type": "string",
                        "title": "as",
                        "description": "The alias to use as the name of the type",
                        "minLength": 1,
                        "pattern": "^$|^[A-Z][a-z0-9A-Z]*$"
                      },
                      "name": {
                        "type": "string",
                        "title": "name",
                        "description": "The original name of the type",
                        "minLength": 1,
                        "pattern": "^\\*$|^$|^[A-Z][a-z0-9A-Z]*$"
                      }
                    },
                    "title": "exposeTypes"
                  }
                },
                "name": {
                  "type": "string",
                  "title": "name",
                  "description": "The name of the fragment to import",
                  "minLength": 1
                }
              },
              "title": "imports"
            }
          },
          "options": {
            "title": "options",
            "description": "The list of options passed to the UI to create input text boxes",
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/AcceleratorOption"
                },
                {
                  "title": "options"
                }
              ]
            }
          },
          "tags": {
            "title": "tags",
            "description": "A list of tags used to filter accelerators",
            "type": "array",
            "items": {
              "type": "string",
              "title": "tags"
            }
          },
          "types": {
            "title": "types",
            "description": "The definitions of custom types",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "title": "name",
                  "description": "The capitalized name of this custom type",
                  "minLength": 1,
                  "pattern": "^$|^[A-Z][a-z0-9A-Z]*$"
                },
                "struct": {
                  "title": "struct",
                  "description": "A sequence of option definitions",
                  "minItems": 1,
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/definitions/AcceleratorOption"
                      },
                      {
                        "title": "struct"
                      }
                    ]
                  }
                }
              },
              "title": "types"
            }
          }
        },
        "title": "accelerator",
        "description": "The metadata (non-behavioral) part of an App Accelerator's accelerator.yaml file"
      },
      "engine": {
        "anyOf": [
          {
            "$ref": "#/definitions/Loop-2"
          },
          {
            "$ref": "#/definitions/Chain-2"
          },
          {
            "$ref": "#/definitions/Provenance-2"
          },
          {
            "$ref": "#/definitions/Exclude-2"
          },
          {
            "$ref": "#/definitions/Include-2"
          },
          {
            "$ref": "#/definitions/Combo-2"
          },
          {
            "$ref": "#/definitions/ReplaceText-2"
          },
          {
            "$ref": "#/definitions/InvokeFragment-2"
          },
          {
            "$ref": "#/definitions/Merge-2"
          },
          {
            "$ref": "#/definitions/OpenRewriteRecipe-2"
          },
          {
            "$ref": "#/definitions/RewritePath-2"
          },
          {
            "$ref": "#/definitions/UniquePath-2"
          },
          {
            "$ref": "#/definitions/YTT-2"
          },
          {
            "$ref": "#/definitions/Let-2"
          },
          {
            "$ref": "#/definitions/UseEncoding-2"
          },
          {
            "$ref": "#/definitions/InvokeFragment-2"
          }
        ]
      }
    },
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "accelerator": {
          "description": "A sample accelerator",
          "displayName": "Sample Accelerator",
          "iconUrl": "https://example.com/icon.png",
          "imports": [
            {
              "expose": [
                {
                  "as": "myOption",
                  "dependsOn": {
                    "name": "anotherOption",
                    "value": "someValue"
                  },
                  "name": "option1"
                }
              ],
              "exposeTypes": [
                {
                  "as": "MyType",
                  "name": "Type1"
                }
              ],
              "name": "fragment1"
            }
          ],
          "options": [
            {
              "choices": [
                {
                  "text": "Choice 1",
                  "value": "value1"
                },
                {
                  "text": "Choice 2",
                  "value": "value2"
                }
              ],
              "dataType": "string",
              "defaultValue": "value1",
              "description": "A sample option",
              "inputType": "select",
              "label": "Sample Option",
              "name": "myOption",
              "required": true,
              "validationRegex": "^value1|value2$"
            }
          ],
          "tags": [
            "tag1",
            "tag2"
          ],
          "types": [
            {
              "name": "MyType",
              "struct": [
                {
                  "choices": [
                    {
                      "text": "Choice 1",
                      "value": "value1"
                    },
                    {
                      "text": "Choice 2",
                      "value": "value2"
                    }
                  ],
                  "dataType": "string",
                  "defaultValue": "value1",
                  "description": "A sample option",
                  "inputType": "select",
                  "label": "Sample Option",
                  "name": "myOption",
                  "required": true,
                  "validationRegex": "^value1|value2$"
                }
              ]
            }
          ]
        },
        "engine": {
          "type": "Chain",
          "name": "myChain",
          "transformations": [
            {
              "type": "ReplaceText",
              "name": "replaceText",
              "regex": {
                "pattern": "oldText",
                "with": "newText"
              }
            },
            {
              "type": "InvokeFragment",
              "name": "invokeFragment",
              "reference": "fragment1",
              "anchor": "anchor1"
            }
          ]
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "accelerator": {
          "description": "A sample accelerator",
          "displayName": "Sample Accelerator",
          "iconUrl": "https://example.com/icon.png",
          "imports": [
            {
              "name": "fragment1",
              "expose": [
                {
                  "name": "option1",
                  "as": "acceleratorOption1"
                }
              ],
              "exposeTypes": [
                {
                  "name": "Type1",
                  "as": "AcceleratorType1"
                }
              ]
            }
          ],
          "options": [
            {
              "name": "acceleratorOption1",
              "label": "Accelerator Option 1",
              "description": "This is an option for the accelerator",
              "inputType": "text",
              "dataType": "string",
              "defaultValue": "default value",
              "required": true,
              "choices": [
                {
                  "text": "Choice 1",
                  "value": "choice1"
                },
                {
                  "text": "Choice 2",
                  "value": "choice2"
                }
              ]
            }
          ],
          "tags": [
            "tag1",
            "tag2"
          ],
          "types": [
            {
              "name": "AcceleratorType1",
              "struct": [
                {
                  "name": "typeOption1",
                  "label": "Type Option 1",
                  "description": "This is an option for the type",
                  "inputType": "text",
                  "dataType": "string",
                  "defaultValue": "default value",
                  "required": true
                }
              ]
            }
          ]
        },
        "engine": {
          "type": "Chain",
          "name": "engine",
          "applyTo": [
            "**/*.txt"
          ],
          "transformations": [
            {
              "type": "ReplaceText",
              "name": "replaceText",
              "regex": {
                "pattern": "old text",
                "with": "new text"
              }
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "{\"type\":\"Chain\",\"name\":\"engine\",\"applyTo\":[\"/path/to/file.txt\",\"/path/to/another/file.txt\"],\"transformations\":[{\"type\":\"ReplaceText\",\"name\":\"replaceText\",\"regex\":{\"pattern\":\"old text\",\"with\":\"new text\"}}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{'type': 'Chain', 'name': 'engine', 'applyTo': ['/path/to/file.txt', '/path/to/another/file.txt'], 'transformations': [{'type': 'ReplaceText', 'name': 'replaceText', 'regex': {'pattern': 'old text', 'with': 'new text'}}]} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema['properties']['engine']:\n    {'anyOf': [{'$ref': '#/definitions/Loop-2'},\n               {'$ref': '#/definitions/Chain-2'},\n               {'$ref': '#/definitions/Provenance-2'},\n               {'$ref': '#/definitions/Exclude-2'},\n               {'$ref': '#/definitions/Include-2'},\n               {'$ref': '#/definitions/Combo-2'},\n               {'$ref': '#/definitions/ReplaceText-2'},\n               {'$ref': '#/definitions/InvokeFragment-2'},\n               {'$ref': '#/definitions/Merge-2'},\n               {'$ref': '#/definitions/OpenRewriteRecipe-2'},\n               {'$ref': '#/definitions/RewritePath-2'},\n               {'$ref': '#/definitions/UniquePath-2'},\n               {'$ref': '#/definitions/YTT-2'},\n  .. (514 more)",
      "data": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "accelerator": {
          "description": "A sample accelerator",
          "displayName": "Sample Accelerator",
          "iconUrl": "https://example.com/icon.png",
          "imports": [
            {
              "name": "fragment1",
              "expose": [
                {
                  "name": "option1",
                  "as": "acceleratorOption1"
                }
              ],
              "exposeTypes": [
                {
                  "name": "Type1",
                  "as": "AcceleratorType1"
                }
              ]
            }
          ],
          "options": [
            {
              "name": "acceleratorOption1",
              "label": "Accelerator Option 1",
              "description": "This is an option for the accelerator",
              "inputType": "text",
              "dataType": "string",
              "defaultValue": "default value",
              "required": true,
              "choices": [
                {
                  "text": "Choice 1",
                  "value": "choice1"
                },
                {
                  "text": "Choice 2",
                  "value": "choice2"
                }
              ]
            }
          ],
          "tags": [
            "tag1",
            "tag2"
          ],
          "types": [
            {
              "name": "AcceleratorType1",
              "struct": [
                {
                  "name": "typeOption1",
                  "label": "Type Option 1",
                  "description": "This is an option for the type",
                  "inputType": "text",
                  "dataType": "string",
                  "defaultValue": "default value",
                  "required": true
                }
              ]
            }
          ]
        },
        "engine": {
          "type": "Chain",
          "name": "engine",
          "applyTo": [
            "/path/to/file.txt",
            "/path/to/another/file.txt"
          ],
          "transformations": [
            {
              "type": "ReplaceText",
              "name": "replaceText",
              "regex": {
                "pattern": "old text",
                "with": "new text"
              }
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on allOf keyword",
      "valid": false,
      "rust_error": "{\"name\":\"acceleratorOption1\",\"label\":\"Accelerator Option 1\",\"description\":\"This is an option for the accelerator\",\"inputType\":\"text\",\"dataType\":\"string\",\"defaultValue\":123,\"required\":true,\"choices\":[{\"text\":\"Choice 1\",\"value\":\"choice1\"},{\"text\":\"Choice 2\",\"value\":\"choice2\"}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "'string' does not match '^$|^[A-Z][a-z0-9A-Z]*$'\n\nFailed validating 'pattern' in schema[6]['properties']['dataType']:\n    {'type': 'string', 'pattern': '^$|^[A-Z][a-z0-9A-Z]*$'}\n\nOn instance['dataType']:\n    'string'",
      "data": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "accelerator": {
          "description": "A sample accelerator",
          "displayName": "Sample Accelerator",
          "iconUrl": "https://example.com/icon.png",
          "imports": [
            {
              "name": "fragment1",
              "expose": [
                {
                  "name": "option1",
                  "as": "acceleratorOption1"
                }
              ],
              "exposeTypes": [
                {
                  "name": "Type1",
                  "as": "AcceleratorType1"
                }
              ]
            }
          ],
          "options": [
            {
              "name": "acceleratorOption1",
              "label": "Accelerator Option 1",
              "description": "This is an option for the accelerator",
              "inputType": "text",
              "dataType": "string",
              "defaultValue": 123,
              "required": true,
              "choices": [
                {
                  "text": "Choice 1",
                  "value": "choice1"
                },
                {
                  "text": "Choice 2",
                  "value": "choice2"
                }
              ]
            }
          ],
          "tags": [
            "tag1",
            "tag2"
          ],
          "types": [
            {
              "name": "AcceleratorType1",
              "struct": [
                {
                  "name": "typeOption1",
                  "label": "Type Option 1",
                  "description": "This is an option for the type",
                  "inputType": "text",
                  "dataType": "string",
                  "defaultValue": "default value",
                  "required": true
                }
              ]
            }
          ]
        },
        "engine": {
          "type": "Chain",
          "name": "engine",
          "applyTo": [
            "**/*.txt"
          ],
          "transformations": [
            {
              "type": "ReplaceText",
              "name": "replaceText",
              "regex": {
                "pattern": "old text",
                "with": "new text"
              },
              "someExtraProperty": "some extra value"
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on format keyword",
      "valid": false,
      "rust_error": "{\"type\":\"Chain\",\"name\":\"engine\",\"applyTo\":[\"**/*.txt\"],\"transformations\":[{\"type\":\"ReplaceText\",\"name\":\"replaceText\",\"regex\":{\"pattern\":\"[\",\"with\":\"new text\"}}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "'[' is not a 'regex'\n\nFailed validating 'format' in schema[6]['allOf'][0]['properties']['regex']['properties']['pattern']['allOf'][0]:\n    {'type': 'string', 'format': 'regex'}\n\nOn instance['regex']['pattern']:\n    '['",
      "data": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "accelerator": {
          "description": "A sample accelerator",
          "displayName": "Sample Accelerator",
          "iconUrl": "https://example.com/icon.png",
          "imports": [
            {
              "name": "fragment1",
              "expose": [
                {
                  "name": "option1",
                  "as": "acceleratorOption1"
                }
              ],
              "exposeTypes": [
                {
                  "name": "Type1",
                  "as": "AcceleratorType1"
                }
              ]
            }
          ],
          "options": [
            {
              "name": "acceleratorOption1",
              "label": "Accelerator Option 1",
              "description": "This is an option for the accelerator",
              "inputType": "text",
              "dataType": "string",
              "defaultValue": "default value",
              "required": true,
              "choices": [
                {
                  "text": "Choice 1",
                  "value": "choice1"
                },
                {
                  "text": "Choice 2",
                  "value": "choice2"
                }
              ]
            }
          ],
          "tags": [
            "tag1",
            "tag2"
          ],
          "types": [
            {
              "name": "AcceleratorType1",
              "struct": [
                {
                  "name": "typeOption1",
                  "label": "Type Option 1",
                  "description": "This is an option for the type",
                  "inputType": "text",
                  "dataType": "string",
                  "defaultValue": "default value",
                  "required": true
                }
              ]
            }
          ]
        },
        "engine": {
          "type": "Chain",
          "name": "engine",
          "applyTo": [
            "**/*.txt"
          ],
          "transformations": [
            {
              "type": "ReplaceText",
              "name": "replaceText",
              "regex": {
                "pattern": "[",
                "with": "new text"
              }
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['accelerator']['properties']['imports']['items']['properties']['name']:\n    {'type': 'string',\n     'title': 'name',\n     'description': 'The name of the fragment to import',\n     'minLength': 1}\n\nOn instance['accelerator']['imports'][0]['name']:\n    ''",
      "data": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "accelerator": {
          "description": "A sample accelerator",
          "displayName": "Sample Accelerator",
          "iconUrl": "https://example.com/icon.png",
          "imports": [
            {
              "name": "",
              "expose": [
                {
                  "name": "option1",
                  "as": "acceleratorOption1"
                }
              ],
              "exposeTypes": [
                {
                  "name": "Type1",
                  "as": "AcceleratorType1"
                }
              ]
            }
          ],
          "options": [
            {
              "name": "acceleratorOption1",
              "label": "Accelerator Option 1",
              "description": "This is an option for the accelerator",
              "inputType": "text",
              "dataType": "string",
              "defaultValue": "default value",
              "required": true,
              "choices": [
                {
                  "text": "Choice 1",
                  "value": "choice1"
                },
                {
                  "text": "Choice 2",
                  "value": "choice2"
                }
              ]
            }
          ],
          "tags": [
            "tag1",
            "tag2"
          ],
          "types": [
            {
              "name": "AcceleratorType1",
              "struct": [
                {
                  "name": "typeOption1",
                  "label": "Type Option 1",
                  "description": "This is an option for the type",
                  "inputType": "text",
                  "dataType": "string",
                  "defaultValue": "default value",
                  "required": true
                }
              ]
            }
          ]
        },
        "engine": {
          "type": "Chain",
          "name": "engine",
          "applyTo": [
            "**/*.txt"
          ],
          "transformations": [
            {
              "type": "ReplaceText",
              "name": "replaceText",
              "regex": {
                "pattern": "old text",
                "with": "new text"
              }
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"invalidDataType\" is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{'type': 'InvalidTransform', 'name': 'invalidTransform'} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema[1]['allOf'][0]['properties']['transformations']['items']:\n    {'anyOf': [{'$ref': '#/definitions/Loop-2'},\n               {'$ref': '#/definitions/Chain-2'},\n               {'$ref': '#/definitions/Provenance-2'},\n               {'$ref': '#/definitions/Exclude-2'},\n               {'$ref': '#/definitions/Include-2'},\n               {'$ref': '#/definitions/Combo-2'},\n               {'$ref': '#/definitions/ReplaceText-2'},\n               {'$ref': '#/definitions/InvokeFragment-2'},\n               {'$ref': '#/definitions/Merge-2'},\n               {'$ref': '#/definitions/OpenRewriteRecipe-2'},\n               {'$ref': '#/definitions/RewritePath-2'},\n               {'$ref': '#/definitions/UniquePath-2'},\n               {'$ref': '#/definitions/YTT-2'},\n               {'$ref': '#/definitions/Let-2'},\n               {'$ref': '#/definitions/UseEncoding-2'},\n               {'$ref': '#/def.. (126 more)",
      "data": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "accelerator": {
          "description": "A sample accelerator",
          "displayName": "Sample Accelerator",
          "iconUrl": "https://example.com/icon.png",
          "imports": [
            {
              "name": "fragment1",
              "expose": [
                {
                  "name": "option1",
                  "as": "acceleratorOption1"
                }
              ],
              "exposeTypes": [
                {
                  "name": "Type1",
                  "as": "AcceleratorType1"
                }
              ]
            }
          ],
          "options": [
            {
              "name": "acceleratorOption1",
              "label": "Accelerator Option 1",
              "description": "This is an option for the accelerator",
              "inputType": "text",
              "dataType": "string",
              "defaultValue": "default value",
              "required": true,
              "choices": [
                {
                  "text": "Choice 1",
                  "value": "choice1"
                },
                {
                  "text": "Choice 2",
                  "value": "choice2"
                }
              ]
            },
            {
              "name": "invalidOption",
              "label": "Invalid Option",
              "description": "This is an invalid option",
              "inputType": "invalidInputType",
              "dataType": "invalidDataType",
              "defaultValue": 123
            }
          ],
          "tags": [
            "tag1",
            "tag2"
          ],
          "types": [
            {
              "name": "AcceleratorType1",
              "struct": [
                {
                  "name": "typeOption1",
                  "label": "Type Option 1",
                  "description": "This is an option for the type",
                  "inputType": "text",
                  "dataType": "string",
                  "defaultValue": "default value",
                  "required": true
                }
              ]
            }
          ]
        },
        "engine": {
          "type": "Chain",
          "name": "engine",
          "applyTo": [
            "**/*.txt"
          ],
          "transformations": [
            {
              "type": "ReplaceText",
              "name": "replaceText",
              "regex": {
                "pattern": "old text",
                "with": "new text"
              }
            },
            {
              "type": "InvalidTransform",
              "name": "invalidTransform"
            }
          ]
        }
      }
    }
  ]
}