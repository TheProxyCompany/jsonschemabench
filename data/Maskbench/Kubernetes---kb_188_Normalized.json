{
  "description": "sample Kubernetes/kb_188_Normalized.json",
  "meta": {
    "full_size": 4437,
    "stripped_size": 1087,
    "features": [
      "$ref",
      "items"
    ],
    "raw_features": [
      "definitions",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:integer",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "definitions": {
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apiextensions-apiserver_pkg_apis_apiextensions_v1beta1_ServiceReference": {
        "description": "ServiceReference holds a reference to Service.legacy.k8s.io",
        "properties": {
          "name": {
            "description": "name is the name of the service. Required",
            "type": "string"
          },
          "namespace": {
            "description": "namespace is the namespace of the service. Required",
            "type": "string"
          },
          "path": {
            "description": "path is an optional URL path at which the webhook will be contacted.",
            "type": "string"
          },
          "port": {
            "_format": "int32",
            "description": "port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.",
            "type": "integer"
          }
        },
        "required": [
          "namespace",
          "name"
        ],
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apiextensions-apiserver_pkg_apis_apiextensions_v1beta1_WebhookClientConfig": {
        "description": "WebhookClientConfig contains the information to make a TLS connection with the webhook.",
        "properties": {
          "caBundle": {
            "_format": "byte",
            "description": "caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
            "type": "string"
          },
          "service": {
            "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apiextensions-apiserver_pkg_apis_apiextensions_v1beta1_ServiceReference",
            "description": "service is a reference to the service for this webhook. Either service or url must be specified.\n\nIf the webhook is running within the cluster, then you should use `service`."
          },
          "url": {
            "description": "url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.\n\nThe `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.\n\nPlease note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be \"https\"; the URL must begin with \"https://\".\n\nA path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.\n\nAttempting to use a user or basic auth e.g. \"user:password@\" is not allowed. Fragments (\"#...\") and query parameters (\"?...\") are not allowed, either.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "description": "CustomResourceConversion describes how to convert different versions of a CR.",
    "properties": {
      "conversionReviewVersions": {
        "description": "conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail. Defaults to `[\"v1beta1\"]`.",
        "items": {
          "type": [
            "string",
            "null"
          ]
        },
        "type": [
          "array",
          "null"
        ]
      },
      "strategy": {
        "description": "strategy specifies how custom resources are converted between versions. Allowed values are: - `None`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `Webhook`: API Server will call to an external webhook to do the conversion. Additional information\n  is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhookClientConfig to be set.",
        "type": [
          "string",
          "null"
        ]
      },
      "webhookClientConfig": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apiextensions-apiserver_pkg_apis_apiextensions_v1beta1_WebhookClientConfig",
        "description": "webhookClientConfig is the instructions for how to call the webhook if strategy is `Webhook`. Required when `strategy` is set to `Webhook`."
      }
    },
    "required": [
      "strategy"
    ],
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "strategy": "Webhook",
        "webhookClientConfig": {
          "service": {
            "name": "my-webhook-service",
            "namespace": "default",
            "path": "/convert",
            "port": 443
          }
        },
        "conversionReviewVersions ": [
          "v1beta1"
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"null\", \"string\"",
      "python_error": "123 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['conversionReviewVersions']['items']:\n    {'type': ['string', 'null']}\n\nOn instance['conversionReviewVersions'][0]:\n    123",
      "data": {
        "strategy": "Webhook",
        "webhookClientConfig": {
          "service": {
            "name": "my-webhook-service",
            "namespace": "default",
            "path": "/convert",
            "port": 443
          }
        },
        "conversionReviewVersions": [
          123
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"namespace\" is a required property",
      "python_error": "'namespace' is a required property\n\nFailed validating 'required' in schema['properties']['webhookClientConfig']['properties']['service']:\n    {'description': 'ServiceReference holds a reference to '\n                    'Service.legacy.k8s.io',\n     'properties': {'name': {'description': 'name is the name of the '\n                                            'service. Required',\n                             'type': 'string'},\n                    'namespace': {'description': 'namespace is the '\n                                                 'namespace of the '\n                                                 'service. Required',\n                                  'type': 'string'},\n                    'path': {'description': 'path is an optional URL path '\n                                            'at which the webhook will be '\n                                            'contacted.',\n                             'type': 'string'},\n                    'port': {'_format': 'int32',\n                            .. (705 more)",
      "data": {
        "strategy": "Webhook",
        "webhookClientConfig": {
          "service": {
            "name": "my-webhook-service",
            "path": "/convert",
            "port": 443
          }
        },
        "conversionReviewVersions": [
          "v1beta1"
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"443\" is not of type \"integer\"",
      "python_error": "'443' is not of type 'integer'\n\nFailed validating 'type' in schema['properties']['webhookClientConfig']['properties']['service']['properties']['port']:\n    {'_format': 'int32',\n     'description': 'port is an optional service port at which the webhook '\n                    'will be contacted. `port` should be a valid port '\n                    'number (1-65535, inclusive). Defaults to 443 for '\n                    'backward compatibility.',\n     'type': 'integer'}\n\nOn instance['webhookClientConfig']['service']['port']:\n    '443'",
      "data": {
        "strategy": "Webhook",
        "webhookClientConfig": {
          "service": {
            "name": "my-webhook-service",
            "namespace": "default",
            "path": "/convert",
            "port": "443"
          }
        },
        "conversionReviewVersions ": [
          "v1beta1"
        ]
      }
    }
  ]
}