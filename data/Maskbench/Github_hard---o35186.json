{
  "description": "sample Github_hard/o35186.json",
  "meta": {
    "full_size": 3828,
    "stripped_size": 3799,
    "features": [
      "$ref",
      "additionalProperties",
      "allOf",
      "enum",
      "items",
      "oneOf",
      "pattern",
      "patternProperties"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "type": "object",
    "$schema": "http://json-schema.org/draft-07/schema",
    "definitions": {
      "actionObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "exec": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/functionObject"
              }
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "baseStateNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "atomic",
              "compound",
              "parallel",
              "final",
              "history"
            ]
          },
          "order": {
            "$ref": "#/definitions/order"
          }
        },
        "required": [
          "id",
          "key",
          "type"
        ]
      },
      "compoundStateNode": {
        "allOf": [
          {
            "$ref": "#/definitions/baseStateNode"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "pattern": "compound"
              },
              "entry": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/actionObject"
                }
              },
              "exit": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/actionObject"
                }
              },
              "initial": {
                "type": "string"
              },
              "invoke": {
                "$ref": "#/definitions/invokeArray"
              },
              "on": {
                "$ref": "#/definitions/transitionsObject"
              },
              "states": {
                "$ref": "#/definitions/statesObject"
              }
            },
            "required": [
              "states"
            ]
          }
        ]
      },
      "parallelStateNode": {
        "allOf": [
          {
            "$ref": "#/definitions/baseStateNode"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "pattern": "parallel"
              },
              "entry": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/actionObject"
                }
              },
              "exit": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/actionObject"
                }
              },
              "invoke": {
                "$ref": "#/definitions/invokeArray"
              },
              "on": {
                "$ref": "#/definitions/transitionsObject"
              },
              "states": {
                "$ref": "#/definitions/statesObject"
              }
            },
            "required": [
              "states"
            ]
          }
        ]
      },
      "atomicStateNode": {
        "allOf": [
          {
            "$ref": "#/definitions/baseStateNode"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "pattern": "atomic"
              },
              "entry": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/actionObject"
                }
              },
              "exit": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/actionObject"
                }
              },
              "invoke": {
                "$ref": "#/definitions/invokeArray"
              },
              "on": {
                "$ref": "#/definitions/transitionsObject"
              }
            },
            "required": [
              "on"
            ]
          }
        ]
      },
      "historyStateNode": {
        "allOf": [
          {
            "$ref": "#/definitions/baseStateNode"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "pattern": "history"
              },
              "history": {
                "type": "string",
                "enum": [
                  "shallow",
                  "deep"
                ]
              }
            },
            "required": [
              "history"
            ]
          }
        ]
      },
      "finalStateNode": {
        "allOf": [
          {
            "$ref": "#/definitions/baseStateNode"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "pattern": "final"
              },
              "data": {
                "type": "object"
              }
            }
          }
        ]
      },
      "statesObject": {
        "type": "object",
        "patternProperties": {
          "^.*$": {
            "oneOf": [
              {
                "$ref": "#/definitions/atomicStateNode"
              },
              {
                "$ref": "#/definitions/compoundStateNode"
              },
              {
                "$ref": "#/definitions/parallelStateNode"
              },
              {
                "$ref": "#/definitions/historyStateNode"
              },
              {
                "$ref": "#/definitions/finalStateNode"
              }
            ]
          }
        }
      },
      "transitionsObject": {
        "type": "object",
        "patternProperties": {
          "^.*$": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "actions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/actionObject"
                  }
                },
                "cond": {
                  "type": "object"
                },
                "eventType": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                },
                "target": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "actions",
                "eventType",
                "source",
                "target"
              ]
            }
          }
        }
      },
      "invokeObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "src": {
            "type": "string"
          },
          "autoForward": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "type",
          "id",
          "src"
        ],
        "additionalProperties": false
      },
      "invokeArray": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/invokeObject"
        }
      },
      "functionObject": {
        "type": "object",
        "properties": {
          "$function": {
            "type": "string"
          }
        }
      },
      "order": {
        "type": "integer"
      }
    },
    "properties": {
      "id": {
        "title": "ID",
        "type": "string"
      },
      "initial": {
        "type": "string"
      },
      "key": {
        "type": "string"
      },
      "type": {
        "type": "string",
        "enum": [
          "compound",
          "parallel"
        ]
      },
      "context": {
        "type": "object"
      },
      "states": {
        "$ref": "#/definitions/statesObject"
      },
      "on": {
        "$ref": "#/definitions/transitionsObject"
      },
      "transitions": {
        "type": "array"
      },
      "entry": {
        "type": "array"
      },
      "exit": {
        "type": "array"
      },
      "order": {
        "$ref": "#/definitions/order"
      },
      "invoke": {
        "$ref": "#/definitions/invokeArray"
      },
      "version": {
        "type": "string"
      }
    },
    "required": [
      "id",
      "key",
      "type",
      "states"
    ]
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "id": "example",
        "initial": "start",
        "key": "example",
        "type": "compound",
        "context": {},
        "states": {
          "start": {
            "id": "start",
            "key": "start",
            "type": "atomic",
            "entry": [
              {
                "type": "log",
                "exec": "Starting the state machine"
              }
            ],
            "exit": [
              {
                "type": "log",
                "exec": "Exiting the state machine"
              }
            ],
            "on": {
              "done": [
                {
                  "actions": [
                    {
                      "type": "log",
                      "exec": "State machine is done"
                    }
                  ],
                  "cond": {},
                  "eventType": "done",
                  "source": "start",
                  "target": [
                    "end"
                  ]
                }
              ]
            }
          },
          "end": {
            "id": "end",
            "key": "end",
            "type": "final",
            "data": {}
          }
        },
        "on": {},
        "transitions": [],
        "entry": [],
        "exit": [],
        "order": 1,
        "invoke": [],
        "version": "1.0"
      }
    },
    {
      "description": "llama-70b generated negative; focus on allOf keyword",
      "valid": false,
      "rust_error": "{\"id\":\"start\",\"key\":\"start\",\"type\":\"compound\",\"entry\":[{\"type\":\"log\",\"exec\":\"Starting the state machine\"}],\"exit\":[{\"type\":\"log\",\"exec\":\"Exiting the state machine\"}],\"on\":{\"done\":[{\"actions\":[{\"type\":\"log\",\"exec\":\"State machine is done\"}],\"cond\":{},\"eventType\":\"done\",\"source\":\"start\",\"target\":[\"end\"]}]},\"initial\":\"start\"} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'id': 'start', 'key': 'start', 'type': 'compound', 'entry': [{'type': 'log', 'exec': 'Starting the state machine'}], 'exit': [{'type': 'log', 'exec': 'Exiting the state machine'}], 'on': {'done': [{'actions': [{'type': 'log', 'exec': 'State machine is done'}], 'cond': {}, 'eventType': 'done', 'source': 'start', 'target': ['end']}]}, 'initial': 'start'} is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['states']['patternProperties']['^.*$']:\n    {'oneOf': [{'$ref': '#/definitions/atomicStateNode'},\n               {'$ref': '#/definitions/compoundStateNode'},\n               {'$ref': '#/definitions/parallelStateNode'},\n               {'$ref': '#/definitions/historyStateNode'},\n               {'$ref': '#/definitions/finalStateNode'}]}\n\nOn instance['states']['start']:\n    {'id': 'start',\n     'key': 'start',\n     'type': 'compound',\n     'entry': [{'type': 'log', 'exec': 'Starting the state machine'}],\n     'exit': [{'type': 'log', 'exec': 'Exiting the state machine'}],.. (307 more)",
      "data": {
        "id": "example",
        "initial": "start",
        "key": "example",
        "type": "compound",
        "context": {},
        "states": {
          "start": {
            "id": "start",
            "key": "start",
            "type": "compound",
            "entry": [
              {
                "type": "log",
                "exec": "Starting the state machine"
              }
            ],
            "exit": [
              {
                "type": "log",
                "exec": "Exiting the state machine"
              }
            ],
            "on": {
              "done": [
                {
                  "actions": [
                    {
                      "type": "log",
                      "exec": "State machine is done"
                    }
                  ],
                  "cond": {},
                  "eventType": "done",
                  "source": "start",
                  "target": [
                    "end"
                  ]
                }
              ]
            },
            "initial": "start"
          },
          "end": {
            "id": "end",
            "key": "end",
            "type": "final",
            "data": {}
          }
        },
        "on": {},
        "transitions": [],
        "entry": [],
        "exit": [],
        "order": 1,
        "invoke": [],
        "version": "1.0"
      }
    },
    {
      "description": "llama-70b generated negative; focus on patternProperties keyword",
      "valid": false,
      "rust_error": "{\"id\":\"invalid\",\"key\":\"invalid\",\"type\":\"unsupported_type\",\"unsupported_property\":\"value\"} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'id': 'invalid', 'key': 'invalid', 'type': 'unsupported_type', 'unsupported_property': 'value'} is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['states']['patternProperties']['^.*$']:\n    {'oneOf': [{'$ref': '#/definitions/atomicStateNode'},\n               {'$ref': '#/definitions/compoundStateNode'},\n               {'$ref': '#/definitions/parallelStateNode'},\n               {'$ref': '#/definitions/historyStateNode'},\n               {'$ref': '#/definitions/finalStateNode'}]}\n\nOn instance['states']['invalid']:\n    {'id': 'invalid',\n     'key': 'invalid',\n     'type': 'unsupported_type',\n     'unsupported_property': 'value'}",
      "data": {
        "id": "example",
        "initial": "start",
        "key": "example",
        "type": "compound",
        "context": {},
        "states": {
          "start": {
            "id": "start",
            "key": "start",
            "type": "atomic",
            "entry": [
              {
                "type": "log",
                "exec": "Starting the state machine"
              }
            ],
            "exit": [
              {
                "type": "log",
                "exec": "Exiting the state machine"
              }
            ],
            "on": {
              "done": [
                {
                  "actions": [
                    {
                      "type": "log",
                      "exec": "State machine is done"
                    }
                  ],
                  "cond": {},
                  "eventType": "done",
                  "source": "start",
                  "target": [
                    "end"
                  ]
                }
              ]
            }
          },
          "end": {
            "id": "end",
            "key": "end",
            "type": "final",
            "data": {}
          },
          "invalid": {
            "id": "invalid",
            "key": "invalid",
            "type": "unsupported_type",
            "unsupported_property": "value"
          }
        },
        "on": {},
        "transitions": [],
        "entry": [],
        "exit": [],
        "order": 1,
        "invoke": [],
        "version": "1.0"
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "{\"id\":\"start\",\"key\":\"start\",\"type\":\"atomic\",\"entry\":[{\"type\":\"log\",\"exec\":123}],\"exit\":[{\"type\":\"log\",\"exec\":\"Exiting the state machine\"}],\"on\":{\"done\":[{\"actions\":[{\"type\":\"log\",\"exec\":\"State machine is done\"}],\"cond\":{},\"eventType\":\"done\",\"source\":\"start\",\"target\":[\"end\"]}]}} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'id': 'start', 'key': 'start', 'type': 'atomic', 'entry': [{'type': 'log', 'exec': 123}], 'exit': [{'type': 'log', 'exec': 'Exiting the state machine'}], 'on': {'done': [{'actions': [{'type': 'log', 'exec': 'State machine is done'}], 'cond': {}, 'eventType': 'done', 'source': 'start', 'target': ['end']}]}} is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['states']['patternProperties']['^.*$']:\n    {'oneOf': [{'$ref': '#/definitions/atomicStateNode'},\n               {'$ref': '#/definitions/compoundStateNode'},\n               {'$ref': '#/definitions/parallelStateNode'},\n               {'$ref': '#/definitions/historyStateNode'},\n               {'$ref': '#/definitions/finalStateNode'}]}\n\nOn instance['states']['start']:\n    {'id': 'start',\n     'key': 'start',\n     'type': 'atomic',\n     'entry': [{'type': 'log', 'exec': 123}],\n     'exit': [{'type': 'log', 'exec': 'Exiting the state machine'}],\n     'on': {'done': [{'actions': [{'type': 'log',\n                       .. (208 more)",
      "data": {
        "id": "example",
        "initial": "start",
        "key": "example",
        "type": "compound",
        "context": {},
        "states": {
          "start": {
            "id": "start",
            "key": "start",
            "type": "atomic",
            "entry": [
              {
                "type": "log",
                "exec": 123
              }
            ],
            "exit": [
              {
                "type": "log",
                "exec": "Exiting the state machine"
              }
            ],
            "on": {
              "done": [
                {
                  "actions": [
                    {
                      "type": "log",
                      "exec": "State machine is done"
                    }
                  ],
                  "cond": {},
                  "eventType": "done",
                  "source": "start",
                  "target": [
                    "end"
                  ]
                }
              ]
            }
          },
          "end": {
            "id": "end",
            "key": "end",
            "type": "final",
            "data": {}
          }
        },
        "on": {},
        "transitions": [],
        "entry": [],
        "exit": [],
        "order": 1,
        "invoke": [],
        "version": "1.0"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"id\":\"start\",\"key\":\"start\",\"type\":\"compound\",\"entry\":[{\"type\":\"log\",\"exec\":\"Starting the state machine\"}],\"exit\":[{\"type\":\"log\",\"exec\":\"Exiting the state machine\"}],\"on\":{\"done\":[{\"actions\":[{\"type\":\"log\",\"exec\":\"State machine is done\"}],\"cond\":{},\"eventType\":\"done\",\"source\":\"start\",\"target\":[\"end\",1]}]}} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'id': 'start', 'key': 'start', 'type': 'compound', 'entry': [{'type': 'log', 'exec': 'Starting the state machine'}], 'exit': [{'type': 'log', 'exec': 'Exiting the state machine'}], 'on': {'done': [{'actions': [{'type': 'log', 'exec': 'State machine is done'}], 'cond': {}, 'eventType': 'done', 'source': 'start', 'target': ['end', 1]}]}} is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['states']['patternProperties']['^.*$']:\n    {'oneOf': [{'$ref': '#/definitions/atomicStateNode'},\n               {'$ref': '#/definitions/compoundStateNode'},\n               {'$ref': '#/definitions/parallelStateNode'},\n               {'$ref': '#/definitions/historyStateNode'},\n               {'$ref': '#/definitions/finalStateNode'}]}\n\nOn instance['states']['start']:\n    {'id': 'start',\n     'key': 'start',\n     'type': 'compound',\n     'entry': [{'type': 'log', 'exec': 'Starting the state machine'}],\n     'exit': [{'type': 'log', 'exec': 'Exiting the state machine'}],\n     'on': {'don.. (268 more)",
      "data": {
        "id": "example",
        "initial": "start",
        "key": "example",
        "type": "compound",
        "context": {},
        "states": {
          "start": {
            "id": "start",
            "key": "start",
            "type": "compound",
            "entry": [
              {
                "type": "log",
                "exec": "Starting the state machine"
              }
            ],
            "exit": [
              {
                "type": "log",
                "exec": "Exiting the state machine"
              }
            ],
            "on": {
              "done": [
                {
                  "actions": [
                    {
                      "type": "log",
                      "exec": "State machine is done"
                    }
                  ],
                  "cond": {},
                  "eventType": "done",
                  "source": "start",
                  "target": [
                    "end",
                    1
                  ]
                }
              ]
            }
          },
          "end": {
            "id": "end",
            "key": "end",
            "type": "final",
            "data": {}
          }
        },
        "on": {},
        "transitions": [],
        "entry": [],
        "exit": [],
        "order": 1,
        "invoke": [],
        "version": "1.0"
      }
    }
  ]
}