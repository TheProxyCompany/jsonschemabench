{
  "description": "sample Kubernetes/kb_115_Normalized.json",
  "meta": {
    "full_size": 2284,
    "stripped_size": 494,
    "features": [
      "$ref",
      "items"
    ],
    "raw_features": [
      "definitions",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "definitions": {
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_KeyToPath": {
        "description": "Maps a string key to a path within a volume.",
        "properties": {
          "key": {
            "description": "The key to project.",
            "type": "string"
          },
          "mode": {
            "_format": "int32",
            "description": "Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
            "type": "integer"
          },
          "path": {
            "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
            "type": "string"
          }
        },
        "required": [
          "key",
          "path"
        ],
        "type": "object"
      }
    },
    "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
    "properties": {
      "items": {
        "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
        "items": {
          "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_KeyToPath"
        },
        "type": [
          "array",
          "null"
        ]
      },
      "name": {
        "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
        "type": [
          "string",
          "null"
        ]
      },
      "optional": {
        "description": "Specify whether the ConfigMap or its keys must be defined",
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "items": [
          {
            "key": "key1",
            "path": "path1",
            "mode ": 511
          },
          {
            "key": "key2",
            "path": "path2"
          }
        ],
        "name": "example-configmap",
        "optional": false
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"string\" is not of types \"array\", \"null\"",
      "python_error": "'string' is not of type 'array', 'null'\n\nFailed validating 'type' in schema['properties']['items']:\n    {'description': 'If unspecified, each key-value pair in the Data field '\n                    'of the referenced ConfigMap will be projected into '\n                    'the volume as a file whose name is the key and '\n                    'content is the value. If specified, the listed keys '\n                    'will be projected into the specified paths, and '\n                    'unlisted keys will not be present. If a key is '\n                    'specified which is not present in the ConfigMap, the '\n                    'volume setup will error unless it is marked optional. '\n                    \"Paths must be relative and may not contain the '..' \"\n                    \"path or start with '..'.\",\n     'items': {'$ref': '#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_KeyToPath'},\n     'type': ['array', 'null']}\n\nOn instance['items']:\n    'string'",
      "data": {
        "items": "string",
        "name": "example-configmap",
        "optional": false
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"array\", \"null\"",
      "python_error": "123 is not of type 'array', 'null'\n\nFailed validating 'type' in schema['properties']['items']:\n    {'description': 'If unspecified, each key-value pair in the Data field '\n                    'of the referenced ConfigMap will be projected into '\n                    'the volume as a file whose name is the key and '\n                    'content is the value. If specified, the listed keys '\n                    'will be projected into the specified paths, and '\n                    'unlisted keys will not be present. If a key is '\n                    'specified which is not present in the ConfigMap, the '\n                    'volume setup will error unless it is marked optional. '\n                    \"Paths must be relative and may not contain the '..' \"\n                    \"path or start with '..'.\",\n     'items': {'$ref': '#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_KeyToPath'},\n     'type': ['array', 'null']}\n\nOn instance['items']:\n    123",
      "data": {
        "items": 123,
        "name": "example-configmap",
        "optional": false
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "items": [
          {
            "key": "key1",
            "mode": 420,
            "path": "path/to/key1"
          },
          {
            "key": "key2",
            "path": "path/to/key2"
          }
        ],
        "name": "my-config-map",
        "optional": false
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"array\", \"null\"",
      "python_error": "123 is not of type 'array', 'null'\n\nFailed validating 'type' in schema['properties']['items']:\n    {'description': 'If unspecified, each key-value pair in the Data field '\n                    'of the referenced ConfigMap will be projected into '\n                    'the volume as a file whose name is the key and '\n                    'content is the value. If specified, the listed keys '\n                    'will be projected into the specified paths, and '\n                    'unlisted keys will not be present. If a key is '\n                    'specified which is not present in the ConfigMap, the '\n                    'volume setup will error unless it is marked optional. '\n                    \"Paths must be relative and may not contain the '..' \"\n                    \"path or start with '..'.\",\n     'items': {'$ref': '#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_KeyToPath'},\n     'type': ['array', 'null']}\n\nOn instance['items']:\n    123",
      "data": {
        "items": 123,
        "name": "my-config-map",
        "optional": false
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"mode_value\" is not of type \"integer\"",
      "python_error": "'mode_value' is not of type 'integer'\n\nFailed validating 'type' in schema['properties']['items']['items']['properties']['mode']:\n    {'_format': 'int32',\n     'description': 'Optional: mode bits used to set permissions on this '\n                    'file. Must be an octal value between 0000 and 0777 or '\n                    'a decimal value between 0 and 511. YAML accepts both '\n                    'octal and decimal values, JSON requires decimal '\n                    'values for mode bits. If not specified, the volume '\n                    'defaultMode will be used. This might be in conflict '\n                    'with other options that affect the file mode, like '\n                    'fsGroup, and the result can be other mode bits set.',\n     'type': 'integer'}\n\nOn instance['items'][1]['mode']:\n    'mode_value'",
      "data": {
        "items": [
          {
            "key": "key1",
            "mode": 512,
            "path": "path/to/key1",
            "extraKey": "extraValue"
          },
          {
            "key": "key2",
            "path": "../path/to/key2",
            "mode": "mode_value"
          }
        ],
        "name": "my-config-map",
        "optional": false
      }
    }
  ]
}