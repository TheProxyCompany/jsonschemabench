{
  "description": "sample JsonSchemaStore/img-catapult-psp-1.0.0.json",
  "meta": {
    "full_size": 3925,
    "stripped_size": 1742,
    "features": [
      "$ref",
      "@minmaxLength",
      "additionalProperties",
      "pattern"
    ],
    "raw_features": [
      "$defs",
      "$id",
      "$schema",
      "_boolSchema",
      "maxLength",
      "properties",
      "required",
      "type",
      "type:boolean",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$defs": {
      "supportPackFile": {
        "description": "File within support pack",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "builtin",
          "path"
        ],
        "properties": {
          "builtin": {
            "description": "builtin=\"true\" means that a file path is relative to the platform directory within the SDK installation.builtin=\"false\" means the file path is relative to the top level of the unzipped package",
            "type": "boolean"
          },
          "path": {
            "description": "file path within zip file",
            "type": "string"
          }
        }
      },
      "supportPackDirectory": {
        "description": "Directory within support pack",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "description": "directory path within zip file",
            "type": "string"
          }
        }
      }
    },
    "$id": "https://json.schemastore.org/img-catapult-psp-1.0.0.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "description": "Used to validate Catapult Platform Support Pack (PSP) contents.yaml file, which provides an index of the files within the PSP",
    "properties": {
      "platform": {
        "description": "Catapult platform support file contents",
        "type": "object",
        "additionalProperties": false,
        "required": [
          "vendor",
          "name",
          "description",
          "buildConfig",
          "version",
          "license",
          "documentationFile",
          "coreDescriptionFile",
          "launchConfig"
        ],
        "properties": {
          "vendor": {
            "type": "string",
            "description": "Platform/device vendor name"
          },
          "name": {
            "type": "string",
            "description": "Name of platform - used to identify platform in IDE",
            "maxLength": 30
          },
          "description": {
            "type": "string",
            "description": "Full description of support pack"
          },
          "buildConfig": {
            "type": "string",
            "description": "Value of the PLATFORM macro definition used during build",
            "pattern": "^([A-Z]|[0-9]|_)+$"
          },
          "version": {
            "type": "string",
            "description": "Support pack version"
          },
          "license": {
            "type": "string",
            "description": "License text"
          },
          "documentationFile": {
            "$ref": "#/$defs/supportPackFile",
            "description": "Documentation file(s) - can be HTML or PDF"
          },
          "coreDescriptionFile": {
            "$ref": "#/$defs/supportPackFile",
            "description": "File containing description of core using IMG proprietary YAML format"
          },
          "peripheralRegisterDescriptionFile": {
            "$ref": "#/$defs/supportPackFile",
            "description": "File containing peripheral register information using CMSIS SVD XML format (see https://www.keil.com/pack/doc/CMSIS/SVD/html/svd_Format_pg.html)"
          },
          "openOCDConfigurationFile": {
            "$ref": "#/$defs/supportPackFile",
            "description": "File containing OpenOCD configuration (see https://openocd.org/doc-release/html/Config-File-Guidelines.html#Config-File-Guidelines)"
          },
          "launchConfig": {
            "type": "string",
            "description": "Launch configuration for platform",
            "pattern": "^(Alpine Model|Catapult Model|OpenOCD|Whisper|RemoteLinux)$"
          },
          "gdbAutoRunCommandString": {
            "type": "string",
            "description": "String with additional gdb commands to run to initiate connection to target"
          },
          "networkPortNumberForOCDConnections": {
            "type": "string",
            "description": "TCP/IP port number for OpenOCD connections.  Set to \"auto\" to automatically use any free port"
          },
          "isPlatformFPGA": {
            "type": "boolean",
            "description": "True only for FPGA platforms"
          },
          "fpgaBitFile": {
            "$ref": "#/$defs/supportPackFile",
            "description": "Bitfile for programming FPGA"
          },
          "fpgaProgConfigFile": {
            "$ref": "#/$defs/supportPackFile",
            "description": "OpenOCD config file for programming FPGA"
          },
          "traceSettingsString": {
            "type": "string",
            "description": "String with processor trace encoder settings required by the decoder"
          },
          "libsDirectory": {
            "$ref": "#/$defs/supportPackDirectory",
            "description": "Directory containing library files for use with the platform"
          },
          "headersDirectory": {
            "$ref": "#/$defs/supportPackDirectory",
            "description": "Directory containing header files for use with the platform"
          },
          "remoteHost": {
            "type": "string",
            "description": "Hostname or IP address for debug connection to remote machines"
          },
          "remoteUsername": {
            "type": "string",
            "description": "Username for debug connection to remote machines"
          }
        }
      }
    },
    "required": [
      "platform"
    ],
    "title": "JSON schema for Catapult PSP contents.yaml files",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "platform": {
          "vendor": "Example Vendor",
          "name": "Example Platform",
          "description": "This is an example platform support pack",
          "buildConfig": "EXAMPLE_PLATFORM",
          "version": "1.0.0",
          "license": "MIT License",
          "documentationFile": {
            "builtin": false,
            "path": "docs/platform_documentation.pdf"
          },
          "coreDescriptionFile": {
            "builtin": true,
            "path": "platform/core_description.yaml"
          },
          "peripheralRegisterDescriptionFile": {
            "builtin": false,
            "path": "docs/peripheral_registers.svd"
          },
          "openOCDConfigurationFile": {
            "builtin": true,
            "path": "platform/openocd_config.cfg"
          },
          "launchConfig": "OpenOCD",
          "gdbAutoRunCommandString": "target remote localhost:3333",
          "networkPortNumberForOCDConnections": "auto",
          "isPlatformFPGA": false,
          "traceSettingsString": "",
          "libsDirectory": {
            "path": "libs"
          },
          "headersDirectory": {
            "path": "include"
          },
          "remoteHost": "",
          "remoteUsername": ""
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on maxLength keyword",
      "valid": false,
      "rust_error": "\"This is a very long platform name that exceeds the maximum allowed length of 30 characters\" is longer than 30 characters",
      "python_error": "'This is a very long platform name that exceeds the maximum allowed length of 30 characters' is too long\n\nFailed validating 'maxLength' in schema['properties']['platform']['properties']['name']:\n    {'type': 'string',\n     'description': 'Name of platform - used to identify platform in IDE',\n     'maxLength': 30}\n\nOn instance['platform']['name']:\n    ('This is a very long platform name that exceeds the maximum allowed '\n     'length of 30 characters')",
      "data": {
        "platform": {
          "vendor": "Example Vendor",
          "name": "This is a very long platform name that exceeds the maximum allowed length of 30 characters",
          "description": "This is an example platform support pack",
          "buildConfig": "EXAMPLE_PLATFORM",
          "version": "1.0.0",
          "license": "MIT License",
          "documentationFile": {
            "builtin": false,
            "path": "docs/platform_documentation.pdf"
          },
          "coreDescriptionFile": {
            "builtin": true,
            "path": "platform/core_description.yaml"
          },
          "peripheralRegisterDescriptionFile": {
            "builtin": false,
            "path": "docs/peripheral_registers.svd"
          },
          "openOCDConfigurationFile": {
            "builtin": true,
            "path": "platform/openocd_config.cfg"
          },
          "launchConfig": "OpenOCD",
          "gdbAutoRunCommandString": "target remote localhost:3333",
          "networkPortNumberForOCDConnections": "auto",
          "isPlatformFPGA": false,
          "traceSettingsString": "",
          "libsDirectory": {
            "path": "libs"
          },
          "headersDirectory": {
            "path": "include"
          },
          "remoteHost": "",
          "remoteUsername": ""
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"example_platform\" does not match \"^([A-Z]|[0-9]|_)+$\"",
      "python_error": "'Invalid Launch Config' does not match '^(Alpine Model|Catapult Model|OpenOCD|Whisper|RemoteLinux)$'\n\nFailed validating 'pattern' in schema['properties']['platform']['properties']['launchConfig']:\n    {'type': 'string',\n     'description': 'Launch configuration for platform',\n     'pattern': '^(Alpine Model|Catapult '\n                'Model|OpenOCD|Whisper|RemoteLinux)$'}\n\nOn instance['platform']['launchConfig']:\n    'Invalid Launch Config'",
      "data": {
        "platform": {
          "vendor": "Example Vendor",
          "name": "Example Platform",
          "description": "This is an example platform support pack",
          "buildConfig": "example_platform",
          "version": "1.0.0",
          "license": "MIT License",
          "documentationFile": {
            "builtin": false,
            "path": "docs/platform_documentation.pdf"
          },
          "coreDescriptionFile": {
            "builtin": true,
            "path": "platform/core_description.yaml"
          },
          "peripheralRegisterDescriptionFile": {
            "builtin": false,
            "path": "docs/peripheral_registers.svd"
          },
          "openOCDConfigurationFile": {
            "builtin": true,
            "path": "platform/openocd_config.cfg"
          },
          "launchConfig": "Invalid Launch Config",
          "gdbAutoRunCommandString": "target remote localhost:3333",
          "networkPortNumberForOCDConnections": "auto",
          "isPlatformFPGA": false,
          "traceSettingsString": "",
          "libsDirectory": {
            "path": "libs"
          },
          "headersDirectory": {
            "path": "include"
          },
          "remoteHost": "",
          "remoteUsername": ""
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"example_platform\" does not match \"^([A-Z]|[0-9]|_)+$\"",
      "python_error": "Additional properties are not allowed ('Invalid: buildConfig should only contain uppercase letters, numbers, or underscores', 'Invalid: missing required property' were unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['platform']:\n    {'description': 'Catapult platform support file contents',\n     'type': 'object',\n     'additionalProperties': False,\n     'required': ['vendor',\n                  'name',\n                  'description',\n                  'buildConfig',\n                  'version',\n                  'license',\n                  'documentationFile',\n                  'coreDescriptionFile',\n                  'launchConfig'],\n     'properties': {'vendor': {'type': 'string',\n                               'description': 'Platform/device vendor '\n                                              'name'},\n                    'name': {'type': 'string',\n                             'description': 'Name of platform - used to '\n                                            'identify.. (8848 more)",
      "data": {
        "platform": {
          "vendor": "Example Vendor",
          "name": "Example Platform",
          "description": "This is an example platform support pack",
          "buildConfig": "example_platform",
          "Invalid: buildConfig should only contain uppercase letters, numbers, or underscores": "version",
          "Invalid: missing required property": "platform"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"example_platform\" does not match \"^([A-Z]|[0-9]|_)+$\"",
      "python_error": "'example_platform' does not match '^([A-Z]|[0-9]|_)+$'\n\nFailed validating 'pattern' in schema['properties']['platform']['properties']['buildConfig']:\n    {'type': 'string',\n     'description': 'Value of the PLATFORM macro definition used during '\n                    'build',\n     'pattern': '^([A-Z]|[0-9]|_)+$'}\n\nOn instance['platform']['buildConfig']:\n    'example_platform'",
      "data": {
        "platform": {
          "vendor": "Example Vendor",
          "name": "Example Platform",
          "description": "This is an example platform support pack",
          "buildConfig": "example_platform",
          "version": "1.0.0",
          "license": "MIT License",
          "documentationFile": {
            "builtin": false,
            "path": "docs/platform_documentation.pdf"
          },
          "coreDescriptionFile": {
            "builtin": true,
            "path": "platform/core_description.yaml"
          },
          "peripheralRegisterDescriptionFile": {
            "builtin": false,
            "path": "docs/peripheral_registers.svd"
          },
          "openOCDConfigurationFile": {
            "builtin": true,
            "path": "platform/openocd_config.cfg"
          },
          "launchConfig": "OpenOCD",
          "gdbAutoRunCommandString": "target remote localhost:3333",
          "networkPortNumberForOCDConnections": "auto",
          "isPlatformFPGA": false,
          "traceSettingsString": "",
          "libsDirectory": {
            "path": "libs"
          },
          "headersDirectory": {
            "path": "include"
          },
          "remoteHost": "",
          "remoteUsername": ""
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"example_platform\" does not match \"^([A-Z]|[0-9]|_)+$\"",
      "python_error": "Additional properties are not allowed ('Invalid: buildConfig should only contain uppercase letters, numbers, or underscores', 'Invalid: extra property', 'Invalid: missing required property' were unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['platform']:\n    {'description': 'Catapult platform support file contents',\n     'type': 'object',\n     'additionalProperties': False,\n     'required': ['vendor',\n                  'name',\n                  'description',\n                  'buildConfig',\n                  'version',\n                  'license',\n                  'documentationFile',\n                  'coreDescriptionFile',\n                  'launchConfig'],\n     'properties': {'vendor': {'type': 'string',\n                               'description': 'Platform/device vendor '\n                                              'name'},\n                    'name': {'type': 'string',\n                             'description': 'Name of platform - used to '\n                          .. (8927 more)",
      "data": {
        "platform": {
          "vendor": "Example Vendor",
          "name": "Example Platform",
          "description": "This is an example platform support pack",
          "buildConfig": "example_platform",
          "Invalid: buildConfig should only contain uppercase letters, numbers, or underscores": "version",
          "Invalid: missing required property": "fpgaBitFile",
          "Invalid: extra property": "extraProperty"
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "platform": {
          "vendor": "Example Vendor",
          "name": "Example Platform",
          "description": "This is an example platform support pack.",
          "buildConfig": "EXAMPLE_PLATFORM",
          "version": "1.0.0",
          "license": "MIT License",
          "documentationFile": {
            "builtin": false,
            "path": "docs/platform_documentation.pdf"
          },
          "coreDescriptionFile": {
            "builtin": true,
            "path": "platform/core_description.yaml"
          },
          "peripheralRegisterDescriptionFile": {
            "builtin": false,
            "path": "docs/peripheral_registers.svd"
          },
          "openOCDConfigurationFile": {
            "builtin": true,
            "path": "platform/openocd_config.cfg"
          },
          "launchConfig": "OpenOCD",
          "gdbAutoRunCommandString": "target remote localhost:3333",
          "networkPortNumberForOCDConnections": "auto",
          "isPlatformFPGA": false,
          "traceSettingsString": "",
          "libsDirectory": {
            "path": "libs"
          },
          "headersDirectory": {
            "path": "headers"
          },
          "remoteHost": "",
          "remoteUsername": ""
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"example-platform\" does not match \"^([A-Z]|[0-9]|_)+$\"",
      "python_error": "'example-platform' does not match '^([A-Z]|[0-9]|_)+$'\n\nFailed validating 'pattern' in schema['properties']['platform']['properties']['buildConfig']:\n    {'type': 'string',\n     'description': 'Value of the PLATFORM macro definition used during '\n                    'build',\n     'pattern': '^([A-Z]|[0-9]|_)+$'}\n\nOn instance['platform']['buildConfig']:\n    'example-platform'",
      "data": {
        "platform": {
          "vendor": "Example Vendor",
          "name": "Example Platform",
          "description": "This is an example platform support pack.",
          "buildConfig": "example-platform",
          "version": "1.0.0",
          "license": "MIT License",
          "documentationFile": {
            "builtin": false,
            "path": "docs/platform_documentation.pdf"
          },
          "coreDescriptionFile": {
            "builtin": true,
            "path": "platform/core_description.yaml"
          },
          "peripheralRegisterDescriptionFile": {
            "builtin": false,
            "path": "docs/peripheral_registers.svd"
          },
          "openOCDConfigurationFile": {
            "builtin": true,
            "path": "platform/openocd_config.cfg"
          },
          "launchConfig": "OpenOCD",
          "gdbAutoRunCommandString": "target remote localhost:3333",
          "networkPortNumberForOCDConnections": "auto",
          "isPlatformFPGA": false,
          "traceSettingsString": "",
          "libsDirectory": {
            "path": "libs"
          },
          "headersDirectory": {
            "path": "headers"
          },
          "remoteHost": "",
          "remoteUsername": ""
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on maxLength keyword",
      "valid": false,
      "rust_error": "\"Example Platform that is way too long and should cause issues with validators that don't support maxLength keyword\" is longer than 30 characters",
      "python_error": "\"Example Platform that is way too long and should cause issues with validators that don't support maxLength keyword\" is too long\n\nFailed validating 'maxLength' in schema['properties']['platform']['properties']['name']:\n    {'type': 'string',\n     'description': 'Name of platform - used to identify platform in IDE',\n     'maxLength': 30}\n\nOn instance['platform']['name']:\n    ('Example Platform that is way too long and should cause issues with '\n     \"validators that don't support maxLength keyword\")",
      "data": {
        "platform": {
          "vendor": "Example Vendor",
          "name": "Example Platform that is way too long and should cause issues with validators that don't support maxLength keyword",
          "description": "This is an example platform support pack.",
          "buildConfig": "EXAMPLE_PLATFORM",
          "version": "1.0.0",
          "license": "MIT License",
          "documentationFile": {
            "builtin": false,
            "path": "docs/platform_documentation.pdf"
          },
          "coreDescriptionFile": {
            "builtin": true,
            "path": "platform/core_description.yaml"
          },
          "peripheralRegisterDescriptionFile": {
            "builtin": false,
            "path": "docs/peripheral_registers.svd"
          },
          "openOCDConfigurationFile": {
            "builtin": true,
            "path": "platform/openocd_config.cfg"
          },
          "launchConfig": "OpenOCD",
          "gdbAutoRunCommandString": "target remote localhost:3333",
          "networkPortNumberForOCDConnections": "auto",
          "isPlatformFPGA": false,
          "traceSettingsString": "",
          "libsDirectory": {
            "path": "libs"
          },
          "headersDirectory": {
            "path": "headers"
          },
          "remoteHost": "",
          "remoteUsername": ""
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"example-platform\" does not match \"^([A-Z]|[0-9]|_)+$\"",
      "python_error": "'Custom Config' does not match '^(Alpine Model|Catapult Model|OpenOCD|Whisper|RemoteLinux)$'\n\nFailed validating 'pattern' in schema['properties']['platform']['properties']['launchConfig']:\n    {'type': 'string',\n     'description': 'Launch configuration for platform',\n     'pattern': '^(Alpine Model|Catapult '\n                'Model|OpenOCD|Whisper|RemoteLinux)$'}\n\nOn instance['platform']['launchConfig']:\n    'Custom Config'",
      "data": {
        "platform": {
          "vendor": "Example Vendor",
          "name": "Example Platform",
          "description": "This is an example platform support pack.",
          "buildConfig": "example-platform",
          "version": "1.0.0",
          "license": "MIT License",
          "documentationFile": {
            "builtin": false,
            "path": "docs/platform_documentation.pdf"
          },
          "coreDescriptionFile": {
            "builtin": true,
            "path": "platform/core_description.yaml"
          },
          "peripheralRegisterDescriptionFile": {
            "builtin": false,
            "path": "docs/peripheral_registers.svd"
          },
          "openOCDConfigurationFile": {
            "builtin": true,
            "path": "platform/openocd_config.cfg"
          },
          "launchConfig": "Custom Config",
          "gdbAutoRunCommandString": "target remote localhost:3333",
          "networkPortNumberForOCDConnections": "auto",
          "isPlatformFPGA": false,
          "traceSettingsString": "",
          "libsDirectory": {
            "path": "libs"
          },
          "headersDirectory": {
            "path": "headers"
          },
          "remoteHost": "",
          "remoteUsername": ""
        }
      }
    }
  ]
}