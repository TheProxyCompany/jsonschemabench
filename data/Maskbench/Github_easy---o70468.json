{
  "description": "sample Github_easy/o70468.json",
  "meta": {
    "full_size": 1148,
    "stripped_size": 401,
    "features": [
      "@minmaxInteger",
      "additionalProperties",
      "enum",
      "items"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "maximum",
      "minimum",
      "properties",
      "type",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "generateXAddressParameters",
    "type": "object",
    "properties": {
      "options": {
        "type": "object",
        "description": "Options to control how the address and secret are generated.",
        "properties": {
          "entropy": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255
            },
            "description": "The entropy to use to generate the seed. Must be an array of length 16 with values from 0-255 (16 bytes of entropy)"
          },
          "algorithm": {
            "type": "string",
            "enum": [
              "ecdsa-secp256k1",
              "ed25519"
            ],
            "description": "The digital signature algorithm to generate an address for. Can be `ecdsa-secp256k1` (default) or `ed25519`."
          },
          "test": {
            "type": "boolean",
            "description": "Specifies whether the address is intended for use on a test network such as Testnet or Devnet. If `true`, the address should only be used for testing, and will start with `T`. If `false`, the address should only be used on mainnet, and will start with `X`."
          },
          "includeClassicAddress": {
            "type": "boolean",
            "description": "Specifies whether the classic address should also be included in the returned payload."
          }
        },
        "additionalProperties": false
      }
    },
    "additionalProperties": false
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "options": {
          "entropy": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ],
          "algorithm": "ecdsa-secp256k1",
          "test": true,
          "includeClassicAddress": true
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword or maximum keyword",
      "valid": false,
      "rust_error": "-1 is less than the minimum of 0",
      "python_error": "-1 is less than the minimum of 0\n\nFailed validating 'minimum' in schema['properties']['options']['properties']['entropy']['items']:\n    {'type': 'integer', 'minimum': 0, 'maximum': 255}\n\nOn instance['options']['entropy'][0]:\n    -1",
      "data": {
        "options": {
          "entropy": [
            -1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16
          ],
          "algorithm": "ecdsa-secp256k1",
          "test": true,
          "includeClassicAddress": true
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword or maximum keyword",
      "valid": false,
      "rust_error": "256 is greater than the maximum of 255",
      "python_error": "256 is greater than the maximum of 255\n\nFailed validating 'maximum' in schema['properties']['options']['properties']['entropy']['items']:\n    {'type': 'integer', 'minimum': 0, 'maximum': 255}\n\nOn instance['options']['entropy'][15]:\n    256",
      "data": {
        "options": {
          "entropy": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            256
          ],
          "algorithm": "ecdsa-secp256k1",
          "test": true,
          "includeClassicAddress": true
        }
      }
    }
  ]
}