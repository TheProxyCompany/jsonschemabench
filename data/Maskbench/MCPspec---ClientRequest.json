{
  "description": "sample MCPspec/ClientRequest.json",
  "meta": {
    "full_size": 8872,
    "stripped_size": 4786,
    "features": [
      "$ref",
      "@siblingKeys",
      "additionalProperties",
      "additionalProperties:object",
      "anyOf",
      "const",
      "enum",
      "format",
      "format:uri",
      "format:uri-template"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:boolean",
      "type:integer",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$ref": "#/definitions/ClientRequest",
    "definitions": {
      "ClientRequest": {
        "anyOf": [
          {
            "$ref": "#/definitions/InitializeRequest"
          },
          {
            "$ref": "#/definitions/PingRequest"
          },
          {
            "$ref": "#/definitions/ListResourcesRequest"
          },
          {
            "$ref": "#/definitions/ReadResourceRequest"
          },
          {
            "$ref": "#/definitions/SubscribeRequest"
          },
          {
            "$ref": "#/definitions/UnsubscribeRequest"
          },
          {
            "$ref": "#/definitions/ListPromptsRequest"
          },
          {
            "$ref": "#/definitions/GetPromptRequest"
          },
          {
            "$ref": "#/definitions/ListToolsRequest"
          },
          {
            "$ref": "#/definitions/CallToolRequest"
          },
          {
            "$ref": "#/definitions/SetLevelRequest"
          },
          {
            "$ref": "#/definitions/CompleteRequest"
          }
        ]
      },
      "InitializeRequest": {
        "description": "This request is sent from the client to the server when it first connects, asking it to begin initialization.",
        "properties": {
          "method": {
            "const": "initialize",
            "type": "string"
          },
          "params": {
            "properties": {
              "capabilities": {
                "$ref": "#/definitions/ClientCapabilities"
              },
              "clientInfo": {
                "$ref": "#/definitions/Implementation"
              },
              "protocolVersion": {
                "description": "The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.",
                "type": "string"
              }
            },
            "required": [
              "capabilities",
              "clientInfo",
              "protocolVersion"
            ],
            "type": "object"
          }
        },
        "required": [
          "method",
          "params"
        ],
        "type": "object"
      },
      "ClientCapabilities": {
        "description": "Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.",
        "properties": {
          "experimental": {
            "additionalProperties": {
              "additionalProperties": true,
              "properties": {},
              "type": "object"
            },
            "description": "Experimental, non-standard capabilities that the client supports.",
            "type": "object"
          },
          "roots": {
            "description": "Present if the client supports listing roots.",
            "properties": {
              "listChanged": {
                "description": "Whether the client supports notifications for changes to the roots list.",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "sampling": {
            "additionalProperties": true,
            "description": "Present if the client supports sampling from an LLM.",
            "properties": {},
            "type": "object"
          }
        },
        "type": "object"
      },
      "Implementation": {
        "description": "Describes the name and version of an MCP implementation.",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "version"
        ],
        "type": "object"
      },
      "PingRequest": {
        "description": "A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.",
        "properties": {
          "method": {
            "const": "ping",
            "type": "string"
          },
          "params": {
            "additionalProperties": {},
            "properties": {
              "_meta": {
                "properties": {
                  "progressToken": {
                    "$ref": "#/definitions/ProgressToken",
                    "description": "If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications."
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "method"
        ],
        "type": "object"
      },
      "ProgressToken": {
        "description": "A progress token, used to associate progress notifications with the original request.",
        "type": [
          "string",
          "integer"
        ]
      },
      "ListResourcesRequest": {
        "description": "Sent from the client to request a list of resources the server has.",
        "properties": {
          "method": {
            "const": "resources/list",
            "type": "string"
          },
          "params": {
            "properties": {
              "cursor": {
                "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "method"
        ],
        "type": "object"
      },
      "ReadResourceRequest": {
        "description": "Sent from the client to the server, to read a specific resource URI.",
        "properties": {
          "method": {
            "const": "resources/read",
            "type": "string"
          },
          "params": {
            "properties": {
              "uri": {
                "description": "The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.",
                "format": "uri",
                "type": "string"
              }
            },
            "required": [
              "uri"
            ],
            "type": "object"
          }
        },
        "required": [
          "method",
          "params"
        ],
        "type": "object"
      },
      "SubscribeRequest": {
        "description": "Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.",
        "properties": {
          "method": {
            "const": "resources/subscribe",
            "type": "string"
          },
          "params": {
            "properties": {
              "uri": {
                "description": "The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.",
                "format": "uri",
                "type": "string"
              }
            },
            "required": [
              "uri"
            ],
            "type": "object"
          }
        },
        "required": [
          "method",
          "params"
        ],
        "type": "object"
      },
      "UnsubscribeRequest": {
        "description": "Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.",
        "properties": {
          "method": {
            "const": "resources/unsubscribe",
            "type": "string"
          },
          "params": {
            "properties": {
              "uri": {
                "description": "The URI of the resource to unsubscribe from.",
                "format": "uri",
                "type": "string"
              }
            },
            "required": [
              "uri"
            ],
            "type": "object"
          }
        },
        "required": [
          "method",
          "params"
        ],
        "type": "object"
      },
      "ListPromptsRequest": {
        "description": "Sent from the client to request a list of prompts and prompt templates the server has.",
        "properties": {
          "method": {
            "const": "prompts/list",
            "type": "string"
          },
          "params": {
            "properties": {
              "cursor": {
                "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "method"
        ],
        "type": "object"
      },
      "GetPromptRequest": {
        "description": "Used by the client to get a prompt provided by the server.",
        "properties": {
          "method": {
            "const": "prompts/get",
            "type": "string"
          },
          "params": {
            "properties": {
              "arguments": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Arguments to use for templating the prompt.",
                "type": "object"
              },
              "name": {
                "description": "The name of the prompt or prompt template.",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          }
        },
        "required": [
          "method",
          "params"
        ],
        "type": "object"
      },
      "ListToolsRequest": {
        "description": "Sent from the client to request a list of tools the server has.",
        "properties": {
          "method": {
            "const": "tools/list",
            "type": "string"
          },
          "params": {
            "properties": {
              "cursor": {
                "description": "An opaque token representing the current pagination position.\nIf provided, the server should return results starting after this cursor.",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "method"
        ],
        "type": "object"
      },
      "CallToolRequest": {
        "description": "Used by the client to invoke a tool provided by the server.",
        "properties": {
          "method": {
            "const": "tools/call",
            "type": "string"
          },
          "params": {
            "properties": {
              "arguments": {
                "additionalProperties": {},
                "type": "object"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          }
        },
        "required": [
          "method",
          "params"
        ],
        "type": "object"
      },
      "SetLevelRequest": {
        "description": "A request from the client to the server, to enable or adjust logging.",
        "properties": {
          "method": {
            "const": "logging/setLevel",
            "type": "string"
          },
          "params": {
            "properties": {
              "level": {
                "$ref": "#/definitions/LoggingLevel",
                "description": "The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/logging/message."
              }
            },
            "required": [
              "level"
            ],
            "type": "object"
          }
        },
        "required": [
          "method",
          "params"
        ],
        "type": "object"
      },
      "LoggingLevel": {
        "description": "The severity of a log message.\n\nThese map to syslog message severities, as specified in RFC-5424:\nhttps://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1",
        "enum": [
          "alert",
          "critical",
          "debug",
          "emergency",
          "error",
          "info",
          "notice",
          "warning"
        ],
        "type": "string"
      },
      "CompleteRequest": {
        "description": "A request from the client to the server, to ask for completion options.",
        "properties": {
          "method": {
            "const": "completion/complete",
            "type": "string"
          },
          "params": {
            "properties": {
              "argument": {
                "description": "The argument's information",
                "properties": {
                  "name": {
                    "description": "The name of the argument",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the argument to use for completion matching.",
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "type": "object"
              },
              "ref": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PromptReference"
                  },
                  {
                    "$ref": "#/definitions/ResourceReference"
                  }
                ]
              }
            },
            "required": [
              "argument",
              "ref"
            ],
            "type": "object"
          }
        },
        "required": [
          "method",
          "params"
        ],
        "type": "object"
      },
      "PromptReference": {
        "description": "Identifies a prompt.",
        "properties": {
          "name": {
            "description": "The name of the prompt or prompt template",
            "type": "string"
          },
          "type": {
            "const": "ref/prompt",
            "type": "string"
          }
        },
        "required": [
          "name",
          "type"
        ],
        "type": "object"
      },
      "ResourceReference": {
        "description": "A reference to a resource or resource template definition.",
        "properties": {
          "type": {
            "const": "ref/resource",
            "type": "string"
          },
          "uri": {
            "description": "The URI or URI template of the resource.",
            "format": "uri-template",
            "type": "string"
          }
        },
        "required": [
          "type",
          "uri"
        ],
        "type": "object"
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "method": "initialize",
        "params": {
          "capabilities": {
            "experimental": {
              "myCapability": {
                "version": "1.0"
              }
            },
            "roots": {
              "listChanged": true
            },
            "sampling": {
              "llmSampling": true
            }
          },
          "clientInfo": {
            "name": "MyClient",
            "version": "1.0"
          },
          "protocolVersion": "1.0"
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"method\":\"initialize\",\"params\":{\"capabilities\":{\"experimental\":{\"myCapability\":{\"version\":null}},\"roots\":{\"listChanged\":true},\"sampling\":{\"llmSampling\":true}},\"clientInfo\":{\"name\":123,\"version\":\"1.0\"},\"protocolVersion\":123}} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema[0]['properties']['params']['properties']['clientInfo']['properties']['name']:\n    {'type': 'string'}\n\nOn instance['params']['clientInfo']['name']:\n    123",
      "data": {
        "method": "initialize",
        "params": {
          "capabilities": {
            "experimental": {
              "myCapability": {
                "version": null
              }
            },
            "roots": {
              "listChanged": true
            },
            "sampling": {
              "llmSampling": true
            }
          },
          "clientInfo": {
            "name": 123,
            "version": "1.0"
          },
          "protocolVersion": 123
        }
      }
    }
  ]
}