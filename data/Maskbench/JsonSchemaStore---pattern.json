{
  "description": "sample JsonSchemaStore/pattern.json",
  "meta": {
    "full_size": 2357,
    "stripped_size": 1324,
    "features": [
      "@minmaxItems",
      "@minmaxLength",
      "@minmaxProperties",
      "additionalProperties",
      "items",
      "pattern",
      "patternProperties",
      "uniqueItems"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "id",
      "minItems",
      "minLength",
      "minProperties",
      "properties",
      "required",
      "type",
      "type:array",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "additionalProperties": false,
    "id": "https://json.schemastore.org/pattern.json",
    "properties": {
      "id": {
        "description": "Unique id of this pattern",
        "type": "string",
        "minLength": 1
      },
      "name": {
        "description": "Machine readable name of the pattern",
        "type": "string",
        "minLength": 1,
        "pattern": "^[a-z]+(?:-[a-z]+)*$"
      },
      "displayName": {
        "description": "Human readable name of the pattern",
        "type": "string",
        "minLength": 1
      },
      "version": {
        "description": "Semantic version of the pattern",
        "type": "string",
        "pattern": "^\\d+\\.\\d+\\.\\d+(-[a-z]*){0,1}$"
      },
      "versions": {
        "description": "Available semantic versions of the pattern",
        "type": "array",
        "minItems": 1,
        "items": {
          "description": "Semantic version of the pattern",
          "type": "string",
          "pattern": "^\\d+\\.\\d+\\.\\d+(-[a-z]*){0,1}$"
        }
      },
      "flag": {
        "description": "Stability flag of the pattern",
        "type": "string",
        "pattern": "^alpha|beta|rc|stable$"
      },
      "tags": {
        "description": "Array of tags describing the pattern",
        "type": "array",
        "minItems": 1,
        "items": {
          "description": "Tag describing the pattern",
          "type": "string",
          "minLength": 1
        },
        "uniqueItems": true
      },
      "data": {
        "description": "Custom data object supplied by user",
        "type": "object",
        "minProperties": 1
      },
      "meta": {
        "description": "Custom meta data object supplied by user",
        "type": "object",
        "minProperties": 1
      },
      "options": {
        "description": "Custom options object supplied by user",
        "type": "object",
        "minProperties": 1
      },
      "patterns": {
        "description": "Dependencies of the pattern",
        "type": "object",
        "minProperties": 1,
        "patternProperties": {
          "^.+$": {
            "type": "string",
            "pattern": "^(/)?([^/\u0000]+(/)?)+$"
          }
        }
      },
      "demoPatterns": {
        "description": "Dependencies of the pattern used for demo purposes",
        "minProperties": 1,
        "patternProperties": {
          "^.+$": {
            "type": "string",
            "pattern": "^(/)?([^/\u0000]+(/)?)+$"
          }
        }
      },
      "overrides": {
        "description": "Options for overriding of core pattern behaviour",
        "type": "object",
        "minProperties": 1,
        "properties": {
          "files": {
            "description": "Custom mapping between patternplate files and paths to use in exchange for this pattern",
            "type": "object",
            "minProperties": 1,
            "patternProperties": {
              "^.+$": {
                "type": "string",
                "pattern": "^(/)?([^/\u0000]+(/)?)+$"
              }
            }
          },
          "demo": {
            "description": "Custom url to use as demo for this pattern",
            "type": "string"
          }
        }
      },
      "_patternplate": {
        "description": "Technical values saved by patternplate core",
        "type": "object"
      }
    },
    "required": [
      "name",
      "version"
    ],
    "title": "pattern manifest",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "id": "example-pattern-id",
        "name": "example-pattern",
        "displayName": "Example Pattern",
        "version": "1.0.0",
        "versions": [
          "1.0.0",
          "1.0.1",
          "1.1.0"
        ],
        "flag": "stable",
        "tags": [
          "example",
          "pattern"
        ],
        "data": {
          "key": "value"
        },
        "meta": {
          "author": "John Doe"
        },
        "options": {
          "option1": "value1"
        },
        "patterns": {
          "pattern1": "/path/to/pattern1",
          "pattern2": "/path/to/pattern2"
        },
        "demoPatterns": {
          "pattern1": "/path/to/demo/pattern1",
          "pattern2": "/path/to/demo/pattern2"
        },
        "overrides": {
          "files": {
            "file1": "/path/to/file1",
            "file2": "/path/to/file2"
          },
          "demo": "https://example.com/demo"
        },
        "_patternplate": {}
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "id": "example-pattern",
        "name": "example-pattern",
        "displayName": "Example Pattern",
        "version": "1.0.0",
        "versions": [
          "1.0.0",
          "1.0.1"
        ],
        "flag": "stable",
        "tags": [
          "example",
          "pattern"
        ],
        "data": {
          "customData": "This is custom data"
        },
        "meta": {
          "customMeta": "This is custom meta data"
        },
        "options": {
          "customOption": "This is a custom option"
        },
        "patterns": {
          "pattern1": "/path/to/pattern1",
          "pattern2": "/path/to/pattern2"
        },
        "demoPatterns": {
          "pattern1": "/path/to/demo/pattern1",
          "pattern2": "/path/to/demo/pattern2"
        },
        "overrides": {
          "files": {
            "file1": "/path/to/file1",
            "file2": "/path/to/file2"
          },
          "demo": "https://example.com/demo"
        },
        "_patternplate": {
          "technicalValue": "This is a technical value"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on uniqueItems keyword",
      "valid": false,
      "rust_error": "[\"example\",\"example\"] has non-unique elements",
      "python_error": "['example', 'example'] has non-unique elements\n\nFailed validating 'uniqueItems' in schema['properties']['tags']:\n    {'description': 'Array of tags describing the pattern',\n     'type': 'array',\n     'minItems': 1,\n     'items': {'description': 'Tag describing the pattern',\n               'type': 'string',\n               'minLength': 1},\n     'uniqueItems': True}\n\nOn instance['tags']:\n    ['example', 'example']",
      "data": {
        "id": "example-pattern",
        "name": "example-pattern",
        "displayName": "Example Pattern",
        "version": "1.0.0",
        "versions": [
          "1.0.0",
          "1.0.0"
        ],
        "flag": "stable",
        "tags": [
          "example",
          "example"
        ],
        "data": {
          "customData": "This is custom data"
        },
        "meta": {
          "customMeta": "This is custom meta data"
        },
        "options": {
          "customOption": "This is a custom option"
        },
        "patterns": {
          "pattern1": "/path/to/pattern1",
          "pattern2": "/path/to/pattern2"
        },
        "demoPatterns": {
          "pattern1": "/path/to/demo/pattern1",
          "pattern2": "/path/to/demo/pattern2"
        },
        "overrides": {
          "files": {
            "file1": "/path/to/file1",
            "file2": "/path/to/file2"
          },
          "demo": "https://example.com/demo"
        },
        "_patternplate": {
          "technicalValue": "This is a technical value"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minProperties keyword",
      "valid": false,
      "rust_error": "{} has less than 1 property",
      "python_error": "{} should be non-empty\n\nFailed validating 'minProperties' in schema['properties']['data']:\n    {'description': 'Custom data object supplied by user',\n     'type': 'object',\n     'minProperties': 1}\n\nOn instance['data']:\n    {}",
      "data": {
        "id": "example-pattern",
        "name": "example-pattern",
        "displayName": "Example Pattern",
        "version": "1.0.0",
        "versions": [
          "1.0.0",
          "1.0.1"
        ],
        "flag": "stable",
        "tags": [
          "example",
          "pattern"
        ],
        "data": {},
        "meta": {
          "customMeta": "This is custom meta data"
        },
        "options": {
          "customOption": "This is a custom option"
        },
        "patterns": {
          "pattern1": "/path/to/pattern1",
          "pattern2": "/path/to/pattern2"
        },
        "demoPatterns": {
          "pattern1": "/path/to/demo/pattern1",
          "pattern2": "/path/to/demo/pattern2"
        },
        "overrides": {
          "files": {
            "file1": "/path/to/file1",
            "file2": "/path/to/file2"
          },
          "demo": "https://example.com/demo"
        },
        "_patternplate": {
          "technicalValue": "This is a technical value"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['name']:\n    {'description': 'Machine readable name of the pattern',\n     'type': 'string',\n     'minLength': 1,\n     'pattern': '^[a-z]+(?:-[a-z]+)*$'}\n\nOn instance['name']:\n    ''",
      "data": {
        "id": "example-pattern",
        "name": "",
        "displayName": "Example Pattern",
        "version": "1.0.0",
        "versions": [
          "1.0.0",
          "1.0.1"
        ],
        "flag": "stable",
        "tags": [
          "example",
          "pattern"
        ],
        "data": {
          "customData": "This is custom data"
        },
        "meta": {
          "customMeta": "This is custom meta data"
        },
        "options": {
          "customOption": "This is a custom option"
        },
        "patterns": {
          "pattern1": "/path/to/pattern1",
          "pattern2": "/path/to/pattern2"
        },
        "demoPatterns": {
          "pattern1": "/path/to/demo/pattern1",
          "pattern2": "/path/to/demo/pattern2"
        },
        "overrides": {
          "files": {
            "file1": "/path/to/file1",
            "file2": "/path/to/file2"
          },
          "demo": "https://example.com/demo"
        },
        "_patternplate": {
          "technicalValue": "This is a technical value"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minItems keyword",
      "valid": false,
      "rust_error": "[] has less than 1 item",
      "python_error": "[] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['versions']:\n    {'description': 'Available semantic versions of the pattern',\n     'type': 'array',\n     'minItems': 1,\n     'items': {'description': 'Semantic version of the pattern',\n               'type': 'string',\n               'pattern': '^\\\\d+\\\\.\\\\d+\\\\.\\\\d+(-[a-z]*){0,1}$'}}\n\nOn instance['versions']:\n    []",
      "data": {
        "id": "example-pattern",
        "name": "example-pattern",
        "displayName": "Example Pattern",
        "version": "1.0.0",
        "versions": [],
        "flag": "stable",
        "tags": [
          "example",
          "pattern"
        ],
        "data": {
          "customData": "This is custom data"
        },
        "meta": {
          "customMeta": "This is custom meta data"
        },
        "options": {
          "customOption": "This is a custom option"
        },
        "patterns": {
          "pattern1": "/path/to/pattern1",
          "pattern2": "/path/to/pattern2"
        },
        "demoPatterns": {
          "pattern1": "/path/to/demo/pattern1",
          "pattern2": "/path/to/demo/pattern2"
        },
        "overrides": {
          "files": {
            "file1": "/path/to/file1",
            "file2": "/path/to/file2"
          },
          "demo": "https://example.com/demo"
        },
        "_patternplate": {
          "technicalValue": "This is a technical value"
        }
      }
    }
  ]
}