{
  "description": "sample Github_hard/o48493.json",
  "meta": {
    "full_size": 3684,
    "stripped_size": 1787,
    "features": [
      "items",
      "pattern"
    ],
    "raw_features": [
      "$id",
      "$schema",
      "definitions",
      "properties",
      "required",
      "type",
      "type:array",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$id": "http://pddl-schema.org/ptest.json",
    "type": "object",
    "definitions": {},
    "$schema": "http://json-schema.org/draft-07/schema#",
    "properties": {
      "defaultDomain": {
        "$id": "/properties/defaultDomain",
        "type": "string",
        "title": "The domain file, if common to many of the test cases. The 'domain' property in each individual test case can override this value.",
        "default": "",
        "examples": [
          "domain.pddl"
        ]
      },
      "defaultProblem": {
        "$id": "/properties/defaultProblem",
        "type": "string",
        "title": "The problem file, if common to many of the test cases. The 'problem' property in each individual test case can override this value.",
        "default": "",
        "examples": [
          "problem.pddl"
        ]
      },
      "defaultOptions": {
        "$id": "/properties/defaultOptions",
        "type": "string",
        "title": "The command line options. Set this to empty string to avoid getting asked every time.",
        "default": "",
        "examples": [
          ""
        ]
      },
      "cases": {
        "$id": "/properties/cases",
        "type": "array",
        "items": {
          "$id": "/properties/cases/items",
          "type": "object",
          "properties": {
            "label": {
              "$id": "/properties/cases/items/properties/label",
              "type": "string",
              "description": "The Label for the test case",
              "default": "Test XYZ",
              "examples": [
                "Test case number 1"
              ]
            },
            "description": {
              "$id": "/properties/cases/items/properties/description",
              "type": "string",
              "description": "The Description for the test case",
              "default": "Test XYZ...",
              "examples": [
                "Given ... when ... then ..."
              ]
            },
            "domain": {
              "$id": "/properties/cases/items/properties/domain",
              "type": "string",
              "description": "The Domain file. Use absolute path, or relative to this ptest manifest file.",
              "default": "domain.pddl",
              "examples": [
                "domain.pddl"
              ]
            },
            "problem": {
              "$id": "/properties/cases/items/properties/problem",
              "type": "string",
              "description": "The Problem file or template.",
              "default": "problem.pddl",
              "examples": [
                "problem.pddl"
              ]
            },
            "options": {
              "$id": "/properties/cases/items/properties/options",
              "type": "string",
              "description": "The command-line options",
              "default": "",
              "examples": [
                "-t 0.001"
              ]
            },
            "preProcess": {
              "$id": "/properties/cases/items/properties/preProcess",
              "description": "Pre-processor to execute before launching the planner.",
              "type": "object",
              "required": [
                "kind"
              ],
              "properties": {
                "kind": {
                  "$id": "/properties/cases/items/properties/preProcess/properties/kind",
                  "type": "string",
                  "description": "The kind of pre-processor.",
                  "pattern": "^(nunjucks|jinja2|python|command)$",
                  "default": "nunjucks",
                  "examples": [
                    "command",
                    "python",
                    "nunjucks",
                    "jinja2"
                  ]
                },
                "command": {
                  "$id": "/properties/cases/items/properties/preProcess/properties/command",
                  "type": "string",
                  "description": "The command to execute. Mandatory when 'kind' is set to 'command'.",
                  "default": "",
                  "examples": [
                    "shell",
                    "script.bat",
                    "program.exe"
                  ]
                },
                "script": {
                  "$id": "/properties/cases/items/properties/preProcess/properties/script",
                  "type": "string",
                  "description": "The python script to execute. Mandatory when 'kind' is set to 'python'.",
                  "default": "myscript.py",
                  "examples": [
                    "script.py"
                  ]
                },
                "args": {
                  "$id": "/properties/cases/items/properties/preProcess/properties/args",
                  "type": "array",
                  "description": "Command-line arguments",
                  "items": {
                    "$id": "/properties/cases/items/properties/preProcess/properties/args/items",
                    "type": "string",
                    "title": "The command-line argument",
                    "default": "",
                    "examples": [
                      "script.py",
                      "data.json"
                    ]
                  }
                },
                "data": {
                  "$id": "/properties/cases/items/properties/preProcess/properties/data",
                  "type": "string",
                  "description": "The JSON data file. This property is mandatory if 'kind' is set to 'jinja2' or 'nunjucks'",
                  "default": "case1.json",
                  "examples": [
                    "data.json"
                  ]
                }
              }
            },
            "expectedPlans": {
              "$id": "/properties/cases/items/properties/expectedPlans",
              "description": "Expected plans - put one or more plan file names here",
              "type": "array",
              "items": {
                "$id": "/properties/cases/items/properties/expectedPlans/items",
                "type": "string",
                "title": "Plan file name",
                "default": ""
              }
            }
          }
        }
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "defaultDomain": "domain.pddl",
        "defaultProblem": "problem.pddl",
        "defaultOptions": "-t 0.001",
        "cases": [
          {
            "label": "Test case number 1",
            "description": "Given ... when ... then ...",
            "domain": "domain.pddl",
            "problem": "problem.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "nunjucks",
              "data": "case1.json"
            },
            "expectedPlans": [
              "plan1.plan",
              "plan2.plan"
            ]
          },
          {
            "label": "Test case number 2",
            "description": "Given ... when ... then ...",
            "domain": "domain2.pddl",
            "problem": "problem2.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "python",
              "script": "script.py",
              "args": [
                "script.py",
                "data.json"
              ]
            },
            "expectedPlans": [
              "plan3.plan"
            ]
          },
          {
            "label": "Test case number 3",
            "description": "Given ... when ... then ...",
            "domain": "domain.pddl",
            "problem": "problem.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "command",
              "command": "shell"
            },
            "expectedPlans": [
              "plan4.plan"
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"invalidKind\" does not match \"^(nunjucks|jinja2|python|command)$\"",
      "python_error": "'invalidKind' does not match '^(nunjucks|jinja2|python|command)$'\n\nFailed validating 'pattern' in schema['properties']['cases']['items']['properties']['preProcess']['properties']['kind']:\n    {'$id': '/properties/cases/items/properties/preProcess/properties/kind',\n     'type': 'string',\n     'description': 'The kind of pre-processor.',\n     'pattern': '^(nunjucks|jinja2|python|command)$',\n     'default': 'nunjucks',\n     'examples': ['command', 'python', 'nunjucks', 'jinja2']}\n\nOn instance['cases'][0]['preProcess']['kind']:\n    'invalidKind'",
      "data": {
        "defaultDomain": "domain.pddl",
        "defaultProblem": "problem.pddl",
        "defaultOptions": "-t 0.001",
        "cases": [
          {
            "label": "Test case number 1",
            "description": "Given ... when ... then ...",
            "domain": "domain.pddl",
            "problem": "problem.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "invalidKind",
              "data": "case1.json"
            },
            "expectedPlans": [
              "plan1.plan",
              "plan2.plan"
            ]
          },
          {
            "label": "Test case number 2",
            "description": "Given ... when ... then ...",
            "domain": "domain2.pddl",
            "problem": "problem2.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "python",
              "script": "script.py",
              "args": [
                "script.py",
                "data.json"
              ]
            },
            "expectedPlans": [
              "plan3.plan"
            ]
          },
          {
            "label": "Test case number 3",
            "description": "Given ... when ... then ...",
            "domain": "domain.pddl",
            "problem": "problem.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "command",
              "command": "shell"
            },
            "expectedPlans": [
              "plan4.plan"
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "789 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['cases']['items']['properties']['preProcess']['properties']['command']:\n    {'$id': '/properties/cases/items/properties/preProcess/properties/command',\n     'type': 'string',\n     'description': \"The command to execute. Mandatory when 'kind' is set \"\n                    \"to 'command'.\",\n     'default': '',\n     'examples': ['shell', 'script.bat', 'program.exe']}\n\nOn instance['cases'][2]['preProcess']['command']:\n    789",
      "data": {
        "defaultDomain": "domain.pddl",
        "defaultProblem": "problem.pddl",
        "defaultOptions": "-t 0.001",
        "cases": [
          {
            "label": "Test case number 1",
            "description": "Given ... when ... then ...",
            "domain": "domain.pddl",
            "problem": "problem.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "jinja2",
              "data": 123
            },
            "expectedPlans": [
              "plan1.plan",
              "plan2.plan"
            ]
          },
          {
            "label": "Test case number 2",
            "description": "Given ... when ... then ...",
            "domain": "domain2.pddl",
            "problem": "problem2.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "python",
              "script": "script.py",
              "args": [
                "script.py",
                456
              ]
            },
            "expectedPlans": [
              "plan3.plan"
            ]
          },
          {
            "label": "Test case number 3",
            "description": "Given ... when ... then ...",
            "domain": "domain.pddl",
            "problem": "problem.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "command",
              "command": 789
            },
            "expectedPlans": [
              "plan4.plan"
            ]
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "defaultDomain": "domain.pddl",
        "defaultProblem": "problem.pddl",
        "defaultOptions": "-t 0.001",
        "cases": [
          {
            "label": "Test case number 1",
            "description": "Given a domain and a problem, when the planner is executed, then the expected plan is generated.",
            "domain": "domain.pddl",
            "problem": "problem.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "nunjucks",
              "data": "case1.json"
            },
            "expectedPlans": [
              "plan1.plan"
            ]
          },
          {
            "label": "Test case number 2",
            "description": "Given a domain and a problem, when the planner is executed with a different option, then the expected plan is generated.",
            "domain": "domain.pddl",
            "problem": "problem.pddl",
            "options": "-t 0.01",
            "preProcess": {
              "kind": "python",
              "script": "script.py",
              "args": [
                "script.py",
                "data.json"
              ]
            },
            "expectedPlans": [
              "plan2.plan"
            ]
          },
          {
            "label": "Test case number 3",
            "description": "Given a domain and a problem, when the planner is executed with a command pre-processor, then the expected plan is generated.",
            "domain": "domain.pddl",
            "problem": "problem.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "command",
              "command": "shell"
            },
            "expectedPlans": [
              "plan3.plan"
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "42 is not of type \"string\"",
      "python_error": "42 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['defaultDomain']:\n    {'$id': '/properties/defaultDomain',\n     'type': 'string',\n     'title': 'The domain file, if common to many of the test cases. The '\n              \"'domain' property in each individual test case can override \"\n              'this value.',\n     'default': '',\n     'examples': ['domain.pddl']}\n\nOn instance['defaultDomain']:\n    42",
      "data": {
        "defaultDomain": 42,
        "defaultProblem": "problem.pddl",
        "defaultOptions": "-t 0.001",
        "cases": [
          {
            "label": "Test case number 1",
            "description": "Given a domain and a problem, when the planner is executed, then the expected plan is generated.",
            "domain": "domain.pddl",
            "problem": "problem.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "unknown"
            },
            "expectedPlans": [
              "plan1.plan"
            ]
          },
          {
            "label": "Test case number 2",
            "description": "Given a domain and a problem, when the planner is executed with a different option, then the expected plan is generated.",
            "domain": "domain.pddl",
            "problem": "problem.pddl",
            "options": "-t 0.01",
            "preProcess": {
              "kind": "python",
              "args": [
                "script.py",
                "data.json"
              ]
            },
            "expectedPlans": [
              "plan2.plan"
            ]
          },
          {
            "label": "Test case number 3",
            "description": "Given a domain and a problem, when the planner is executed with a command pre-processor, then the expected plan is generated.",
            "domain": "domain.pddl",
            "problem": "problem.pddl",
            "options": "-t 0.001",
            "preProcess": {
              "kind": "command"
            },
            "expectedPlans": [
              "plan3.plan"
            ]
          }
        ]
      }
    }
  ]
}