{
  "description": "sample Github_hard/o6346.json",
  "meta": {
    "full_size": 11204,
    "stripped_size": 5484,
    "features": [
      "$ref",
      "@siblingKeys",
      "additionalProperties",
      "additionalProperties:object",
      "anyOf",
      "items"
    ],
    "raw_features": [
      "_boolSchema",
      "anyOf:trivial",
      "definitions",
      "properties",
      "type",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "anyOf": [
      {
        "$ref": "#/definitions/SkaffoldConfig"
      }
    ],
    "definitions": {
      "Artifact": {
        "anyOf": [
          {
            "additionalProperties": false,
            "preferredOrder": [
              "imageName",
              "workspace"
            ],
            "properties": {
              "imageName": {
                "type": "string"
              },
              "workspace": {
                "type": "string"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "imageName",
              "workspace",
              "docker"
            ],
            "properties": {
              "docker": {
                "$ref": "#/definitions/DockerArtifact"
              },
              "imageName": {
                "type": "string"
              },
              "workspace": {
                "type": "string"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "imageName",
              "workspace",
              "bazel"
            ],
            "properties": {
              "bazel": {
                "$ref": "#/definitions/BazelArtifact"
              },
              "imageName": {
                "type": "string"
              },
              "workspace": {
                "type": "string"
              }
            }
          }
        ],
        "description": "represents items that need to be built, along with the context in which they should be built.",
        "x-intellij-html-description": "represents items that need to be built, along with the context in which they should be built."
      },
      "BazelArtifact": {
        "additionalProperties": false,
        "preferredOrder": [
          "target"
        ],
        "properties": {
          "target": {
            "type": "string"
          }
        }
      },
      "BuildConfig": {
        "anyOf": [
          {
            "additionalProperties": false,
            "preferredOrder": [
              "artifacts",
              "tagPolicy"
            ],
            "properties": {
              "artifacts": {
                "items": {
                  "$ref": "#/definitions/Artifact"
                },
                "type": "array"
              },
              "tagPolicy": {
                "$ref": "#/definitions/TagPolicy"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "artifacts",
              "tagPolicy",
              "local"
            ],
            "properties": {
              "artifacts": {
                "items": {
                  "$ref": "#/definitions/Artifact"
                },
                "type": "array"
              },
              "local": {
                "$ref": "#/definitions/LocalBuild"
              },
              "tagPolicy": {
                "$ref": "#/definitions/TagPolicy"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "artifacts",
              "tagPolicy",
              "googleCloudBuild"
            ],
            "properties": {
              "artifacts": {
                "items": {
                  "$ref": "#/definitions/Artifact"
                },
                "type": "array"
              },
              "googleCloudBuild": {
                "$ref": "#/definitions/GoogleCloudBuild"
              },
              "tagPolicy": {
                "$ref": "#/definitions/TagPolicy"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "artifacts",
              "tagPolicy",
              "kaniko"
            ],
            "properties": {
              "artifacts": {
                "items": {
                  "$ref": "#/definitions/Artifact"
                },
                "type": "array"
              },
              "kaniko": {
                "$ref": "#/definitions/KanikoBuild"
              },
              "tagPolicy": {
                "$ref": "#/definitions/TagPolicy"
              }
            }
          }
        ],
        "description": "contains all the configuration for the build steps",
        "x-intellij-html-description": "contains all the configuration for the build steps"
      },
      "DateTimeTagger": {
        "additionalProperties": false,
        "description": "contains the configuration for the DateTime tagger.",
        "preferredOrder": [
          "format",
          "timezone"
        ],
        "properties": {
          "format": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "contains the configuration for the DateTime tagger."
      },
      "DeployConfig": {
        "anyOf": [
          {
            "additionalProperties": false
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "helm"
            ],
            "properties": {
              "helm": {
                "$ref": "#/definitions/HelmDeploy"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "kubectl"
            ],
            "properties": {
              "kubectl": {
                "$ref": "#/definitions/KubectlDeploy"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "kustomize"
            ],
            "properties": {
              "kustomize": {
                "$ref": "#/definitions/KustomizeDeploy"
              }
            }
          }
        ],
        "description": "contains all the configuration needed by the deploy steps",
        "x-intellij-html-description": "contains all the configuration needed by the deploy steps"
      },
      "DockerArtifact": {
        "additionalProperties": false,
        "preferredOrder": [
          "dockerfilePath",
          "buildArgs",
          "cacheFrom",
          "target"
        ],
        "properties": {
          "buildArgs": {
            "additionalProperties": {
              "type": "string"
            },
            "default": "{}",
            "type": "object"
          },
          "cacheFrom": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dockerfilePath": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        }
      },
      "EnvTemplateTagger": {
        "additionalProperties": false,
        "description": "contains the configuration for the envTemplate tagger.",
        "preferredOrder": [
          "template"
        ],
        "properties": {
          "template": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "contains the configuration for the envTemplate tagger."
      },
      "GitTagger": {
        "description": "contains the configuration for the git tagger.",
        "x-intellij-html-description": "contains the configuration for the git tagger."
      },
      "GoogleCloudBuild": {
        "additionalProperties": false,
        "description": "contains the fields needed to do a remote build on Google Cloud Build.",
        "preferredOrder": [
          "projectId",
          "diskSizeGb",
          "machineType",
          "timeout",
          "dockerImage"
        ],
        "properties": {
          "diskSizeGb": {
            "type": "integer"
          },
          "dockerImage": {
            "type": "string"
          },
          "machineType": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "timeout": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "contains the fields needed to do a remote build on Google Cloud Build."
      },
      "HelmConventionConfig": {
        "description": "represents image config in the syntax of image.repository and image.tag",
        "x-intellij-html-description": "represents image config in the syntax of image.repository and image.tag"
      },
      "HelmDeploy": {
        "additionalProperties": false,
        "description": "contains the configuration needed for deploying with helm",
        "preferredOrder": [
          "releases"
        ],
        "properties": {
          "releases": {
            "items": {
              "$ref": "#/definitions/HelmRelease"
            },
            "type": "array"
          }
        },
        "x-intellij-html-description": "contains the configuration needed for deploying with helm"
      },
      "HelmFQNConfig": {
        "additionalProperties": false,
        "description": "represents image config to use the FullyQualifiedImageName as param to set",
        "preferredOrder": [
          "property"
        ],
        "properties": {
          "property": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "represents image config to use the FullyQualifiedImageName as param to set"
      },
      "HelmImageStrategy": {
        "anyOf": [
          {
            "additionalProperties": false
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "fqn"
            ],
            "properties": {
              "fqn": {
                "$ref": "#/definitions/HelmFQNConfig"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "helm"
            ],
            "properties": {
              "helm": {
                "$ref": "#/definitions/HelmConventionConfig"
              }
            }
          }
        ]
      },
      "HelmPackaged": {
        "additionalProperties": false,
        "description": "represents parameters for packaging helm chart.",
        "preferredOrder": [
          "version",
          "appVersion"
        ],
        "properties": {
          "appVersion": {
            "description": "set the appVersion on the chart to this version",
            "type": "string",
            "x-intellij-html-description": "set the appVersion on the chart to this version"
          },
          "version": {
            "description": "sets the version on the chart to this semver version.",
            "type": "string",
            "x-intellij-html-description": "sets the version on the chart to this semver version."
          }
        },
        "x-intellij-html-description": "represents parameters for packaging helm chart."
      },
      "HelmRelease": {
        "additionalProperties": false,
        "preferredOrder": [
          "name",
          "chartPath",
          "valuesFiles",
          "values",
          "namespace",
          "version",
          "setValues",
          "setValueTemplates",
          "wait",
          "recreatePods",
          "overrides",
          "packaged",
          "imageStrategy"
        ],
        "properties": {
          "chartPath": {
            "type": "string"
          },
          "imageStrategy": {
            "$ref": "#/definitions/HelmImageStrategy"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "overrides": {},
          "packaged": {
            "$ref": "#/definitions/HelmPackaged"
          },
          "recreatePods": {
            "default": "false",
            "type": "boolean"
          },
          "setValueTemplates": {
            "additionalProperties": {
              "type": "string"
            },
            "default": "{}",
            "type": "object"
          },
          "setValues": {
            "additionalProperties": {
              "type": "string"
            },
            "default": "{}",
            "type": "object"
          },
          "values": {
            "additionalProperties": {
              "type": "string"
            },
            "default": "{}",
            "type": "object"
          },
          "valuesFiles": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "type": "string"
          },
          "wait": {
            "default": "false",
            "type": "boolean"
          }
        }
      },
      "KanikoBuild": {
        "additionalProperties": false,
        "description": "contains the fields needed to do a on-cluster build using the kaniko image",
        "preferredOrder": [
          "buildContext",
          "pullSecret",
          "pullSecretName",
          "namespace",
          "timeout"
        ],
        "properties": {
          "buildContext": {
            "$ref": "#/definitions/KanikoBuildContext"
          },
          "namespace": {
            "type": "string"
          },
          "pullSecret": {
            "type": "string"
          },
          "pullSecretName": {
            "type": "string"
          },
          "timeout": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "contains the fields needed to do a on-cluster build using the kaniko image"
      },
      "KanikoBuildContext": {
        "additionalProperties": false,
        "description": "contains the different fields available to specify a kaniko build context",
        "preferredOrder": [
          "gcsBucket"
        ],
        "properties": {
          "gcsBucket": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "contains the different fields available to specify a kaniko build context"
      },
      "KubectlDeploy": {
        "additionalProperties": false,
        "description": "contains the configuration needed for deploying with `kubectl apply`",
        "preferredOrder": [
          "manifests",
          "remoteManifests",
          "flags"
        ],
        "properties": {
          "flags": {
            "$ref": "#/definitions/KubectlFlags"
          },
          "manifests": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "remoteManifests": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "x-intellij-html-description": "contains the configuration needed for deploying with <code>kubectl apply</code>"
      },
      "KubectlFlags": {
        "additionalProperties": false,
        "description": "describes additional options flags that are passed on the command line to kubectl either on every command (Global), on creations (Apply) or deletions (Delete).",
        "preferredOrder": [
          "global",
          "apply",
          "delete"
        ],
        "properties": {
          "apply": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "delete": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "global": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "x-intellij-html-description": "describes additional options flags that are passed on the command line to kubectl either on every command (Global), on creations (Apply) or deletions (Delete)."
      },
      "KustomizeDeploy": {
        "additionalProperties": false,
        "preferredOrder": [
          "kustomizePath",
          "flags"
        ],
        "properties": {
          "flags": {
            "$ref": "#/definitions/KubectlFlags"
          },
          "kustomizePath": {
            "type": "string"
          }
        }
      },
      "LocalBuild": {
        "additionalProperties": false,
        "description": "contains the fields needed to do a build on the local docker daemon and optionally push to a repository.",
        "preferredOrder": [
          "skipPush",
          "useDockerCLI",
          "useBuildkit"
        ],
        "properties": {
          "skipPush": {
            "type": "boolean"
          },
          "useBuildkit": {
            "default": "false",
            "type": "boolean"
          },
          "useDockerCLI": {
            "default": "false",
            "type": "boolean"
          }
        },
        "x-intellij-html-description": "contains the fields needed to do a build on the local docker daemon and optionally push to a repository."
      },
      "Profile": {
        "additionalProperties": false,
        "description": "additional configuration that overrides default configuration when it is activated.",
        "preferredOrder": [
          "name",
          "build",
          "deploy"
        ],
        "properties": {
          "build": {
            "$ref": "#/definitions/BuildConfig"
          },
          "deploy": {
            "$ref": "#/definitions/DeployConfig"
          },
          "name": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "additional configuration that overrides default configuration when it is activated."
      },
      "ShaTagger": {
        "description": "contains the configuration for the SHA tagger.",
        "x-intellij-html-description": "contains the configuration for the SHA tagger."
      },
      "SkaffoldConfig": {
        "additionalProperties": false,
        "preferredOrder": [
          "apiVersion",
          "kind",
          "build",
          "deploy",
          "profiles"
        ],
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "build": {
            "$ref": "#/definitions/BuildConfig"
          },
          "deploy": {
            "$ref": "#/definitions/DeployConfig"
          },
          "kind": {
            "type": "string"
          },
          "profiles": {
            "items": {
              "$ref": "#/definitions/Profile"
            },
            "type": "array"
          }
        }
      },
      "TagPolicy": {
        "additionalProperties": false,
        "description": "contains all the configuration for the tagging step",
        "preferredOrder": [
          "gitCommit",
          "sha256",
          "envTemplate",
          "dateTime"
        ],
        "properties": {
          "dateTime": {
            "$ref": "#/definitions/DateTimeTagger"
          },
          "envTemplate": {
            "$ref": "#/definitions/EnvTemplateTagger"
          },
          "gitCommit": {
            "$ref": "#/definitions/GitTagger"
          },
          "sha256": {
            "$ref": "#/definitions/ShaTagger"
          }
        },
        "x-intellij-html-description": "contains all the configuration for the tagging step"
      }
    },
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "profiles": [
          {
            "name": "dev"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"profiles\":[{\"name\":\"dev\",\"additionalProperty\":\"someValue\"}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "Additional properties are not allowed ('additionalProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema[0]['properties']['profiles']['items']:\n    {'additionalProperties': False,\n     'description': 'additional configuration that overrides default '\n                    'configuration when it is activated.',\n     'preferredOrder': ['name', 'build', 'deploy'],\n     'properties': {'build': {'$ref': '#/definitions/BuildConfig'},\n                    'deploy': {'$ref': '#/definitions/DeployConfig'},\n                    'name': {'type': 'string'}},\n     'x-intellij-html-description': 'additional configuration that '\n                                    'overrides default configuration when '\n                                    'it is activated.'}\n\nOn instance['profiles'][0]:\n    {'name': 'dev', 'additionalProperty': 'someValue'}",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "profiles": [
          {
            "name": "dev",
            "additionalProperty": "someValue"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"build\":{\"artifacts\":[{\"imageName\":\"image1\",\"workspace\":\"workspace1\",\"docker\":{\"dockerfilePath\":\"Dockerfile1\",\"target\":\"target1\"},\"bazel\":{\"target\":\"target2\"}}]},\"profiles\":[{\"name\":\"dev\"}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{'artifacts': [{'imageName': 'image1', 'workspace': 'workspace1', 'docker': {'dockerfilePath': 'Dockerfile1', 'target': 'target1'}, 'bazel': {'target': 'target2'}}]} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema[0]['properties']['build']:\n    {'anyOf': [{'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'tagPolicy': {'$ref': '#/definitions/TagPolicy'}}},\n               {'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy', 'local'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'local': {'$ref': '#/definitions/LocalBuild'},\n                               'tagPolicy': {'$ref': '#/.. (1479 more)",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "build": {
          "artifacts": [
            {
              "imageName": "image1",
              "workspace": "workspace1",
              "docker": {
                "dockerfilePath": "Dockerfile1",
                "target": "target1"
              },
              "bazel": {
                "target": "target2"
              }
            }
          ]
        },
        "profiles": [
          {
            "name": "dev"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"profiles\":[{\"name\":123}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema[0]['properties']['profiles']['items']['properties']['name']:\n    {'type': 'string'}\n\nOn instance['profiles'][0]['name']:\n    123",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "profiles": [
          {
            "name": 123
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"build\":{\"artifacts\":[{\"imageName\":\"image1\",\"workspace\":\"workspace1\",\"docker\":{\"buildArgs\":{\"arg1\":\"value1\"},\"cacheFrom\":[\"image1\",\"image2\"],\"dockerfilePath\":\"Dockerfile\",\"target\":\"target1\"},\"bazel\":{\"target\":\"target2\"}}],\"tagPolicy\":{\"gitCommit\":{},\"sha256\":{},\"envTemplate\":{\"template\":\"template1\"},\"dateTime\":{\"format\":\"format1\",\"timezone\":\"timezone1\"}}},\"deploy\":{\"helm\":{\"releases\":[{\"name\":\"release1\",\"chartPath\":\"chartPath1\",\"valuesFiles\":[\"valuesFile1\"],\"values\":{\"value1\":\"value1\"},\"namespace\":\"namespace1\",\"version\":\"version1\",\"setValues\":{\"setValue1\":\"setValue1\"},\"setValueTemplates\":{\"setValueTemplate1\":\"setValueTemplate1\"},\"wait\":true,\"recreatePods\":true,\"overrides\":{},\"packaged\":{\"version\":\"version1\",\"appVersion\":\"appVersion1\"},\"imageStrategy\":{\"fqn\":{\"property\":\"property1\"},\"helm\":{}}}]}},\"profiles\":[{\"name\":\"dev\"}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{'artifacts': [{'imageName': 'image1', 'workspace': 'workspace1', 'docker': {'buildArgs': {'arg1': 'value1'}, 'cacheFrom': ['image1', 'image2'], 'dockerfilePath': 'Dockerfile', 'target': 'target1'}, 'bazel': {'target': 'target2'}}], 'tagPolicy': {'gitCommit': {}, 'sha256': {}, 'envTemplate': {'template': 'template1'}, 'dateTime': {'format': 'format1', 'timezone': 'timezone1'}}} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema[0]['properties']['build']:\n    {'anyOf': [{'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'tagPolicy': {'$ref': '#/definitions/TagPolicy'}}},\n               {'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy', 'local'],\n                'properties': {'artifacts': {'items': {'$ref': '#/defini.. (2065 more)",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "build": {
          "artifacts": [
            {
              "imageName": "image1",
              "workspace": "workspace1",
              "docker": {
                "buildArgs": {
                  "arg1": "value1"
                },
                "cacheFrom": [
                  "image1",
                  "image2"
                ],
                "dockerfilePath": "Dockerfile",
                "target": "target1"
              },
              "bazel": {
                "target": "target2"
              }
            }
          ],
          "tagPolicy": {
            "gitCommit": {},
            "sha256": {},
            "envTemplate": {
              "template": "template1"
            },
            "dateTime": {
              "format": "format1",
              "timezone": "timezone1"
            }
          }
        },
        "deploy": {
          "helm": {
            "releases": [
              {
                "name": "release1",
                "chartPath": "chartPath1",
                "valuesFiles": [
                  "valuesFile1"
                ],
                "values": {
                  "value1": "value1"
                },
                "namespace": "namespace1",
                "version": "version1",
                "setValues": {
                  "setValue1": "setValue1"
                },
                "setValueTemplates": {
                  "setValueTemplate1": "setValueTemplate1"
                },
                "wait": true,
                "recreatePods": true,
                "overrides": {},
                "packaged": {
                  "version": "version1",
                  "appVersion": "appVersion1"
                },
                "imageStrategy": {
                  "fqn": {
                    "property": "property1"
                  },
                  "helm": {}
                }
              }
            ]
          }
        },
        "profiles": [
          {
            "name": "dev"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"profiles\":[{\"name\":\"dev\",\"unknownProperty\":\"someValue\"}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "Additional properties are not allowed ('unknownProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema[0]['properties']['profiles']['items']:\n    {'additionalProperties': False,\n     'description': 'additional configuration that overrides default '\n                    'configuration when it is activated.',\n     'preferredOrder': ['name', 'build', 'deploy'],\n     'properties': {'build': {'$ref': '#/definitions/BuildConfig'},\n                    'deploy': {'$ref': '#/definitions/DeployConfig'},\n                    'name': {'type': 'string'}},\n     'x-intellij-html-description': 'additional configuration that '\n                                    'overrides default configuration when '\n                                    'it is activated.'}\n\nOn instance['profiles'][0]:\n    {'name': 'dev', 'unknownProperty': 'someValue'}",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "profiles": [
          {
            "name": "dev",
            "unknownProperty": "someValue"
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "build": {
          "artifacts": [
            {
              "imageName": "my-image",
              "workspace": "my-workspace"
            }
          ],
          "tagPolicy": {
            "gitCommit": {}
          }
        },
        "deploy": {
          "kubectl": {
            "manifests": [
              "path/to/manifest1.yaml",
              "path/to/manifest2.yaml"
            ]
          }
        },
        "kind": "Config",
        "profiles": [
          {
            "build": {
              "artifacts": [
                {
                  "imageName": "my-dev-image",
                  "workspace": "my-dev-workspace"
                }
              ],
              "tagPolicy": {
                "envTemplate": {
                  "template": "{{.IMAGE_NAME}}"
                }
              }
            },
            "deploy": {
              "kubectl": {
                "manifests": [
                  "path/to/dev/manifest1.yaml",
                  "path/to/dev/manifest2.yaml"
                ]
              }
            },
            "name": "dev"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"build\":{\"artifacts\":[{\"imageName\":\"my-image\",\"workspace\":\"my-workspace\",\"docker\":{\"dockerfilePath\":\"path/to/Dockerfile\"},\"bazel\":{\"target\":\"my-target\"}}],\"tagPolicy\":{\"gitCommit\":{}}},\"deploy\":{\"kubectl\":{\"manifests\":[\"path/to/manifest1.yaml\",\"path/to/manifest2.yaml\"]}},\"profiles\":[{\"name\":\"dev\",\"build\":{\"artifacts\":[{\"imageName\":\"my-dev-image\",\"workspace\":\"my-dev-workspace\"}],\"tagPolicy\":{\"envTemplate\":{\"template\":\"{{.IMAGE_NAME}}\"}}},\"deploy\":{\"kubectl\":{\"manifests\":[\"path/to/dev/manifest1.yaml\",\"path/to/dev/manifest2.yaml\"]}}}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{'artifacts': [{'imageName': 'my-image', 'workspace': 'my-workspace', 'docker': {'dockerfilePath': 'path/to/Dockerfile'}, 'bazel': {'target': 'my-target'}}], 'tagPolicy': {'gitCommit': {}}} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema[0]['properties']['build']:\n    {'anyOf': [{'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'tagPolicy': {'$ref': '#/definitions/TagPolicy'}}},\n               {'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy', 'local'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'local': {'$ref': '#/definitions/LocalBuild'},\n                               '.. (1501 more)",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "build": {
          "artifacts": [
            {
              "imageName": "my-image",
              "workspace": "my-workspace",
              "docker": {
                "dockerfilePath": "path/to/Dockerfile"
              },
              "bazel": {
                "target": "my-target"
              }
            }
          ],
          "tagPolicy": {
            "gitCommit": {}
          }
        },
        "deploy": {
          "kubectl": {
            "manifests": [
              "path/to/manifest1.yaml",
              "path/to/manifest2.yaml"
            ]
          }
        },
        "profiles": [
          {
            "name": "dev",
            "build": {
              "artifacts": [
                {
                  "imageName": "my-dev-image",
                  "workspace": "my-dev-workspace"
                }
              ],
              "tagPolicy": {
                "envTemplate": {
                  "template": "{{.IMAGE_NAME}}"
                }
              }
            },
            "deploy": {
              "kubectl": {
                "manifests": [
                  "path/to/dev/manifest1.yaml",
                  "path/to/dev/manifest2.yaml"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"build\":{\"artifacts\":[{\"imageName\":\"my-image\",\"workspace\":\"my-workspace\",\"extra\":\"this is an extra property\"}],\"tagPolicy\":{\"gitCommit\":{}}},\"deploy\":{\"kubectl\":{\"manifests\":[\"path/to/manifest1.yaml\",\"path/to/manifest2.yaml\"]}},\"profiles\":[{\"name\":\"dev\",\"build\":{\"artifacts\":[{\"imageName\":\"my-dev-image\",\"workspace\":\"my-dev-workspace\"}],\"tagPolicy\":{\"envTemplate\":{\"template\":\"{{.IMAGE_NAME}}\",\"extra\":\"this is an extra property\"}}},\"deploy\":{\"kubectl\":{\"manifests\":[\"path/to/dev/manifest1.yaml\",\"path/to/dev/manifest2.yaml\"]}}}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{'artifacts': [{'imageName': 'my-dev-image', 'workspace': 'my-dev-workspace'}], 'tagPolicy': {'envTemplate': {'template': '{{.IMAGE_NAME}}', 'extra': 'this is an extra property'}}} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema[0]['properties']['profiles']['items']['properties']['build']:\n    {'anyOf': [{'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'tagPolicy': {'$ref': '#/definitions/TagPolicy'}}},\n               {'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy', 'local'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'local': {'$ref': '#/definitions/LocalBuild'},\n      .. (1528 more)",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "build": {
          "artifacts": [
            {
              "imageName": "my-image",
              "workspace": "my-workspace",
              "extra": "this is an extra property"
            }
          ],
          "tagPolicy": {
            "gitCommit": {}
          }
        },
        "deploy": {
          "kubectl": {
            "manifests": [
              "path/to/manifest1.yaml",
              "path/to/manifest2.yaml"
            ]
          }
        },
        "profiles": [
          {
            "name": "dev",
            "build": {
              "artifacts": [
                {
                  "imageName": "my-dev-image",
                  "workspace": "my-dev-workspace"
                }
              ],
              "tagPolicy": {
                "envTemplate": {
                  "template": "{{.IMAGE_NAME}}",
                  "extra": "this is an extra property"
                }
              }
            },
            "deploy": {
              "kubectl": {
                "manifests": [
                  "path/to/dev/manifest1.yaml",
                  "path/to/dev/manifest2.yaml"
                ]
              }
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"build\":{\"artifacts\":[{\"imageName\":123,\"Invalid type for imageName, should be string\":\"my-workspace\"}],\"tagPolicy\":{\"gitCommit\":{}}},\"deploy\":{\"kubectl\":{\"manifests\":[123,\"Invalid type for manifests, should be array of strings\",\"path/to/manifest2.yaml\"]}},\"profiles\":[{\"name\":\"dev\",\"build\":{\"artifacts\":[{\"imageName\":\"my-dev-image\",\"workspace\":\"my-dev-workspace\"},{\"Invalid property in Artifact, should not have extraProperties\":\"extraProperty\"}],\"tagPolicy\":{\"envTemplate\":{\"template\":\"{{.IMAGE_NAME}}\"}}},\"deploy\":{\"kubectl\":{\"manifests\":[\"path/to/dev/manifest1.yaml\",\"path/to/dev/manifest2.yaml\"]}}}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{'artifacts': [{'imageName': 'my-dev-image', 'workspace': 'my-dev-workspace'}, {'Invalid property in Artifact, should not have extraProperties': 'extraProperty'}], 'tagPolicy': {'envTemplate': {'template': '{{.IMAGE_NAME}}'}}} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema[0]['properties']['profiles']['items']['properties']['build']:\n    {'anyOf': [{'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'tagPolicy': {'$ref': '#/definitions/TagPolicy'}}},\n               {'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy', 'local'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'local'.. (1604 more)",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "build": {
          "artifacts": [
            {
              "imageName": 123,
              "Invalid type for imageName, should be string": "my-workspace"
            }
          ],
          "tagPolicy": {
            "gitCommit": {}
          }
        },
        "deploy": {
          "kubectl": {
            "manifests": [
              123,
              "Invalid type for manifests, should be array of strings",
              "path/to/manifest2.yaml"
            ]
          }
        },
        "profiles": [
          {
            "name": "dev",
            "build": {
              "artifacts": [
                {
                  "imageName": "my-dev-image",
                  "workspace": "my-dev-workspace"
                },
                {
                  "Invalid property in Artifact, should not have extraProperties": "extraProperty"
                }
              ],
              "tagPolicy": {
                "envTemplate": {
                  "template": "{{.IMAGE_NAME}}"
                }
              }
            },
            "deploy": {
              "kubectl": {
                "manifests": [
                  "path/to/dev/manifest1.yaml",
                  "path/to/dev/manifest2.yaml"
                ]
              }
            }
          }
        ]
      }
    }
  ]
}