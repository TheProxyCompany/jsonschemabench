{
  "description": "sample Github_medium/o67465.json",
  "meta": {
    "full_size": 1964,
    "stripped_size": 1600,
    "features": [
      "$ref",
      "@minmaxItems",
      "@minmaxProperties",
      "additionalProperties",
      "additionalProperties:object",
      "anyOf",
      "items",
      "pattern",
      "patternProperties"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "minItems",
      "minProperties",
      "properties",
      "required",
      "type",
      "type:array",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "additionalProperties": false,
    "title": "Playbook syntax definition",
    "description": "Playbooks are documents which describe the exact set of steps required to successfully start and finish a given software release. When the Release Engine begins a deployment, the actions it takes come directly from playbooks. For more information: http://release-engine.readthedocs.org/en/latest/playbooks.html",
    "definitions": {
      "group": {
        "type": "string"
      },
      "name": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "hosts": {
        "type": "array",
        "minItems": 1,
        "items": {
          "type": "string"
        }
      },
      "steps": {
        "type": "array",
        "minItems": 1,
        "items": {
          "$ref": "#/definitions/step_types"
        }
      },
      "step_types": {
        "anyOf": [
          {
            "$ref": "#/definitions/step_string"
          },
          {
            "$ref": "#/definitions/step_object"
          }
        ]
      },
      "step_string": {
        "type": "string",
        "pattern": "^[\\w]+:{1}[A-Z][\\w]+$"
      },
      "step_object": {
        "type": "object",
        "patternProperties": {
          "^[\\w]+:{1}[A-Z][\\w]+$": {
            "type": "object",
            "properties": {
              "notify": {
                "$ref": "#/definitions/notify"
              }
            },
            "minProperties": 1
          }
        },
        "additionalProperties": false
      },
      "dynamic": {
        "type": "array",
        "items": {
          "type": "string",
          "minItems": 1
        }
      },
      "notify": {
        "type": "object",
        "properties": {
          "started": {
            "$ref": "#/definitions/notify_endpoints"
          },
          "completed": {
            "$ref": "#/definitions/notify_endpoints"
          },
          "failed": {
            "$ref": "#/definitions/notify_endpoints"
          }
        },
        "additionalProperties": false
      },
      "notify_endpoints": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "execution": {
        "type": "array",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "hosts",
            "steps",
            "description"
          ],
          "properties": {
            "hosts": {
              "$ref": "#/definitions/hosts"
            },
            "steps": {
              "$ref": "#/definitions/steps"
            },
            "preflight": {
              "$ref": "#/definitions/steps"
            },
            "description": {
              "$ref": "#/definitions/description"
            }
          }
        }
      }
    },
    "properties": {
      "execution": {
        "$ref": "#/definitions/execution"
      },
      "group": {
        "$ref": "#/definitions/group"
      },
      "name": {
        "$ref": "#/definitions/name"
      }
    },
    "required": [
      "execution",
      "name",
      "group"
    ]
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "execution": [
          {
            "hosts": [
              "host1",
              "host2"
            ],
            "steps": [
              "step1:RUN",
              {
                "step2:RUN": {
                  "notify": {
                    "started": {
                      "endpoint1": [
                        "http://example.com/started"
                      ]
                    },
                    "completed": {
                      "endpoint2": [
                        "http://example.com/completed"
                      ]
                    },
                    "failed": {
                      "endpoint3": [
                        "http://example.com/failed"
                      ]
                    }
                  }
                }
              }
            ],
            "preflight": [
              "preflight1:RUN"
            ],
            "description": "This is a description"
          }
        ],
        "group": "my_group",
        "name": "my_playbook"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "execution": [
          {
            "hosts": [
              "host1",
              "host2"
            ],
            "steps": [
              "STEP:Deploy",
              {
                "STEP:Deploy": {
                  "notify": {
                    "started": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    },
                    "completed": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    },
                    "failed": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    }
                  }
                }
              }
            ],
            "preflight": [
              "STEP:Preflight"
            ],
            "description": "This is a sample execution"
          }
        ],
        "group": "sample-group",
        "name": "sample-playbook"
      }
    },
    {
      "description": "llama-70b generated negative; focus on patternProperties keyword",
      "valid": false,
      "rust_error": "{\"STEP:Deploy\":{\"notify\":{\"started\":{\"email\":[\"user1@example.com\",\"user2@example.com\"]},\"completed\":{\"email\":[\"user1@example.com\",\"user2@example.com\"]},\"failed\":{\"email\":[\"user1@example.com\",\"user2@example.com\"]}}},\"STEP_invalid\":{\"invalidProperty\":\"invalidValue\"}} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "'STEP_invalid' does not match any of the regexes: '^[\\\\w]+:{1}[A-Z][\\\\w]+$'\n\nFailed validating 'additionalProperties' in schema[1]:\n    {'type': 'object',\n     'patternProperties': {'^[\\\\w]+:{1}[A-Z][\\\\w]+$': {'type': 'object',\n                                                       'properties': {'notify': {'$ref': '#/definitions/notify'}},\n                                                       'minProperties': 1}},\n     'additionalProperties': False}\n\nOn instance:\n    {'STEP:Deploy': {'notify': {'started': {'email': ['user1@example.com',\n                                                      'user2@example.com']},\n                                'completed': {'email': ['user1@example.com',\n                                                        'user2@example.com']},\n                                'failed': {'email': ['user1@example.com',\n                                                     'user2@example.com']}}},\n     'STEP_invalid': {'invalidProperty': 'invalidValue'}}",
      "data": {
        "execution": [
          {
            "hosts": [
              "host1",
              "host2"
            ],
            "steps": [
              "STEP:Deploy",
              {
                "STEP:Deploy": {
                  "notify": {
                    "started": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    },
                    "completed": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    },
                    "failed": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    }
                  }
                },
                "STEP_invalid": {
                  "invalidProperty": "invalidValue"
                }
              }
            ],
            "preflight": [
              "STEP:Preflight"
            ],
            "description": "This is a sample execution"
          }
        ],
        "group": "sample-group",
        "name": "sample-playbook"
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "{\"STEP:Deploy\":{\"notify\":{\"started\":{\"email\":[\"user1@example.com\",\"user2@example.com\"]},\"completed\":{\"email\":[\"user1@example.com\",\"user2@example.com\"]},\"failed\":{\"email\":[\"user1@example.com\",\"user2@example.com\"]},\"extraProperty\":\"extraValue\"}}} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "Additional properties are not allowed ('extraProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema[1]['patternProperties']['^[\\\\w]+:{1}[A-Z][\\\\w]+$']['properties']['notify']:\n    {'type': 'object',\n     'properties': {'started': {'$ref': '#/definitions/notify_endpoints'},\n                    'completed': {'$ref': '#/definitions/notify_endpoints'},\n                    'failed': {'$ref': '#/definitions/notify_endpoints'}},\n     'additionalProperties': False}\n\nOn instance['STEP:Deploy']['notify']:\n    {'started': {'email': ['user1@example.com', 'user2@example.com']},\n     'completed': {'email': ['user1@example.com', 'user2@example.com']},\n     'failed': {'email': ['user1@example.com', 'user2@example.com']},\n     'extraProperty': 'extraValue'}",
      "data": {
        "execution": [
          {
            "hosts": [
              "host1",
              "host2"
            ],
            "steps": [
              "STEP:Deploy",
              {
                "STEP:Deploy": {
                  "notify": {
                    "started": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    },
                    "completed": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    },
                    "failed": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    },
                    "extraProperty": "extraValue"
                  }
                }
              }
            ],
            "preflight": [
              "STEP:Preflight"
            ],
            "description": "This is a sample execution"
          }
        ],
        "group": "sample-group",
        "name": "sample-playbook"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minItems keyword",
      "valid": false,
      "rust_error": "[] has less than 1 item",
      "python_error": "[] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['execution']['items']['properties']['hosts']:\n    {'type': 'array', 'minItems': 1, 'items': {'type': 'string'}}\n\nOn instance['execution'][0]['hosts']:\n    []",
      "data": {
        "execution": [
          {
            "hosts": [],
            "steps": [
              "STEP:Deploy",
              {
                "STEP:Deploy": {
                  "notify": {
                    "started": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    },
                    "completed": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    },
                    "failed": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    }
                  }
                }
              }
            ],
            "preflight": [
              "STEP:Preflight"
            ],
            "description": "This is a sample execution"
          }
        ],
        "group": "sample-group",
        "name": "sample-playbook"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minProperties keyword",
      "valid": false,
      "rust_error": "{\"STEP:Deploy\":{}} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{} should be non-empty\n\nFailed validating 'minProperties' in schema[1]['patternProperties']['^[\\\\w]+:{1}[A-Z][\\\\w]+$']:\n    {'type': 'object',\n     'properties': {'notify': {'$ref': '#/definitions/notify'}},\n     'minProperties': 1}\n\nOn instance['STEP:Deploy']:\n    {}",
      "data": {
        "execution": [
          {
            "hosts": [
              "host1",
              "host2"
            ],
            "steps": [
              {
                "STEP:Deploy": {}
              }
            ],
            "preflight": [
              "STEP:Preflight"
            ],
            "description": "This is a sample execution"
          }
        ],
        "group": "sample-group",
        "name": "sample-playbook"
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "\"STEP:Deploy:Invalid\" is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "'STEP:Deploy:Invalid' does not match '^[\\\\w]+:{1}[A-Z][\\\\w]+$'\n\nFailed validating 'pattern' in schema[0]:\n    {'type': 'string', 'pattern': '^[\\\\w]+:{1}[A-Z][\\\\w]+$'}\n\nOn instance:\n    'STEP:Deploy:Invalid'",
      "data": {
        "execution": [
          {
            "hosts": [
              "host1",
              "host2"
            ],
            "steps": [
              "STEP:Deploy",
              {
                "STEP:Deploy": {
                  "notify": {
                    "started": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    },
                    "completed": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    },
                    "failed": {
                      "email": [
                        "user1@example.com",
                        "user2@example.com"
                      ]
                    }
                  }
                }
              },
              "STEP:Deploy",
              "STEP:Deploy:Invalid"
            ],
            "preflight": [
              "STEP:Preflight"
            ],
            "description": "This is a sample execution"
          }
        ],
        "group": "sample-group",
        "name": "sample-playbook"
      }
    }
  ]
}