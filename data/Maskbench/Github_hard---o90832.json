{
  "description": "sample Github_hard/o90832.json",
  "meta": {
    "full_size": 5055,
    "stripped_size": 4342,
    "features": [
      "$ref",
      "@minmaxInteger",
      "@siblingKeys",
      "additionalProperties",
      "additionalProperties:object",
      "allOf",
      "enum",
      "items",
      "oneOf"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "id",
      "maximum",
      "minimum",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "id": "http://thrift.apache.org/schema.json#",
    "description": "Schema for Apache Thrift protocol descriptors",
    "definitions": {
      "type-id": {
        "title": "Any type id (name)",
        "enum": [
          "void",
          "string",
          "bool",
          "byte",
          "i8",
          "i16",
          "i32",
          "i64",
          "double",
          "list",
          "set",
          "map",
          "union",
          "struct",
          "binary"
        ]
      },
      "base-type": {
        "title": "Base type schema",
        "type": "object",
        "properties": {
          "typeId": {
            "enum": [
              "void",
              "string",
              "bool",
              "byte",
              "i8",
              "i16",
              "i32",
              "i64",
              "double",
              "binary"
            ]
          }
        },
        "required": [
          "typeId"
        ]
      },
      "list-type": {
        "title": "List and set schema",
        "type": "object",
        "properties": {
          "typeId": {
            "enum": [
              "list",
              "set"
            ]
          },
          "elemTypeId": {
            "$ref": "#/definitions/type-id"
          },
          "elemType": {
            "$ref": "#/definitions/type-desc"
          }
        },
        "required": [
          "typeId",
          "elemTypeId"
        ]
      },
      "map-type": {
        "title": "Map schema",
        "type": "object",
        "properties": {
          "typeId": {
            "enum": [
              "map"
            ]
          },
          "keyTypeId": {
            "$ref": "#/definitions/type-id"
          },
          "keyType": {
            "$ref": "#/definitions/type-desc"
          },
          "valueTypeId": {
            "$ref": "#/definitions/type-id"
          },
          "valueType": {
            "$ref": "#/definitions/type-desc"
          }
        },
        "required": [
          "typeId",
          "keyTypeId",
          "valueTypeId"
        ]
      },
      "struct-type": {
        "title": "Struct, union and exception schema",
        "type": "object",
        "properties": {
          "typeId": {
            "enum": [
              "union",
              "struct",
              "exception"
            ]
          }
        },
        "required": [
          "typeId",
          "class"
        ]
      },
      "type-desc": {
        "title": "Type descriptor schema",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "typeId": {
                "type": "string"
              },
              "class": {
                "type": "string"
              }
            }
          },
          {
            "oneOf": [
              {
                "$ref": "#/definitions/base-type"
              },
              {
                "$ref": "#/definitions/list-type"
              },
              {
                "$ref": "#/definitions/map-type"
              },
              {
                "$ref": "#/definitions/struct-type"
              }
            ]
          }
        ]
      },
      "name-and-doc": {
        "title": "Name and documentation sub-schema",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "doc": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "enum": {
        "title": "Thrift 'enum' definition schema",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/name-and-doc"
          },
          {
            "required": [
              "members"
            ],
            "properties": {
              "members": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ]
                }
              }
            }
          }
        ]
      },
      "typedef": {
        "title": "Thrift typedef definition schema",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/name-and-doc"
          },
          {
            "properties": {
              "typeId": {
                "$ref": "#/definitions/type-id"
              },
              "type": {
                "$ref": "#/definitions/type-desc"
              }
            },
            "required": [
              "typeId"
            ]
          }
        ]
      },
      "constant": {
        "title": "Thrift constant definition schema",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/name-and-doc"
          },
          {
            "$ref": "#/definitions/type-desc"
          },
          {
            "properties": {
              "value": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "array"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            },
            "required": [
              "value"
            ]
          }
        ]
      },
      "field": {
        "title": "Thrift struct field definition schema",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/name-and-doc"
          },
          {
            "properties": {
              "key": {
                "type": "integer",
                "minimum": 1,
                "maximum": 65535
              },
              "required": {
                "enum": [
                  "required",
                  "optional",
                  "req_out"
                ]
              },
              "typeId": {
                "$ref": "#/definitions/type-id"
              },
              "type": {
                "$ref": "#/definitions/type-desc"
              },
              "default": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "array"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            },
            "required": [
              "key",
              "required"
            ]
          }
        ]
      },
      "struct": {
        "title": "Thrift struct definition schema",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/name-and-doc"
          },
          {
            "properties": {
              "isException": {
                "type": "boolean"
              },
              "isUnion": {
                "type": "boolean"
              },
              "fields": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/field"
                }
              }
            },
            "required": [
              "isException",
              "isUnion",
              "fields"
            ]
          }
        ]
      },
      "union": {
        "title": "Thrift union definition schema",
        "$ref": "#/definitions/struct"
      },
      "exception": {
        "title": "Thrift exception definition schema",
        "type": "object",
        "properties": {
          "key": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
          },
          "name": {
            "type": "string"
          },
          "typeId": {
            "enum": [
              "exception"
            ]
          },
          "type": {
            "$ref": "#/definitions/struct-type"
          }
        },
        "required": [
          "key",
          "name",
          "typeId"
        ]
      },
      "function": {
        "title": "Thrift service function definition schema",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/name-and-doc"
          },
          {
            "properties": {
              "oneway": {
                "type": "boolean"
              },
              "returnType": {
                "$ref": "#/definitions/type-desc"
              },
              "arguments": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/field"
                }
              },
              "exceptions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/exception"
                }
              }
            },
            "required": [
              "oneway",
              "arguments",
              "exceptions"
            ]
          }
        ]
      },
      "service": {
        "title": "Thrift service definition schema",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/name-and-doc"
          },
          {
            "properties": {
              "functions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/function"
                }
              }
            },
            "required": [
              "functions"
            ]
          }
        ]
      },
      "annotations": {
        "title": "Map of annotation names to values",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "type": "object",
    "required": [
      "name",
      "enums",
      "typedefs",
      "structs",
      "constants",
      "services"
    ],
    "properties": {
      "name": {
        "type": "string"
      },
      "includes": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "_uniqueItems": true
      },
      "namespaces": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "enums": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/enum"
        }
      },
      "typedefs": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/typedef"
        }
      },
      "structs": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/struct"
        }
      },
      "constants": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/constant"
        }
      },
      "services": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/service"
        }
      }
    },
    "additionalProperties": false
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "name": "ExampleThrift",
        "includes": [
          "other_thrift"
        ],
        "namespaces": {
          "java": "com.example.thrift"
        },
        "enums": [
          {
            "name": "Color",
            "doc": "Color enum",
            "members": [
              {
                "name": "RED",
                "value": 1
              },
              {
                "name": "GREEN",
                "value": 2
              },
              {
                "name": "BLUE",
                "value": 3
              }
            ]
          }
        ],
        "typedefs": [
          {
            "name": "MyString",
            "doc": "Typedef for string",
            "typeId": "string",
            "type": {
              "typeId": "string"
            }
          }
        ],
        "structs": [
          {
            "name": "Person",
            "doc": "Person struct",
            "isException": false,
            "isUnion": false,
            "fields": [
              {
                "name": "name",
                "doc": "Name field",
                "key": 1,
                "required": "required",
                "typeId": "string",
                "type": {
                  "typeId": "string"
                }
              },
              {
                "name": "age",
                "doc": "Age field",
                "key": 2,
                "required": "optional",
                "typeId": "i32",
                "type": {
                  "typeId": "i32"
                }
              }
            ]
          }
        ],
        "constants": [
          {
            "name": "PI",
            "doc": "Constant for pi",
            "typeId": "double",
            "value": 3.14159,
            "type": {
              "typeId": "double"
            }
          }
        ],
        "services": [
          {
            "name": "MyService",
            "doc": "My service",
            "functions": [
              {
                "name": "hello",
                "doc": "Hello function",
                "oneway": false,
                "returnType": {
                  "typeId": "string"
                },
                "arguments": [
                  {
                    "name": "name",
                    "doc": "Name argument",
                    "key": 1,
                    "required": "required",
                    "typeId": "string",
                    "type": {
                      "typeId": "string"
                    }
                  }
                ],
                "exceptions": []
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on allOf keyword",
      "valid": false,
      "rust_error": "\"class\" is a required property",
      "python_error": "'class' is a required property\n\nFailed validating 'required' in schema['properties']['services']['items']['allOf'][1]['properties']['functions']['items']['allOf'][1]['properties']['exceptions']['items']['properties']['type']:\n    {'title': 'Struct, union and exception schema',\n     'type': 'object',\n     'properties': {'typeId': {'enum': ['union', 'struct', 'exception']}},\n     'required': ['typeId', 'class']}\n\nOn instance['services'][0]['functions'][0]['exceptions'][0]['type']:\n    {'typeId': 'struct'}",
      "data": {
        "name": "ExampleThrift",
        "includes": [
          "other_thrift"
        ],
        "namespaces": {
          "java": "com.example.thrift"
        },
        "enums": [
          {
            "name": "Color",
            "doc": "Color enum",
            "members": [
              {
                "name": "RED",
                "value": 1
              },
              {
                "name": "GREEN",
                "value": 2
              },
              {
                "name": "BLUE",
                "value": 3
              }
            ]
          }
        ],
        "typedefs": [
          {
            "name": "MyString",
            "doc": "Typedef for string",
            "typeId": "string",
            "type": {
              "typeId": "string"
            }
          }
        ],
        "structs": [
          {
            "name": "Person",
            "doc": "Person struct",
            "isException": false,
            "isUnion": false,
            "fields": [
              {
                "name": "name",
                "doc": "Name field",
                "key": 1,
                "required": "required",
                "typeId": "string",
                "type": {
                  "typeId": "string"
                }
              },
              {
                "name": "age",
                "doc": "Age field",
                "key": 2,
                "required": "optional",
                "typeId": "i32",
                "type": {
                  "typeId": "i32"
                }
              }
            ]
          }
        ],
        "constants": [
          {
            "name": "PI",
            "doc": "Constant for pi",
            "typeId": "double",
            "value": 3.14159,
            "type": {
              "typeId": "double"
            }
          }
        ],
        "services": [
          {
            "name": "MyService",
            "doc": "My service",
            "functions": [
              {
                "name": "hello",
                "doc": "Hello function",
                "oneway": false,
                "returnType": {
                  "typeId": "string"
                },
                "arguments": [
                  {
                    "name": "name",
                    "doc": "Name argument",
                    "key": 1,
                    "required": "required",
                    "typeId": "string",
                    "type": {
                      "typeId": "string"
                    }
                  }
                ],
                "exceptions": [
                  {
                    "key": 1,
                    "name": "InvalidArgument",
                    "typeId": "exception",
                    "type": {
                      "typeId": "struct"
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword or maximum keyword",
      "valid": false,
      "rust_error": "0 is less than the minimum of 1",
      "python_error": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['structs']['items']['allOf'][1]['properties']['fields']['items']['allOf'][1]['properties']['key']:\n    {'type': 'integer', 'minimum': 1, 'maximum': 65535}\n\nOn instance['structs'][0]['fields'][0]['key']:\n    0",
      "data": {
        "name": "ExampleThrift",
        "includes": [
          "other_thrift"
        ],
        "namespaces": {
          "java": "com.example.thrift"
        },
        "enums": [
          {
            "name": "Color",
            "doc": "Color enum",
            "members": [
              {
                "name": "RED",
                "value": 1
              },
              {
                "name": "GREEN",
                "value": 2
              },
              {
                "name": "BLUE",
                "value": 3
              }
            ]
          }
        ],
        "typedefs": [
          {
            "name": "MyString",
            "doc": "Typedef for string",
            "typeId": "string",
            "type": {
              "typeId": "string"
            }
          }
        ],
        "structs": [
          {
            "name": "Person",
            "doc": "Person struct",
            "isException": false,
            "isUnion": false,
            "fields": [
              {
                "name": "name",
                "doc": "Name field",
                "key": 0,
                "required": "required",
                "typeId": "string",
                "type": {
                  "typeId": "string"
                }
              },
              {
                "name": "age",
                "doc": "Age field",
                "key": 2,
                "required": "optional",
                "typeId": "i32",
                "type": {
                  "typeId": "i32"
                }
              }
            ]
          }
        ],
        "constants": [
          {
            "name": "PI",
            "doc": "Constant for pi",
            "typeId": "double",
            "type": {
              "typeId": "double"
            },
            "value": 3.14159
          }
        ],
        "services": [
          {
            "name": "MyService",
            "doc": "My service",
            "functions": [
              {
                "name": "hello",
                "doc": "Hello function",
                "oneway": false,
                "returnType": {
                  "typeId": "string"
                },
                "arguments": [
                  {
                    "name": "name",
                    "doc": "Name argument",
                    "key": 1,
                    "required": "required",
                    "typeId": "string",
                    "type": {
                      "typeId": "string"
                    }
                  }
                ],
                "exceptions": []
              }
            ]
          }
        ]
      }
    }
  ]
}