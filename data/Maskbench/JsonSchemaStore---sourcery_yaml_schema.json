{
  "description": "sample JsonSchemaStore/sourcery_yaml_schema.json",
  "meta": {
    "full_size": 6082,
    "stripped_size": 3534,
    "features": [
      "$ref",
      "@minmaxLength",
      "additionalProperties",
      "additionalProperties:object",
      "anyOf",
      "enum",
      "format",
      "format:uri",
      "items",
      "pattern"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "allOf:trivial",
      "definitions",
      "id",
      "maxLength",
      "minLength",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "additionalProperties": false,
    "definitions": {
      "RuleType": {
        "title": "RuleType",
        "description": "An enumeration.",
        "enum": [
          "refactoring",
          "suggestion",
          "comment",
          "hover"
        ]
      },
      "PythonVersion": {
        "title": "PythonVersion",
        "type": "object",
        "properties": {
          "major": {
            "title": "Major",
            "type": "integer"
          },
          "minor": {
            "title": "Minor",
            "type": "integer"
          }
        },
        "required": [
          "major",
          "minor"
        ]
      },
      "RuleSettingsConfig": {
        "title": "RuleSettingsConfig",
        "type": "object",
        "properties": {
          "enable": {
            "title": "Enable",
            "default": [
              "default"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disable": {
            "title": "Disable",
            "description": "A list of rule IDs Sourcery will never suggest.",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rule_types": {
            "default": [
              "refactoring",
              "suggestion",
              "comment"
            ],
            "type": "array",
            "items": {
              "$ref": "#/definitions/RuleType"
            }
          },
          "python_version": {
            "title": "Python Version",
            "description": "A string specifying the lowest Python version your project supports. Sourcery will not suggest refactorings requiring a higher Python version.",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/PythonVersion"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "RuleLanguage": {
        "title": "RuleLanguage",
        "description": "An enumeration.",
        "enum": [
          "python",
          "java",
          "javascript",
          "typescript"
        ],
        "type": "string"
      },
      "PathsConfig": {
        "title": "PathsConfig",
        "type": "object",
        "properties": {
          "include": {
            "title": "Include",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "exclude": {
            "title": "Exclude",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "MatchRuleTestConfig": {
        "title": "MatchRuleTestConfig",
        "type": "object",
        "properties": {
          "match": {
            "title": "Match",
            "type": "string"
          },
          "expect": {
            "title": "Expect",
            "type": "string"
          }
        },
        "required": [
          "match"
        ],
        "additionalProperties": false
      },
      "NoMatchRuleTestConfig": {
        "title": "NoMatchRuleTestConfig",
        "type": "object",
        "properties": {
          "no-match": {
            "title": "No-Match",
            "type": "string"
          }
        },
        "required": [
          "no-match"
        ],
        "additionalProperties": false
      },
      "RuleConfig": {
        "title": "RuleConfig",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "maxLength": 88,
            "pattern": "^[A-Za-z][A-Za-z0-9-_/:]*$",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "pattern": {
            "title": "Pattern",
            "type": "string"
          },
          "language": {
            "default": "python",
            "allOf": [
              {
                "$ref": "#/definitions/RuleLanguage"
              }
            ]
          },
          "replacement": {
            "title": "Replacement",
            "type": "string"
          },
          "condition": {
            "title": "Condition",
            "type": "string"
          },
          "explanation": {
            "title": "Explanation",
            "type": "string"
          },
          "paths": {
            "$ref": "#/definitions/PathsConfig"
          },
          "tests": {
            "title": "Tests",
            "default": [],
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/definitions/MatchRuleTestConfig"
                },
                {
                  "$ref": "#/definitions/NoMatchRuleTestConfig"
                }
              ]
            }
          },
          "tags": {
            "title": "Tags",
            "default": [],
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 88,
              "pattern": "^[A-Za-z][A-Za-z0-9-_/:]*$"
            }
          }
        },
        "required": [
          "id",
          "description",
          "pattern"
        ],
        "additionalProperties": false
      },
      "MetricsConfig": {
        "title": "MetricsConfig",
        "type": "object",
        "properties": {
          "quality_threshold": {
            "title": "Quality Threshold",
            "default": 25.0,
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "RequestReview": {
        "title": "RequestReview",
        "type": "object",
        "properties": {
          "origin": {
            "title": "Origin",
            "default": "",
            "type": "string"
          },
          "forked": {
            "title": "Forked",
            "default": "",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GitHubConfig": {
        "title": "GitHubConfig",
        "type": "object",
        "properties": {
          "labels": {
            "title": "Labels",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ignore_labels": {
            "title": "Ignore Labels",
            "default": [
              "sourcery-ignore"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "request_review": {
            "title": "Request Review",
            "default": "author",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/RequestReview"
              }
            ]
          },
          "sourcery_branch": {
            "title": "Sourcery Branch",
            "default": "sourcery-dev/{base_branch}",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CloneDetectionConfig": {
        "title": "CloneDetectionConfig",
        "type": "object",
        "properties": {
          "min_lines": {
            "title": "Min Lines",
            "default": 3,
            "type": "integer"
          },
          "min_duplicates": {
            "title": "Min Duplicates",
            "default": 2,
            "type": "integer"
          },
          "identical_clones_only": {
            "title": "Identical Clones Only",
            "default": false,
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ProxyConfig": {
        "title": "ProxyConfig",
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "minLength": 1,
            "maxLength": 65536,
            "format": "uri",
            "type": "string"
          },
          "ssl_certs_file": {
            "title": "Ssl Certs File",
            "type": "string"
          },
          "no_ssl_verify": {
            "title": "No Ssl Verify",
            "default": false,
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    },
    "id": "https://json.schemastore.org/sourcery_yaml_schema.json",
    "properties": {
      "version": {
        "title": "Version",
        "description": "The schema version of this config file",
        "default": "1",
        "type": "string"
      },
      "ignore": {
        "title": "Ignore",
        "description": "A list of paths or files which Sourcery will ignore.",
        "default": [],
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "rule_settings": {
        "title": "Rule Settings",
        "default": {
          "enable": [
            "default"
          ],
          "disable": [],
          "include": [],
          "skip": [],
          "rule_types": [
            "refactoring",
            "suggestion",
            "comment"
          ],
          "python_version": null,
          "allow_adding_imports": false
        },
        "allOf": [
          {
            "$ref": "#/definitions/RuleSettingsConfig"
          }
        ]
      },
      "rules": {
        "title": "Rules",
        "description": "A list of custom rules Sourcery will include in its analysis.",
        "default": [],
        "type": "array",
        "items": {
          "$ref": "#/definitions/RuleConfig"
        }
      },
      "rule_tags": {
        "title": "Rule Tags",
        "description": "Additional rule tags.",
        "default": {},
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "metrics": {
        "title": "Metrics",
        "default": {
          "quality_threshold": 25
        },
        "allOf": [
          {
            "$ref": "#/definitions/MetricsConfig"
          }
        ]
      },
      "github": {
        "title": "Github",
        "default": {
          "labels": [],
          "ignore_labels": [
            "sourcery-ignore"
          ],
          "review_or_request_review": "author",
          "sourcery_branch": "sourcery-dev/{base_branch}"
        },
        "allOf": [
          {
            "$ref": "#/definitions/GitHubConfig"
          }
        ]
      },
      "clone_detection": {
        "title": "Clone Detection",
        "default": {
          "min_lines": 3,
          "min_duplicates": 2,
          "identical_clones_only": false
        },
        "allOf": [
          {
            "$ref": "#/definitions/CloneDetectionConfig"
          }
        ]
      },
      "proxy": {
        "title": "Proxy",
        "default": {
          "url": null,
          "ssl_certs_file": null,
          "no_ssl_verify": false
        },
        "allOf": [
          {
            "$ref": "#/definitions/ProxyConfig"
          }
        ]
      }
    },
    "title": "Sourcery YAML Schema",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "version": "1",
        "ignore": [
          "tests/",
          "venv/"
        ],
        "rule_settings": {
          "enable": [
            "default",
            "rule1",
            "rule2"
          ],
          "disable": [
            "rule3",
            "rule4"
          ],
          "rule_types": [
            "refactoring",
            "suggestion",
            "comment",
            "hover"
          ],
          "python_version": {
            "major": 3,
            "minor": 8
          }
        },
        "rules": [
          {
            "id": "rule1",
            "description": "Rule 1 description",
            "pattern": "pattern1",
            "replacement": "replacement1",
            "language": "python",
            "paths": {
              "include": [
                "src/"
              ],
              "exclude": [
                "src/tests/"
              ]
            },
            "tests": [
              {
                "match": "match1",
                "expect": "expect1"
              },
              {
                "no-match": "no-match1"
              }
            ],
            "tags": [
              "tag1",
              "tag2"
            ]
          },
          {
            "id": "rule2",
            "description": "Rule 2 description",
            "pattern": "pattern2",
            "replacement": "replacement2",
            "language": "python",
            "paths": {
              "include": [
                "src/"
              ],
              "exclude": [
                "src/tests/"
              ]
            },
            "tests": [
              {
                "match": "match2",
                "expect": "expect2"
              },
              {
                "no-match": "no-match2"
              }
            ],
            "tags": [
              "tag3",
              "tag4"
            ]
          }
        ],
        "rule_tags": {
          "tag1": [
            "rule1"
          ],
          "tag2": [
            "rule1"
          ],
          "tag3": [
            "rule2"
          ],
          "tag4": [
            "rule2"
          ]
        },
        "metrics": {
          "quality_threshold": 30
        },
        "github": {
          "labels": [
            "label1",
            "label2"
          ],
          "ignore_labels": [
            "sourcery-ignore",
            "ignore-label"
          ],
          "request_review": {
            "origin": "origin1",
            "forked": "forked1"
          },
          "sourcery_branch": "sourcery-dev/{base_branch}"
        },
        "clone_detection": {
          "min_lines": 5,
          "min_duplicates": 3,
          "identical_clones_only": true
        },
        "proxy": {
          "url": "http://proxy.example.com",
          "ssl_certs_file": "/path/to/ssl/certs",
          "no_ssl_verify": true
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "version": "1",
        "ignore": [],
        "rule_settings": {
          "enable": [
            "default"
          ],
          "disable": [],
          "rule_types": [
            "refactoring",
            "suggestion",
            "comment"
          ],
          "python_version": {
            "major": 3,
            "minor": 8
          }
        },
        "rules": [
          {
            "id": "my-rule",
            "description": "My custom rule",
            "pattern": "if True: pass",
            "replacement": "pass",
            "language": "python",
            "paths": {
              "include": [
                "path/to/include"
              ],
              "exclude": [
                "path/to/exclude"
              ]
            },
            "tests": [
              {
                "match": "if True: pass",
                "expect": "pass"
              },
              {
                "no-match": "if False: pass"
              }
            ],
            "tags": [
              "my-tag"
            ]
          }
        ],
        "rule_tags": {
          "my-tag": [
            "description of my-tag"
          ]
        },
        "metrics": {
          "quality_threshold": 25.0
        },
        "github": {
          "labels": [
            "my-label"
          ],
          "ignore_labels": [
            "sourcery-ignore"
          ],
          "request_review": {
            "origin": "my-origin",
            "forked": "my-forked"
          },
          "sourcery_branch": "sourcery-dev/my-branch"
        },
        "clone_detection": {
          "min_lines": 3,
          "min_duplicates": 2,
          "identical_clones_only": false
        },
        "proxy": {
          "url": "http://my-proxy.com",
          "ssl_certs_file": "path/to/ssl/certs",
          "no_ssl_verify": false
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('extra_property' was unexpected)",
      "python_error": "Additional properties are not allowed ('extra_property' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['rule_settings']['allOf'][0]:\n    {'title': 'RuleSettingsConfig',\n     'type': 'object',\n     'properties': {'enable': {'title': 'Enable',\n                               'default': ['default'],\n                               'type': 'array',\n                               'items': {'type': 'string'}},\n                    'disable': {'title': 'Disable',\n                                'description': 'A list of rule IDs '\n                                               'Sourcery will never '\n                                               'suggest.',\n                                'default': [],\n                                'type': 'array',\n                                'items': {'type': 'string'}},\n                    'rule_types': {'default': ['refactoring',\n                                               'suggestion',\n                                               'comm.. (1286 more)",
      "data": {
        "version": "1",
        "ignore": [],
        "rule_settings": {
          "enable": [
            "default"
          ],
          "disable": [],
          "rule_types": [
            "refactoring",
            "suggestion",
            "comment"
          ],
          "python_version": {
            "major": 3,
            "minor": 8
          },
          "extra_property": "extra_value"
        },
        "rules": [
          {
            "id": "my-rule",
            "description": "My custom rule",
            "pattern": "if True: pass",
            "replacement": "pass",
            "language": "python",
            "paths": {
              "include": [
                "path/to/include"
              ],
              "exclude": [
                "path/to/exclude"
              ]
            },
            "tests": [
              {
                "match": "if True: pass",
                "expect": "pass"
              },
              {
                "no-match": "if False: pass"
              }
            ],
            "tags": [
              "my-tag"
            ]
          }
        ],
        "rule_tags": {
          "my-tag": [
            "description of my-tag"
          ]
        },
        "metrics": {
          "quality_threshold": 25.0
        },
        "github": {
          "labels": [
            "my-label"
          ],
          "ignore_labels": [
            "sourcery-ignore"
          ],
          "request_review": {
            "origin": "my-origin",
            "forked": "my-forked"
          },
          "sourcery_branch": "sourcery-dev/my-branch"
        },
        "clone_detection": {
          "min_lines": 3,
          "min_duplicates": 2,
          "identical_clones_only": false
        },
        "proxy": {
          "url": "http://my-proxy.com",
          "ssl_certs_file": "path/to/ssl/certs",
          "no_ssl_verify": false
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on allOf keyword",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('invalid_property' was unexpected)",
      "python_error": "Additional properties are not allowed ('invalid_property' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['rule_settings']['allOf'][0]:\n    {'title': 'RuleSettingsConfig',\n     'type': 'object',\n     'properties': {'enable': {'title': 'Enable',\n                               'default': ['default'],\n                               'type': 'array',\n                               'items': {'type': 'string'}},\n                    'disable': {'title': 'Disable',\n                                'description': 'A list of rule IDs '\n                                               'Sourcery will never '\n                                               'suggest.',\n                                'default': [],\n                                'type': 'array',\n                                'items': {'type': 'string'}},\n                    'rule_types': {'default': ['refactoring',\n                                               'suggestion',\n                                               'co.. (1283 more)",
      "data": {
        "version": "1",
        "ignore": [],
        "rule_settings": {
          "enable": [
            "default"
          ],
          "disable": [],
          "rule_types": [
            "refactoring",
            "suggestion",
            "comment"
          ],
          "python_version": {
            "major": 3,
            "minor": 8
          },
          "invalid_property": "test"
        },
        "rules": [
          {
            "id": "my-rule",
            "description": "My custom rule",
            "pattern": "if True: pass",
            "replacement": "pass",
            "language": "python",
            "paths": {
              "include": [
                "path/to/include"
              ],
              "exclude": [
                "path/to/exclude"
              ]
            },
            "tests": [
              {
                "match": "if True: pass",
                "expect": "pass"
              },
              {
                "no-match": "if False: pass"
              }
            ],
            "tags": [
              "my-tag"
            ]
          }
        ],
        "rule_tags": {
          "my-tag": [
            "description of my-tag"
          ]
        },
        "metrics": {
          "quality_threshold": 25.0
        },
        "github": {
          "labels": [
            "my-label"
          ],
          "ignore_labels": [
            "sourcery-ignore"
          ],
          "request_review": {
            "origin": "my-origin",
            "forked": "my-forked",
            "extra_property": "test"
          },
          "sourcery_branch": "sourcery-dev/my-branch"
        },
        "clone_detection": {
          "min_lines": 3,
          "min_duplicates": 2,
          "identical_clones_only": false
        },
        "proxy": {
          "url": "http://my-proxy.com",
          "ssl_certs_file": "path/to/ssl/certs",
          "no_ssl_verify": false
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on format keyword",
      "valid": false,
      "rust_error": "\" invalid-url\" is not a \"uri\"",
      "python_error": "' invalid-url' is not a 'uri'\n\nFailed validating 'format' in schema['properties']['proxy']['allOf'][0]['properties']['url']:\n    {'title': 'Url',\n     'minLength': 1,\n     'maxLength': 65536,\n     'format': 'uri',\n     'type': 'string'}\n\nOn instance['proxy']['url']:\n    ' invalid-url'",
      "data": {
        "version": "1",
        "ignore": [],
        "rule_settings": {
          "enable": [
            "default"
          ],
          "disable": [],
          "rule_types": [
            "refactoring",
            "suggestion",
            "comment"
          ],
          "python_version": {
            "major": 3,
            "minor": 8
          }
        },
        "rules": [
          {
            "id": "my-rule",
            "description": "My custom rule",
            "pattern": "if True: pass",
            "replacement": "pass",
            "language": "python",
            "paths": {
              "include": [
                "path/to/include"
              ],
              "exclude": [
                "path/to/exclude"
              ]
            },
            "tests": [
              {
                "match": "if True: pass",
                "expect": "pass"
              },
              {
                "no-match": "if False: pass"
              }
            ],
            "tags": [
              "my-tag"
            ]
          }
        ],
        "rule_tags": {
          "my-tag": [
            "description of my-tag"
          ]
        },
        "metrics": {
          "quality_threshold": 25.0
        },
        "github": {
          "labels": [
            "my-label"
          ],
          "ignore_labels": [
            "sourcery-ignore"
          ],
          "request_review": {
            "origin": "my-origin",
            "forked": "my-forked"
          },
          "sourcery_branch": "sourcery-dev/my-branch"
        },
        "clone_detection": {
          "min_lines": 3,
          "min_duplicates": 2,
          "identical_clones_only": false
        },
        "proxy": {
          "url": " invalid-url",
          "ssl_certs_file": "path/to/ssl/certs",
          "no_ssl_verify": false
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "{\"no-match\":\"if False: pass\",\"extra\":\"wrong\"} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "Additional properties are not allowed ('extra' was unexpected)\n\nFailed validating 'additionalProperties' in schema[1]:\n    {'title': 'RequestReview',\n     'type': 'object',\n     'properties': {'origin': {'title': 'Origin',\n                               'default': '',\n                               'type': 'string'},\n                    'forked': {'title': 'Forked',\n                               'default': '',\n                               'type': 'string'}},\n     'additionalProperties': False}\n\nOn instance:\n    {'origin': 'my-origin', 'forked': 'my-forked', 'extra': 'wrong'}",
      "data": {
        "version": "1",
        "ignore": [],
        "rule_settings": {
          "enable": [
            "default"
          ],
          "disable": [],
          "rule_types": [
            "refactoring",
            "suggestion",
            "comment"
          ],
          "python_version": {
            "major": 3,
            "minor": 8,
            "extra": "wrong"
          }
        },
        "rules": [
          {
            "id": "my-rule",
            "description": "My custom rule",
            "pattern": "if True: pass",
            "replacement": "pass",
            "language": "python",
            "paths": {
              "include": [
                "path/to/include"
              ],
              "exclude": [
                "path/to/exclude"
              ]
            },
            "tests": [
              {
                "match": "if True: pass",
                "expect": "pass"
              },
              {
                "no-match": "if False: pass",
                "extra": "wrong"
              }
            ],
            "tags": [
              "my-tag"
            ]
          }
        ],
        "rule_tags": {
          "my-tag": [
            "description of my-tag"
          ]
        },
        "metrics": {
          "quality_threshold": 25.0
        },
        "github": {
          "labels": [
            "my-label"
          ],
          "ignore_labels": [
            "sourcery-ignore"
          ],
          "request_review": {
            "origin": "my-origin",
            "forked": "my-forked",
            "extra": "wrong"
          },
          "sourcery_branch": "sourcery-dev/my-branch"
        },
        "clone_detection": {
          "min_lines": 3,
          "min_duplicates": 2,
          "identical_clones_only": false
        },
        "proxy": {
          "url": "http://my-proxy.com",
          "ssl_certs_file": "path/to/ssl/certs",
          "no_ssl_verify": false
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"invalid-rule-type\" is not one of [\"refactoring\",\"suggestion\",\"comment\",\"hover\"]",
      "python_error": "'invalid-url' is not a 'uri'\n\nFailed validating 'format' in schema['properties']['proxy']['allOf'][0]['properties']['url']:\n    {'title': 'Url',\n     'minLength': 1,\n     'maxLength': 65536,\n     'format': 'uri',\n     'type': 'string'}\n\nOn instance['proxy']['url']:\n    'invalid-url'",
      "data": {
        "version": "1",
        "ignore": [],
        "rule_settings": {
          "enable": [
            "default"
          ],
          "disable": [],
          "rule_types": [
            "refactoring",
            "suggestion",
            "comment",
            "invalid-rule-type"
          ],
          "python_version": {
            "major": 3,
            "minor": 8
          }
        },
        "rules": [
          {
            "id": "my-rule",
            "description": "My custom rule",
            "pattern": "if True: pass",
            "replacement": "pass",
            "language": "invalid-language",
            "paths": {
              "include": [
                "path/to/include"
              ],
              "exclude": [
                "path/to/exclude"
              ]
            },
            "tests": [
              {
                "match": "if True: pass",
                "expect": "pass",
                "invalid-key": "value"
              },
              {
                "no-match": "if False: pass"
              }
            ],
            "tags": [
              "my-tag"
            ]
          }
        ],
        "rule_tags": {
          "my-tag": [
            "description of my-tag"
          ]
        },
        "metrics": {
          "quality_threshold": -100.0
        },
        "github": {
          "labels": [
            "my-label"
          ],
          "ignore_labels": [
            "sourcery-ignore"
          ],
          "request_review": {
            "origin": "my-origin",
            "forked": "my-forked"
          },
          "sourcery_branch": "sourcery-dev/my-branch"
        },
        "clone_detection": {
          "min_lines": -1,
          "min_duplicates": 2,
          "identical_clones_only": false
        },
        "proxy": {
          "url": "invalid-url",
          "ssl_certs_file": "path/to/ssl/certs",
          "no_ssl_verify": false
        }
      }
    }
  ]
}