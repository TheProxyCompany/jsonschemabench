{
  "description": "sample JsonSchemaStore/prometheus.rules.test.json",
  "meta": {
    "full_size": 4383,
    "stripped_size": 2228,
    "features": [
      "$ref",
      "@minmaxLength",
      "additionalProperties",
      "items",
      "pattern",
      "patternProperties"
    ],
    "raw_features": [
      "$id",
      "$schema",
      "_boolSchema",
      "definitions",
      "minLength",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:null",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$id": "https://json.schemastore.org/prometheus.rules.test.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "alert": {
        "properties": {
          "exp_annotations": {
            "$ref": "#/definitions/labels",
            "description": "Expanded annotations of the expected alert"
          },
          "exp_labels": {
            "$ref": "#/definitions/labels",
            "description": "Expanded labels and annotations of the expected alert. This also include the labels of the sample associated with the alert (same as what you see in `/alerts`, without series `__name__` and `alertname`)."
          }
        },
        "required": [
          "exp_labels"
        ],
        "type": "object"
      },
      "alert_test_case": {
        "additionalProperties": false,
        "properties": {
          "alertname": {
            "description": "Name of the alert to be tested.",
            "type": "string"
          },
          "eval_time": {
            "$ref": "#/definitions/duration",
            "description": "The time elapsed from time=0s when the alerts have to be checked."
          },
          "exp_alerts": {
            "description": "List of expected alerts firing under the given alertname at the given evaluation time",
            "items": {
              "$ref": "#/definitions/alert"
            },
            "type": "array"
          }
        },
        "required": [
          "eval_time",
          "alertname"
        ],
        "type": "object"
      },
      "duration": {
        "minLength": 1,
        "pattern": "^([0-9]+y)?([0-9]+w)?([0-9]+d)?([0-9]+h)?([0-9]+m)?([0-9]+s)?([0-9]+ms)?$",
        "type": [
          "string",
          "null"
        ]
      },
      "label_value": {
        "type": "string"
      },
      "labels": {
        "additionalProperties": false,
        "patternProperties": {
          "^[a-zA-Z_][a-zA-Z0-9_]*$": {
            "$ref": "#/definitions/label_value"
          }
        },
        "type": [
          "object",
          "null"
        ]
      },
      "promql_test_case": {
        "additionalProperties": false,
        "properties": {
          "eval_time": {
            "$ref": "#/definitions/duration",
            "description": "The time elapsed from time=0s when the expression has to be evaluated."
          },
          "exp_samples": {
            "description": "Expected samples at the given evaluation time.",
            "items": {
              "$ref": "#/definitions/sample"
            },
            "type": "array"
          },
          "expr": {
            "description": "PromQL expression to evaluate",
            "type": "string"
          }
        },
        "required": [
          "expr",
          "eval_time"
        ],
        "type": "object"
      },
      "sample": {
        "properties": {
          "labels": {
            "description": "Labels of the sample in the usual series notation '<metric name>{<label name>=<label value>, ...}'",
            "type": "string"
          },
          "value": {
            "description": "Expected value of the PromQL expression.",
            "type": "number"
          }
        },
        "required": [
          "labels",
          "value"
        ],
        "type": "object"
      },
      "series": {
        "additionalProperties": false,
        "properties": {
          "series": {
            "description": "This follows the usual series notation '<metric name>{<label name>=<label value>, ...}'.",
            "type": "string"
          },
          "values": {
            "description": "This uses expanded notation to project time series. There are also the special `_` and `stale` values to indicate missing or stale samples",
            "type": "string"
          }
        },
        "required": [
          "series",
          "values"
        ],
        "type": "object"
      },
      "test_group": {
        "additionalProperties": false,
        "properties": {
          "alert_rule_test": {
            "description": "Unit tests for alerting rules. We only consider the alerting rules from the input files.",
            "items": {
              "$ref": "#/definitions/alert_test_case"
            },
            "type": "array"
          },
          "external_labels": {
            "$ref": "#/definitions/labels",
            "description": "External labels accessible to the alert template."
          },
          "external_url": {
            "description": "External URL accessible to the alert template. Usually set using --web.external-url.",
            "type": "string"
          },
          "input_series": {
            "description": "A list of time series",
            "items": {
              "$ref": "#/definitions/series"
            },
            "type": "array"
          },
          "interval": {
            "$ref": "#/definitions/duration",
            "description": "The time elapsed from time=0s when the alerts have to be checked."
          },
          "name": {
            "description": "Name of the test group",
            "type": "string"
          },
          "promql_expr_test": {
            "description": "Unit tests for PromQL expressions",
            "items": {
              "$ref": "#/definitions/promql_test_case"
            },
            "type": "array"
          }
        },
        "required": [
          "interval",
          "input_series"
        ],
        "type": "object"
      }
    },
    "description": "Prometheus rules test file. See https://prometheus.io/docs/prometheus/latest/configuration/unit_testing_rules/ for details.",
    "properties": {
      "evaluation_interval": {
        "default": "1m",
        "description": "The evaluation interval for the tests. [duration] format.",
        "type": [
          "string",
          "null"
        ]
      },
      "group_eval_order": {
        "description": "The order in which group names are listed below will be the order of evaluation of rule groups (at a given evaluation time).",
        "items": {
          "type": "string"
        },
        "type": [
          "array",
          "null"
        ]
      },
      "rule_files": {
        "description": "List of rule files to consider for testing. Globs are supported.",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "tests": {
        "items": {
          "$ref": "#/definitions/test_group",
          "description": "All the tests are listed here."
        },
        "type": "array"
      }
    },
    "title": "Prometheus Rules Test File",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "evaluation_interval": "1m",
        "group_eval_order": [
          "group1",
          "group2"
        ],
        "rule_files": [
          "rules/*.yml"
        ],
        "tests": [
          {
            "alert_rule_test": [
              {
                "alertname": "Alert1",
                "eval_time": "1m",
                "exp_alerts": [
                  {
                    "exp_annotations": {
                      "description": "Alert description"
                    },
                    "exp_labels": {
                      "label1": "value1",
                      "label2": "value2"
                    }
                  }
                ]
              }
            ],
            "input_series": [
              {
                "series": "metric1{label1=\"value1\"}",
                "values": "10 20 30"
              },
              {
                "series": "metric2{label2=\"value2\"}",
                "values": "40 50 60"
              }
            ],
            "interval": "1m",
            "name": "Test Group 1",
            "promql_expr_test": [
              {
                "eval_time": "1m",
                "exp_samples": [
                  {
                    "labels": "metric1{label1=\"value1\"}",
                    "value": 10
                  },
                  {
                    "labels": "metric1{label1=\"value1\"}",
                    "value": 20
                  }
                ],
                "expr": "metric1{label1=\"value1\"}"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "evaluation_interval": "1m",
        "rule_files": [
          "rules/*.yml"
        ],
        "tests": [
          {
            "alert_rule_test": [
              {
                "alertname": "Alert1",
                "eval_time": "1m",
                "exp_alerts": [
                  {
                    "exp_annotations": {
                      "description": "Alert description"
                    },
                    "exp_labels": {
                      "alertname": "Alert1",
                      "label1": "value1"
                    }
                  }
                ]
              }
            ],
            "input_series": [
              {
                "series": "metric1{label1=\"value1\"}",
                "values": "1 2 3"
              },
              {
                "series": "metric2{label2=\"value2\"}",
                "values": "4 5 6"
              }
            ],
            "interval": "1m",
            "name": "Test Group 1",
            "promql_expr_test": [
              {
                "eval_time": "1m",
                "exp_samples": [
                  {
                    "labels": "metric1{label1=\"value1\"}",
                    "value": 2
                  }
                ],
                "expr": "metric1{label1=\"value1\"}"
              },
              {
                "eval_time": "2m",
                "exp_samples": [
                  {
                    "labels": "metric2{label2=\"value2\"}",
                    "value": 5
                  }
                ],
                "expr": "metric2{label2=\"value2\"}"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on patternProperties keyword",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('$invalid_key' was unexpected)",
      "python_error": "'$invalid_key' does not match any of the regexes: '^[a-zA-Z_][a-zA-Z0-9_]*$'\n\nFailed validating 'additionalProperties' in schema['properties']['tests']['items']['properties']['alert_rule_test']['items']['properties']['exp_alerts']['items']['properties']['exp_labels']:\n    {'additionalProperties': False,\n     'patternProperties': {'^[a-zA-Z_][a-zA-Z0-9_]*$': {'$ref': '#/definitions/label_value'}},\n     'type': ['object', 'null']}\n\nOn instance['tests'][0]['alert_rule_test'][0]['exp_alerts'][0]['exp_labels']:\n    {'alertname': 'Alert1', 'label1': 'value1', '$invalid_key': 'value'}",
      "data": {
        "evaluation_interval": "1m",
        "rule_files": [
          "rules/*.yml"
        ],
        "tests": [
          {
            "name": "Test Group 1",
            "interval": "1m",
            "input_series": [
              {
                "series": "metric1{label1=\"value1\"}",
                "values": "1 2 3"
              },
              {
                "series": "metric2{label2=\"value2\"}",
                "values": "4 5 6"
              }
            ],
            "promql_expr_test": [
              {
                "expr": "metric1{label1=\"value1\"}",
                "eval_time": "1m",
                "exp_samples": [
                  {
                    "labels": "metric1{label1=\"value1\"}",
                    "value": 2
                  }
                ]
              },
              {
                "expr": "metric2{label2=\"value2\"}",
                "eval_time": "2m",
                "exp_samples": [
                  {
                    "labels": "metric2{label2=\"value2\"}",
                    "value": 5
                  }
                ]
              }
            ],
            "alert_rule_test": [
              {
                "alertname": "Alert1",
                "eval_time": "1m",
                "exp_alerts": [
                  {
                    "exp_labels": {
                      "alertname": "Alert1",
                      "label1": "value1",
                      "$invalid_key": "value"
                    },
                    "exp_annotations": {
                      "description": "Alert description"
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('Invalid-Label' was unexpected)",
      "python_error": "'Invalid-Label' does not match any of the regexes: '^[a-zA-Z_][a-zA-Z0-9_]*$'\n\nFailed validating 'additionalProperties' in schema['properties']['tests']['items']['properties']['alert_rule_test']['items']['properties']['exp_alerts']['items']['properties']['exp_labels']:\n    {'additionalProperties': False,\n     'patternProperties': {'^[a-zA-Z_][a-zA-Z0-9_]*$': {'$ref': '#/definitions/label_value'}},\n     'type': ['object', 'null']}\n\nOn instance['tests'][0]['alert_rule_test'][0]['exp_alerts'][0]['exp_labels']:\n    {'alertname': 'Alert1', 'label1': 'value1', 'Invalid-Label': 'value2'}",
      "data": {
        "evaluation_interval": "1m",
        "rule_files": [
          "rules/*.yml"
        ],
        "tests": [
          {
            "name": "Test Group 1",
            "interval": "1m",
            "input_series": [
              {
                "series": "metric1{label1=\"value1\"}",
                "values": "1 2 3"
              },
              {
                "series": "metric2{label2=\"value2\"}",
                "values": "4 5 6"
              }
            ],
            "promql_expr_test": [
              {
                "expr": "metric1{label1=\"value1\"}",
                "eval_time": "1m",
                "exp_samples": [
                  {
                    "labels": "metric1{label1=\"value1\"}",
                    "value": 2
                  }
                ]
              },
              {
                "expr": "metric2{label2=\"value2\"}",
                "eval_time": "2m",
                "exp_samples": [
                  {
                    "labels": "metric2{label2=\"value2\"}",
                    "value": 5
                  }
                ]
              }
            ],
            "alert_rule_test": [
              {
                "alertname": "Alert1",
                "eval_time": "1m",
                "exp_alerts": [
                  {
                    "exp_labels": {
                      "alertname": "Alert1",
                      "label1": "value1",
                      "Invalid-Label": "value2"
                    },
                    "exp_annotations": {
                      "description": "Alert description"
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['tests']['items']['properties']['input_series']['items']['properties']['values']:\n    {'description': 'This uses expanded notation to project time series. '\n                    'There are also the special `_` and `stale` values to '\n                    'indicate missing or stale samples',\n     'type': 'string'}\n\nOn instance['tests'][0]['input_series'][0]['values']:\n    123",
      "data": {
        "evaluation_interval": "1m",
        "rule_files": [
          "rules/*.yml"
        ],
        "tests": [
          {
            "name": "Test Group 1",
            "interval": "1m",
            "input_series": [
              {
                "series": "metric1{label1=\"value1\"}",
                "values": 123
              }
            ],
            "promql_expr_test": [
              {
                "expr": "metric1{label1=\"value1\"}",
                "eval_time": "1m",
                "exp_samples": [
                  {
                    "labels": "metric1{label1=\"value1\"}",
                    "value": "2"
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['tests']['items']['properties']['promql_expr_test']['items']['properties']['eval_time']:\n    {'minLength': 1,\n     'pattern': '^([0-9]+y)?([0-9]+w)?([0-9]+d)?([0-9]+h)?([0-9]+m)?([0-9]+s)?([0-9]+ms)?$',\n     'type': ['string', 'null']}\n\nOn instance['tests'][0]['promql_expr_test'][0]['eval_time']:\n    ''",
      "data": {
        "evaluation_interval": "",
        "rule_files": [
          "rules/*.yml"
        ],
        "tests": [
          {
            "name": "Test Group 1",
            "interval": "1m",
            "input_series": [
              {
                "series": "metric1{label1=\"value1\"}",
                "values": "1 2 3"
              },
              {
                "series": "metric2{label2=\"value2\"}",
                "values": "4 5 6"
              }
            ],
            "promql_expr_test": [
              {
                "expr": "metric1{label1=\"value1\"}",
                "eval_time": "",
                "exp_samples": [
                  {
                    "labels": "metric1{label1=\"value1\"}",
                    "value": 2
                  }
                ]
              },
              {
                "expr": "metric2{label2=\"value2\"}",
                "eval_time": "2m",
                "exp_samples": [
                  {
                    "labels": "metric2{label2=\"value2\"}",
                    "value": 5
                  }
                ]
              }
            ],
            "alert_rule_test": [
              {
                "alertname": "Alert1",
                "eval_time": "1m",
                "exp_alerts": [
                  {
                    "exp_annotations": {
                      "description": "Alert description"
                    },
                    "exp_labels": {
                      "alertname": "Alert1",
                      "label1": "value1"
                    }
                  }
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"abc\" is not of type \"number\"",
      "python_error": "'abc' is not of type 'number'\n\nFailed validating 'type' in schema['properties']['tests']['items']['properties']['promql_expr_test']['items']['properties']['exp_samples']['items']['properties']['value']:\n    {'description': 'Expected value of the PromQL expression.',\n     'type': 'number'}\n\nOn instance['tests'][0]['promql_expr_test'][1]['exp_samples'][0]['value']:\n    'abc'",
      "data": {
        "evaluation_interval": "1m",
        "rule_files": [
          "rules/*.yml"
        ],
        "tests": [
          {
            "name": "Test Group 1",
            "interval": "1m",
            "input_series": [
              {
                "series": "metric1{label1=\"value1\"}",
                "values": "1 2 3"
              },
              {
                "series": "metric2{label2=\"value2\"}",
                "values": "4 5 6"
              }
            ],
            "promql_expr_test": [
              {
                "expr": "metric1{label1=\"value1\"}",
                "eval_time": "1m",
                "exp_samples": [
                  {
                    "labels": "metric1{label1=\"value1\"}",
                    "value": 2
                  }
                ]
              },
              {
                "expr": "metric2{label2=\"value2\"}",
                "eval_time": "2m",
                "exp_samples": [
                  {
                    "labels": "metric2{label2=\"value2\"}",
                    "value": "abc"
                  }
                ]
              }
            ],
            "alert_rule_test": [
              {
                "alertname": "Alert1",
                "eval_time": "1m",
                "exp_alerts": [
                  {
                    "exp_labels": {
                      "alertname": "Alert1",
                      "label1": "value1"
                    },
                    "exp_annotations": 123
                  }
                ]
              }
            ]
          }
        ]
      }
    }
  ]
}