{
  "description": "sample JsonSchemaStore/avro-avsc.json",
  "meta": {
    "full_size": 3981,
    "stripped_size": 3216,
    "features": [
      "$ref",
      "@minmaxItems",
      "@siblingKeys",
      "enum",
      "items",
      "not",
      "oneOf",
      "pattern"
    ],
    "raw_features": [
      "$id",
      "$schema",
      "definitions",
      "minItems",
      "oneOf:trivial",
      "properties",
      "required",
      "type",
      "type:array",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$id": "https://json.schemastore.org/avro-avsc.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
      "avroSchema": {
        "title": "Avro Schema",
        "description": "Root Schema",
        "oneOf": [
          {
            "$ref": "#/definitions/types"
          }
        ]
      },
      "types": {
        "title": "Avro Types",
        "description": "Allowed Avro types",
        "oneOf": [
          {
            "$ref": "#/definitions/primitiveType"
          },
          {
            "$ref": "#/definitions/primitiveTypeWithMetadata"
          },
          {
            "$ref": "#/definitions/customTypeReference"
          },
          {
            "$ref": "#/definitions/avroRecord"
          },
          {
            "$ref": "#/definitions/avroEnum"
          },
          {
            "$ref": "#/definitions/avroArray"
          },
          {
            "$ref": "#/definitions/avroMap"
          },
          {
            "$ref": "#/definitions/avroFixed"
          },
          {
            "$ref": "#/definitions/avroUnion"
          }
        ]
      },
      "primitiveType": {
        "title": "Primitive Type",
        "description": "Basic type primitives.",
        "type": "string",
        "enum": [
          "null",
          "boolean",
          "int",
          "long",
          "float",
          "double",
          "bytes",
          "string"
        ]
      },
      "primitiveTypeWithMetadata": {
        "title": "Primitive Type With Metadata",
        "description": "A primitive type with metadata attached.",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/definitions/primitiveType"
          }
        },
        "required": [
          "type"
        ]
      },
      "customTypeReference": {
        "title": "Custom Type",
        "description": "Reference to a ComplexType",
        "not": {
          "$ref": "#/definitions/primitiveType"
        },
        "type": "string",
        "pattern": "^[A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)*$"
      },
      "avroUnion": {
        "title": "Union",
        "description": "A Union of types",
        "type": "array",
        "items": {
          "$ref": "#/definitions/avroSchema"
        },
        "minItems": 1
      },
      "avroField": {
        "title": "Field",
        "description": "A field within a Record",
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/definitions/name"
          },
          "type": {
            "$ref": "#/definitions/types"
          },
          "doc": {
            "type": "string"
          },
          "default": {},
          "order": {
            "enum": [
              "ascending",
              "descending",
              "ignore"
            ]
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/name"
            }
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "avroRecord": {
        "title": "Record",
        "description": "A Record",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "record"
            ]
          },
          "name": {
            "$ref": "#/definitions/name"
          },
          "namespace": {
            "$ref": "#/definitions/namespace"
          },
          "doc": {
            "type": "string"
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/name"
            }
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/avroField"
            }
          }
        },
        "required": [
          "type",
          "name",
          "fields"
        ]
      },
      "avroEnum": {
        "title": "Enum",
        "description": "An enumeration",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "enum"
            ]
          },
          "name": {
            "$ref": "#/definitions/name"
          },
          "namespace": {
            "$ref": "#/definitions/namespace"
          },
          "doc": {
            "type": "string"
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/name"
            }
          },
          "symbols": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/name"
            }
          }
        },
        "required": [
          "type",
          "name",
          "symbols"
        ]
      },
      "avroArray": {
        "title": "Array",
        "description": "An array",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "array"
            ]
          },
          "name": {
            "$ref": "#/definitions/name"
          },
          "namespace": {
            "$ref": "#/definitions/namespace"
          },
          "doc": {
            "type": "string"
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/name"
            }
          },
          "items": {
            "$ref": "#/definitions/types"
          }
        },
        "required": [
          "type",
          "items"
        ]
      },
      "avroMap": {
        "title": "Map",
        "description": "A map of values",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "map"
            ]
          },
          "name": {
            "$ref": "#/definitions/name"
          },
          "namespace": {
            "$ref": "#/definitions/namespace"
          },
          "doc": {
            "type": "string"
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/name"
            }
          },
          "values": {
            "$ref": "#/definitions/types"
          }
        },
        "required": [
          "type",
          "values"
        ]
      },
      "avroFixed": {
        "title": "Fixed",
        "description": "A fixed sized array of bytes",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "fixed"
            ]
          },
          "name": {
            "$ref": "#/definitions/name"
          },
          "namespace": {
            "$ref": "#/definitions/namespace"
          },
          "doc": {
            "type": "string"
          },
          "aliases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/name"
            }
          },
          "size": {
            "type": "number"
          }
        },
        "required": [
          "type",
          "name",
          "size"
        ]
      },
      "name": {
        "type": "string",
        "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
      },
      "namespace": {
        "type": "string",
        "pattern": "^([A-Za-z_][A-Za-z0-9_]*(\\.[A-Za-z_][A-Za-z0-9_]*)*)*$"
      }
    },
    "description": "Json-Schema definition for Avro AVSC files.",
    "oneOf": [
      {
        "$ref": "#/definitions/avroSchema"
      }
    ],
    "title": "Avro Schema Definition"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "type": "record",
        "name": "User",
        "namespace": "com.example",
        "fields": [
          {
            "name": "id",
            "type": "int"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "email",
            "type": "string"
          },
          {
            "name": "phoneNumbers",
            "type": {
              "type": "array",
              "items": "string"
            }
          },
          {
            "name": "address",
            "type": {
              "type": "record",
              "name": "Address",
              "fields": [
                {
                  "name": "street",
                  "type": "string"
                },
                {
                  "name": "city",
                  "type": "string"
                },
                {
                  "name": "state",
                  "type": "string"
                },
                {
                  "name": "zip",
                  "type": "string"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "type": "record",
        "name": "User",
        "fields": [
          {
            "name": "id",
            "type": "int"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "email",
            "type": "string"
          },
          {
            "name": "address",
            "type": {
              "type": "record",
              "name": "Address",
              "fields": [
                {
                  "name": "street",
                  "type": "string"
                },
                {
                  "name": "city",
                  "type": "string"
                },
                {
                  "name": "state",
                  "type": "string"
                },
                {
                  "name": "zip",
                  "type": "string"
                }
              ]
            }
          },
          {
            "name": "phoneNumbers",
            "type": {
              "type": "array",
              "items": "string"
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minItems keyword",
      "valid": false,
      "rust_error": "{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"address\",\"type\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"street\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"zip\",\"type\":\"string\"}]}},{\"name\":\"phoneNumbers\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"union\",\"types\":[]}}}]} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'type': 'union', 'types': []} is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema[5]['properties']['items']:\n    {'title': 'Avro Types',\n     'description': 'Allowed Avro types',\n     'oneOf': [{'$ref': '#/definitions/primitiveType'},\n               {'$ref': '#/definitions/primitiveTypeWithMetadata'},\n               {'$ref': '#/definitions/customTypeReference'},\n               {'$ref': '#/definitions/avroRecord'},\n               {'$ref': '#/definitions/avroEnum'},\n               {'$ref': '#/definitions/avroArray'},\n               {'$ref': '#/definitions/avroMap'},\n               {'$ref': '#/definitions/avroFixed'},\n               {'$ref': '#/definitions/avroUnion'}]}\n\nOn instance['items']:\n    {'type': 'union', 'types': []}",
      "data": {
        "type": "record",
        "name": "User",
        "fields": [
          {
            "name": "id",
            "type": "int"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "email",
            "type": "string"
          },
          {
            "name": "address",
            "type": {
              "type": "record",
              "name": "Address",
              "fields": [
                {
                  "name": "street",
                  "type": "string"
                },
                {
                  "name": "city",
                  "type": "string"
                },
                {
                  "name": "state",
                  "type": "string"
                },
                {
                  "name": "zip",
                  "type": "string"
                }
              ]
            }
          },
          {
            "name": "phoneNumbers",
            "type": {
              "type": "array",
              "items": {
                "type": "union",
                "types": []
              }
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "{\"type\":\"record\",\"name\":\"User-Invalid\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"address\",\"type\":{\"type\":\"record\",\"name\":\"Address-123\",\"fields\":[{\"name\":\"street\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"zip\",\"type\":\"string\"}]}},{\"name\":\"phoneNumbers\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'type': 'record', 'name': 'Address-123', 'fields': [{'name': 'street', 'type': 'string'}, {'name': 'city', 'type': 'string'}, {'name': 'state', 'type': 'string'}, {'name': 'zip', 'type': 'string'}]} is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema[3]['properties']['fields']['items']['properties']['type']:\n    {'title': 'Avro Types',\n     'description': 'Allowed Avro types',\n     'oneOf': [{'$ref': '#/definitions/primitiveType'},\n               {'$ref': '#/definitions/primitiveTypeWithMetadata'},\n               {'$ref': '#/definitions/customTypeReference'},\n               {'$ref': '#/definitions/avroRecord'},\n               {'$ref': '#/definitions/avroEnum'},\n               {'$ref': '#/definitions/avroArray'},\n               {'$ref': '#/definitions/avroMap'},\n               {'$ref': '#/definitions/avroFixed'},\n               {'$ref': '#/definitions/avroUnion'}]}\n\nOn instance['fields'][3]['type']:\n    {'type': 'record',\n     'name': 'Address-123',\n     'fields': [{'name': 'stree.. (179 more)",
      "data": {
        "type": "record",
        "name": "User-Invalid",
        "fields": [
          {
            "name": "id",
            "type": "int"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "email",
            "type": "string"
          },
          {
            "name": "address",
            "type": {
              "type": "record",
              "name": "Address-123",
              "fields": [
                {
                  "name": "street",
                  "type": "string"
                },
                {
                  "name": "city",
                  "type": "string"
                },
                {
                  "name": "state",
                  "type": "string"
                },
                {
                  "name": "zip",
                  "type": "string"
                }
              ]
            }
          },
          {
            "name": "phoneNumbers",
            "type": {
              "type": "array",
              "items": "string"
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"type\":\"record\",\"name\":123,\"Invalid name, should be string\":\"fields\",\"Invalid field name, should be fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"address\",\"type\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"street\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"zip\",\"type\":\"string\"}]}},{\"name\":\"phoneNumbers\",\"type\":{\"type\":\"array\",\"items\":123,\"Invalid items type, should be string or object\":\"phoneNumbers\"}},\"ExtraField\",\"Invalid field, should not be present\",\"ExtraField2\",\"Invalid field, should not be present\"]} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'type': 'record', 'name': 123, 'Invalid name, should be string': 'fields', 'Invalid field name, should be fields': [{'name': 'id', 'type': 'int'}, {'name': 'name', 'type': 'string'}, {'name': 'email', 'type': 'string'}, {'name': 'address', 'type': {'type': 'record', 'name': 'Address', 'fields': [{'name': 'street', 'type': 'string'}, {'name': 'city', 'type': 'string'}, {'name': 'state', 'type': 'string'}, {'name': 'zip', 'type': 'string'}]}}, {'name': 'phoneNumbers', 'type': {'type': 'array', 'items': 123, 'Invalid items type, should be string or object': 'phoneNumbers'}}, 'ExtraField', 'Invalid field, should not be present', 'ExtraField2', 'Invalid field, should not be present']} is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema[0]:\n    {'title': 'Avro Types',\n     'description': 'Allowed Avro types',\n     'oneOf': [{'$ref': '#/definitions/primitiveType'},\n               {'$ref': '#/definitions/primitiveTypeWithMetadata'},\n               {'$ref': '#/definitions/customTypeRefere.. (2391 more)",
      "data": {
        "type": "record",
        "name": 123,
        "Invalid name, should be string": "fields",
        "Invalid field name, should be fields": [
          {
            "name": "id",
            "type": "int"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "email",
            "type": "string"
          },
          {
            "name": "address",
            "type": {
              "type": "record",
              "name": "Address",
              "fields": [
                {
                  "name": "street",
                  "type": "string"
                },
                {
                  "name": "city",
                  "type": "string"
                },
                {
                  "name": "state",
                  "type": "string"
                },
                {
                  "name": "zip",
                  "type": "string"
                }
              ]
            }
          },
          {
            "name": "phoneNumbers",
            "type": {
              "type": "array",
              "items": 123,
              "Invalid items type, should be string or object": "phoneNumbers"
            }
          },
          "ExtraField",
          "Invalid field, should not be present",
          "ExtraField2",
          "Invalid field, should not be present"
        ]
      }
    }
  ]
}