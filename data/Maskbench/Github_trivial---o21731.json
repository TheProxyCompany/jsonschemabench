{
  "description": "sample Github_trivial/o21731.json",
  "meta": {
    "full_size": 224,
    "stripped_size": 140,
    "features": [
      "@minmaxLength"
    ],
    "raw_features": [
      "$schema",
      "id",
      "minLength",
      "type",
      "type:string"
    ]
  },
  "schema": {
    "id": "http://select-object-path/ref.select.schema.json#",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "string",
    "default": "*",
    "description": "select, spearated by comma. cans be empty (so == all)",
    "minLength": 0
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": "field1,field2,field3"
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "{\"field1,field2,field3\":\"value\"} is not of type \"string\"",
      "python_error": "{'field1,field2,field3': 'value'} is not of type 'string'\n\nFailed validating 'type' in schema:\n    {'id': 'http://select-object-path/ref.select.schema.json#',\n     '$schema': 'http://json-schema.org/draft-04/schema#',\n     'type': 'string',\n     'default': '*',\n     'description': 'select, spearated by comma. cans be empty (so == all)',\n     'minLength': 0}\n\nOn instance:\n    {'field1,field2,field3': 'value'}",
      "data": {
        "field1,field2,field3": "value"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "{} is not of type \"string\"",
      "python_error": "{} is not of type 'string'\n\nFailed validating 'type' in schema:\n    {'id': 'http://select-object-path/ref.select.schema.json#',\n     '$schema': 'http://json-schema.org/draft-04/schema#',\n     'type': 'string',\n     'default': '*',\n     'description': 'select, spearated by comma. cans be empty (so == all)',\n     'minLength': 0}\n\nOn instance:\n    {}",
      "data": {}
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"key\":\"field1,field2,field3\"} is not of type \"string\"",
      "python_error": "{'key': 'field1,field2,field3'} is not of type 'string'\n\nFailed validating 'type' in schema:\n    {'id': 'http://select-object-path/ref.select.schema.json#',\n     '$schema': 'http://json-schema.org/draft-04/schema#',\n     'type': 'string',\n     'default': '*',\n     'description': 'select, spearated by comma. cans be empty (so == all)',\n     'minLength': 0}\n\nOn instance:\n    {'key': 'field1,field2,field3'}",
      "data": {
        "key": "field1,field2,field3"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"id\":\"http://select-object-path/ref.select.schema.json#\",\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"string\",\"default\":\"*\",\"description\":\"select, spearated by comma. cans be empty (so == all)\",\"minLength\":0} is not of type \"string\"",
      "python_error": "{'id': 'http://select-object-path/ref.select.schema.json#', '$schema': 'http://json-schema.org/draft-04/schema#', 'type': 'string', 'default': '*', 'description': 'select, spearated by comma. cans be empty (so == all)', 'minLength': 0} is not of type 'string'\n\nFailed validating 'type' in schema:\n    {'id': 'http://select-object-path/ref.select.schema.json#',\n     '$schema': 'http://json-schema.org/draft-04/schema#',\n     'type': 'string',\n     'default': '*',\n     'description': 'select, spearated by comma. cans be empty (so == all)',\n     'minLength': 0}\n\nOn instance:\n    {'id': 'http://select-object-path/ref.select.schema.json#',\n     '$schema': 'http://json-schema.org/draft-04/schema#',\n     'type': 'string',\n     'default': '*',\n     'description': 'select, spearated by comma. cans be empty (so == all)',\n     'minLength': 0}",
      "data": {
        "id": "http://select-object-path/ref.select.schema.json#",
        "$schema": "http://json-schema.org/draft-04/schema#",
        "type": "string",
        "default": "*",
        "description": "select, spearated by comma. cans be empty (so == all)",
        "minLength": 0
      }
    }
  ]
}