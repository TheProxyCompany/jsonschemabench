{
  "description": "sample Github_medium/o71327.json",
  "meta": {
    "full_size": 2101,
    "stripped_size": 1095,
    "features": [
      "@minmaxLength"
    ],
    "raw_features": [
      "$id",
      "$schema",
      "maxLength",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:boolean",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$id": "docs/spec/http.json",
    "title": "Request",
    "description": "If a log record was generated as a result of a http request, the http interface can be used to collect this information.",
    "type": [
      "object",
      "null"
    ],
    "properties": {
      "body": {
        "description": "Data should only contain the request body (not the query string). It can either be a dictionary (for standard HTTP requests) or a raw request body.",
        "type": [
          "object",
          "string",
          "null"
        ]
      },
      "env": {
        "description": "The env variable is a compounded of environment information passed from the webserver.",
        "type": [
          "object",
          "null"
        ],
        "properties": {}
      },
      "headers": {
        "description": "Should include any headers sent by the requester. Cookies will be taken by headers if supplied.",
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "content-type": {
            "type": [
              "string",
              "null"
            ]
          },
          "cookie": {
            "description": "Cookies sent with the request. It is expected to have values delimited by semicolons.",
            "type": [
              "string",
              "null"
            ]
          },
          "user-agent": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "http_version": {
        "description": "HTTP version.",
        "type": [
          "string",
          "null"
        ],
        "maxLength": 1024
      },
      "method": {
        "description": "HTTP method.",
        "type": "string",
        "maxLength": 1024
      },
      "socket": {
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "encrypted": {
            "description": "Indicates whether request was sent as SSL/HTTPS request.",
            "type": [
              "boolean",
              "null"
            ]
          },
          "remote_address": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "url": {
        "description": "A complete Url, with scheme, host and path.",
        "type": "object",
        "properties": {
          "raw": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 1024
          },
          "protocol": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 1024
          },
          "hostname": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 1024
          },
          "port": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 1024
          },
          "pathname": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 1024
          },
          "search": {
            "description": "The search describes the query string of the request. It is expected to have values delimited by ampersands.",
            "type": [
              "string",
              "null"
            ],
            "maxLength": 1024
          },
          "hash": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 1024
          }
        }
      },
      "cookies": {
        "description": "A parsed key-value object of cookies",
        "type": [
          "object",
          "null"
        ]
      }
    },
    "required": [
      "url",
      "method"
    ]
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "http_version": "1.1",
        "method": "GET",
        "url": {
          "raw": "https://example.com/path/to/resource?query=string#fragment",
          "protocol": "https",
          "hostname": "example.com",
          "port": "443",
          "pathname": "/path/to/resource",
          "search": "query=string",
          "hash": "fragment"
        },
        "headers ": {
          "content-type": "application/json",
          "cookie": "session_id=1234567890; username=john_doe",
          "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
        },
        "body ": {
          "key": "value"
        },
        "socket ": {
          "encrypted": true,
          "remote_address": "192.168.1.100"
        },
        "cookies ": {
          "session_id": "1234567890",
          "username": "john_doe"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"null\", \"object\"",
      "python_error": "123 is not of type 'object', 'null'\n\nFailed validating 'type' in schema['properties']['headers']:\n    {'description': 'Should include any headers sent by the requester. '\n                    'Cookies will be taken by headers if supplied.',\n     'type': ['object', 'null'],\n     'properties': {'content-type': {'type': ['string', 'null']},\n                    'cookie': {'description': 'Cookies sent with the '\n                                              'request. It is expected to '\n                                              'have values delimited by '\n                                              'semicolons.',\n                               'type': ['string', 'null']},\n                    'user-agent': {'type': ['string', 'null']}}}\n\nOn instance['headers']:\n    123",
      "data": {
        "http_version": "1.1",
        "method": "GET",
        "url": {
          "raw": "https://example.com/path/to/resource?query=string#fragment",
          "protocol": "https",
          "hostname": "example.com",
          "port": "443",
          "pathname": "/path/to/resource",
          "search": "query=string",
          "hash": "fragment"
        },
        "headers": 123,
        "body": {
          "key": "value"
        },
        "socket": {
          "encrypted": true,
          "remote_address": "192.168.1.100"
        },
        "cookies": {
          "session_id": "1234567890",
          "username": "john_doe"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "1.1 is not of types \"null\", \"string\"",
      "python_error": "1.1 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['http_version']:\n    {'description': 'HTTP version.',\n     'type': ['string', 'null'],\n     'maxLength': 1024}\n\nOn instance['http_version']:\n    1.1",
      "data": {
        "http_version": 1.1,
        "method": "GET",
        "url": {
          "raw": "https://example.com/path/to/resource?query=string#fragment",
          "protocol": "https",
          "hostname": "example.com",
          "port": "443",
          "pathname": "/path/to/resource",
          "search": "query=string",
          "hash": "fragment"
        },
        "headers": {
          "content-type": "application/json",
          "cookie": "session_id=1234567890; username=john_doe",
          "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
        },
        "body": {
          "key": "value"
        },
        "socket": {
          "encrypted": true,
          "remote_address": "192.168.1.100"
        },
        "cookies": {
          "session_id": "1234567890",
          "username": "john_doe"
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['method']:\n    {'description': 'HTTP method.', 'type': 'string', 'maxLength': 1024}\n\nOn instance['method']:\n    123",
      "data": {
        "http_version": "1.1",
        "method": 123,
        "url": {
          "raw": "https://example.com/path/to/resource?query=string#fragment",
          "protocol": "https",
          "hostname": "example.com",
          "port": "443",
          "pathname": "/path/to/resource",
          "search": "query=string",
          "hash": "fragment"
        },
        "headers": {
          "content-type": "application/json",
          "cookie": "session_id=1234567890; username=john_doe",
          "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
        },
        "body": {
          "key": "value"
        },
        "socket": {
          "encrypted": true,
          "remote_address": "192.168.1.100"
        },
        "cookies": {
          "session_id": "1234567890",
          "username": "john_doe"
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "body": {
          "key": "value"
        },
        "env": {
          "key": "value"
        },
        "headers": {
          "content-type": "application/json",
          "cookie": "cookie1=value1; cookie2=value2",
          "user-agent": "Mozilla/5.0"
        },
        "http_version": "HTTP/1.1",
        "method": "POST",
        "socket": {
          "encrypted": true,
          "remote_address": "192.168.1.1"
        },
        "url": {
          "raw": "https://example.com/path?query=value#hash",
          "protocol": "https",
          "hostname": "example.com",
          "port": "443",
          "pathname": "/path",
          "search": "query=value",
          "hash": "#hash"
        },
        "cookies": {
          "cookie1": "value1",
          "cookie2": "value2"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"null\", \"object\", \"string\"",
      "python_error": "123 is not of type 'object', 'string', 'null'\n\nFailed validating 'type' in schema['properties']['body']:\n    {'description': 'Data should only contain the request body (not the '\n                    'query string). It can either be a dictionary (for '\n                    'standard HTTP requests) or a raw request body.',\n     'type': ['object', 'string', 'null']}\n\nOn instance['body']:\n    123",
      "data": {
        "body": 123,
        "env": {
          "key": "value"
        },
        "headers": {
          "content-type": "application/json",
          "cookie": "cookie1=value1; cookie2=value2",
          "user-agent": "Mozilla/5.0"
        },
        "http_version": "HTTP/1.1",
        "method": "POST",
        "socket": {
          "encrypted": true,
          "remote_address": "192.168.1.1"
        },
        "url": {
          "raw": "https://example.com/path?query=value#hash",
          "protocol": "https",
          "hostname": "example.com",
          "port": "443",
          "pathname": "/path",
          "search": "query=value",
          "hash": "#hash"
        },
        "cookies": {
          "cookie1": "value1",
          "cookie2": "value2"
        }
      }
    }
  ]
}