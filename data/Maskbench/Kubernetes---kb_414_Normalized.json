{
  "description": "sample Kubernetes/kb_414_Normalized.json",
  "meta": {
    "full_size": 495,
    "stripped_size": 159,
    "features": [
      "format",
      "format:int32"
    ],
    "raw_features": [
      "properties",
      "required",
      "type",
      "type:[]",
      "type:integer",
      "type:null",
      "type:object"
    ]
  },
  "schema": {
    "description": "HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined. Deprecated: use HostPortRange from policy API Group instead.",
    "properties": {
      "max": {
        "description": "max is the end of the range, inclusive.",
        "format": "int32",
        "type": [
          "integer",
          "null"
        ]
      },
      "min": {
        "description": "min is the start of the range, inclusive.",
        "format": "int32",
        "type": [
          "integer",
          "null"
        ]
      }
    },
    "required": [
      "min",
      "max"
    ],
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "max": 8080,
        "min": 8080
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"8080\" is not of types \"integer\", \"null\"",
      "python_error": "'8080' is not of type 'integer', 'null'\n\nFailed validating 'type' in schema['properties']['max']:\n    {'description': 'max is the end of the range, inclusive.',\n     'format': 'int32',\n     'type': ['integer', 'null']}\n\nOn instance['max']:\n    '8080'",
      "data": {
        "max": "8080",
        "min": 8080
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"8080\" is not of types \"integer\", \"null\"",
      "python_error": "'8080' is not of type 'integer', 'null'\n\nFailed validating 'type' in schema['properties']['min']:\n    {'description': 'min is the start of the range, inclusive.',\n     'format': 'int32',\n     'type': ['integer', 'null']}\n\nOn instance['min']:\n    '8080'",
      "data": {
        "max": 8080,
        "min": "8080"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "max": 8085,
        "min": 8080
      }
    }
  ]
}