{
  "description": "sample Kubernetes/kb_426_Normalized.json",
  "meta": {
    "full_size": 3464,
    "stripped_size": 1124,
    "features": [
      "$ref",
      "oneOf"
    ],
    "raw_features": [
      "definitions",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:integer",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "definitions": {
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_TypedLocalObjectReference": {
        "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
        "properties": {
          "apiGroup": {
            "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
            "type": "string"
          },
          "kind": {
            "description": "Kind is the type of resource being referenced",
            "type": "string"
          },
          "name": {
            "description": "Name is the name of resource being referenced",
            "type": "string"
          }
        },
        "required": [
          "kind",
          "name"
        ],
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_networking_v1beta1_IngressBackend": {
        "description": "IngressBackend describes all endpoints for a given service and port.",
        "properties": {
          "resource": {
            "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_TypedLocalObjectReference",
            "description": "Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified."
          },
          "serviceName": {
            "description": "Specifies the name of the referenced service.",
            "type": "string"
          },
          "servicePort": {
            "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_util_intstr_IntOrString",
            "description": "Specifies the port of the referenced service."
          }
        },
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_util_intstr_IntOrString": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ]
      }
    },
    "description": "HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.",
    "properties": {
      "backend": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_networking_v1beta1_IngressBackend",
        "description": "Backend defines the referenced service endpoint to which the traffic will be forwarded to."
      },
      "path": {
        "description": "Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.",
        "type": [
          "string",
          "null"
        ]
      },
      "pathType": {
        "description": "PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is\n  done on a path element by element basis. A path element refers is the\n  list of labels in the path split by the '/' separator. A request is a\n  match for path p if every p is an element-wise prefix of p of the\n  request path. Note that if the last element of the path is a substring\n  of the last element in request path, it is not a match (e.g. /foo/bar\n  matches /foo/bar/baz, but does not match /foo/barbaz).\n* ImplementationSpecific: Interpretation of the Path matching is up to\n  the IngressClass. Implementations can treat this as a separate PathType\n  or treat it identically to Prefix or Exact path types.\nImplementations are required to support all path types. Defaults to ImplementationSpecific.",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "required": [
      "backend"
    ],
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "backend": {
          "resource": {
            "apiGroup": "apps",
            "kind": "Deployment",
            "name": "my-deployment"
          }
        },
        "path": "/my-path",
        "pathType": "Exact"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "backend": {
          "resource": {
            "apiGroup": "apps",
            "kind": "Deployment",
            "name": "example-deployment"
          }
        },
        "path": "/example-path",
        "pathType": "Exact"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "1234 is not of types \"null\", \"string\"",
      "python_error": "1234 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['path']:\n    {'description': 'Path is matched against the path of an incoming '\n                    'request. Currently it can contain characters '\n                    'disallowed from the conventional \"path\" part of a URL '\n                    \"as defined by RFC 3986. Paths must begin with a '/'. \"\n                    'When unspecified, all paths from incoming requests '\n                    'are matched.',\n     'type': ['string', 'null']}\n\nOn instance['path']:\n    1234",
      "data": {
        "backend": {
          "resource": {
            "apiGroup": "apps",
            "kind": "Deployment",
            "name": "example-deployment"
          }
        },
        "path": 1234,
        "pathType": "Exact"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['backend']['properties']['resource']['properties']['name']:\n    {'description': 'Name is the name of resource being referenced',\n     'type': 'string'}\n\nOn instance['backend']['resource']['name']:\n    123",
      "data": {
        "backend": {
          "resource": {
            "apiGroup": "apps",
            "kind": "Deployment",
            "name": 123
          }
        },
        "path": "example-path",
        "pathType": "Exact"
      }
    }
  ]
}