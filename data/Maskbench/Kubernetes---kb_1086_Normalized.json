{
  "description": "sample Kubernetes/kb_1086_Normalized.json",
  "meta": {
    "full_size": 4411,
    "stripped_size": 1086,
    "features": [
      "$ref",
      "additionalProperties",
      "additionalProperties:object",
      "format",
      "format:int32",
      "items"
    ],
    "raw_features": [
      "definitions",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:integer",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "definitions": {
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelector": {
        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
        "properties": {
          "matchExpressions": {
            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
            "items": {
              "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelectorRequirement"
            },
            "type": "array"
          },
          "matchLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelectorRequirement": {
        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
        "properties": {
          "key": {
            "description": "key is the label key that the selector applies to.",
            "type": "string",
            "x-kubernetes-patch-merge-key": "key",
            "x-kubernetes-patch-strategy": "merge"
          },
          "operator": {
            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
            "type": "string"
          },
          "values": {
            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "key",
          "operator"
        ],
        "type": "object"
      }
    },
    "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
    "properties": {
      "labelSelector": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelector",
        "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain."
      },
      "maxSkew": {
        "description": "MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. It's a required field. Default value is 1 and 0 is not allowed.",
        "format": "int32",
        "type": [
          "integer",
          "null"
        ]
      },
      "topologyKey": {
        "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.",
        "type": [
          "string",
          "null"
        ]
      },
      "whenUnsatisfiable": {
        "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as \"Unsatisfiable\" if and only if placing incoming pod on any topology violates \"MaxSkew\". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "required": [
      "maxSkew",
      "topologyKey",
      "whenUnsatisfiable"
    ],
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "app",
              "operator": "In",
              "values": [
                "nginx"
              ]
            }
          ],
          "matchLabels": {
            "env": "dev"
          }
        },
        "maxSkew": 1,
        "topologyKey": "kubernetes.io/hostname",
        "whenUnsatisfiable": "DoNotSchedule"
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['labelSelector']['properties']['matchLabels']['additionalProperties']:\n    {'type': 'string'}\n\nOn instance['labelSelector']['matchLabels']['extraProperty']:\n    123",
      "data": {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "app",
              "operator": "In",
              "values": [
                "nginx"
              ]
            }
          ],
          "matchLabels": {
            "env": "dev",
            "extraProperty": 123
          }
        },
        "maxSkew": 1,
        "topologyKey": "kubernetes.io/hostname",
        "whenUnsatisfiable": "DoNotSchedule"
      }
    },
    {
      "description": "llama-70b generated negative; focus on format keyword",
      "valid": false,
      "rust_error": "\"abc\" is not of types \"integer\", \"null\"",
      "python_error": "'abc' is not of type 'integer', 'null'\n\nFailed validating 'type' in schema['properties']['maxSkew']:\n    {'description': 'MaxSkew describes the degree to which pods may be '\n                    \"unevenly distributed. It's the maximum permitted \"\n                    'difference between the number of matching pods in any '\n                    'two topology domains of a given topology type. For '\n                    'example, in a 3-zone cluster, MaxSkew is set to 1, '\n                    'and pods with the same labelSelector spread as 1/1/0: '\n                    '| zone1 | zone2 | zone3 | |   P   |   P   |       | - '\n                    'if MaxSkew is 1, incoming pod can only be scheduled '\n                    'to zone3 to become 1/1/1; scheduling it onto '\n                    'zone1(zone2) would make the ActualSkew(2-0) on '\n                    'zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, '\n                    \"incoming pod can be scheduled onto any zone. It's a \"\n                    'required field... (159 more)",
      "data": {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "app",
              "operator": "In",
              "values": [
                "nginx"
              ]
            }
          ],
          "matchLabels": {
            "env": "dev"
          }
        },
        "maxSkew": "abc",
        "topologyKey": "kubernetes.io/hostname",
        "whenUnsatisfiable": "DoNotSchedule"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"1\" is not of types \"integer\", \"null\"",
      "python_error": "'1' is not of type 'integer', 'null'\n\nFailed validating 'type' in schema['properties']['maxSkew']:\n    {'description': 'MaxSkew describes the degree to which pods may be '\n                    \"unevenly distributed. It's the maximum permitted \"\n                    'difference between the number of matching pods in any '\n                    'two topology domains of a given topology type. For '\n                    'example, in a 3-zone cluster, MaxSkew is set to 1, '\n                    'and pods with the same labelSelector spread as 1/1/0: '\n                    '| zone1 | zone2 | zone3 | |   P   |   P   |       | - '\n                    'if MaxSkew is 1, incoming pod can only be scheduled '\n                    'to zone3 to become 1/1/1; scheduling it onto '\n                    'zone1(zone2) would make the ActualSkew(2-0) on '\n                    'zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, '\n                    \"incoming pod can be scheduled onto any zone. It's a \"\n                    'required field. D.. (155 more)",
      "data": {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "app",
              "operator": "In",
              "values": [
                "nginx"
              ]
            }
          ],
          "matchLabels": {
            "env": "dev"
          }
        },
        "maxSkew": "1",
        "topologyKey": "kubernetes.io/hostname",
        "whenUnsatisfiable": "DoNotSchedule"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"one\" is not of types \"integer\", \"null\"",
      "python_error": "'one' is not of type 'integer', 'null'\n\nFailed validating 'type' in schema['properties']['maxSkew']:\n    {'description': 'MaxSkew describes the degree to which pods may be '\n                    \"unevenly distributed. It's the maximum permitted \"\n                    'difference between the number of matching pods in any '\n                    'two topology domains of a given topology type. For '\n                    'example, in a 3-zone cluster, MaxSkew is set to 1, '\n                    'and pods with the same labelSelector spread as 1/1/0: '\n                    '| zone1 | zone2 | zone3 | |   P   |   P   |       | - '\n                    'if MaxSkew is 1, incoming pod can only be scheduled '\n                    'to zone3 to become 1/1/1; scheduling it onto '\n                    'zone1(zone2) would make the ActualSkew(2-0) on '\n                    'zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, '\n                    \"incoming pod can be scheduled onto any zone. It's a \"\n                    'required field... (159 more)",
      "data": {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "app",
              "operator": "In",
              "values": [
                "nginx"
              ]
            }
          ],
          "matchLabels": {
            "env": "dev"
          }
        },
        "maxSkew": "one",
        "topologyKey": "kubernetes.io/hostname",
        "whenUnsatisfiable": "DoNotSchedule"
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['labelSelector']['properties']['matchLabels']['additionalProperties']:\n    {'type': 'string'}\n\nOn instance['labelSelector']['matchLabels']['extra']:\n    123",
      "data": {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "app",
              "operator": "In",
              "values": [
                "nginx"
              ]
            }
          ],
          "matchLabels": {
            "env": "dev",
            "extra": 123
          }
        },
        "maxSkew": 1,
        "topologyKey": "kubernetes.io/hostname",
        "whenUnsatisfiable": "DoNotSchedule"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "app",
              "operator": "In",
              "values": [
                "web"
              ]
            },
            {
              "key": "env",
              "operator": "NotIn",
              "values": [
                "dev"
              ]
            }
          ],
          "matchLabels": {
            "tier": "backend"
          }
        },
        "maxSkew": 1,
        "topologyKey": "kubernetes.io/hostname",
        "whenUnsatisfiable": "DoNotSchedule"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"not a number\" is not of types \"integer\", \"null\"",
      "python_error": "'not a number' is not of type 'integer', 'null'\n\nFailed validating 'type' in schema['properties']['maxSkew']:\n    {'description': 'MaxSkew describes the degree to which pods may be '\n                    \"unevenly distributed. It's the maximum permitted \"\n                    'difference between the number of matching pods in any '\n                    'two topology domains of a given topology type. For '\n                    'example, in a 3-zone cluster, MaxSkew is set to 1, '\n                    'and pods with the same labelSelector spread as 1/1/0: '\n                    '| zone1 | zone2 | zone3 | |   P   |   P   |       | - '\n                    'if MaxSkew is 1, incoming pod can only be scheduled '\n                    'to zone3 to become 1/1/1; scheduling it onto '\n                    'zone1(zone2) would make the ActualSkew(2-0) on '\n                    'zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, '\n                    \"incoming pod can be scheduled onto any zone. It's a \"\n                    'requir.. (177 more)",
      "data": {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "app",
              "operator": "In"
            }
          ],
          "matchLabels": {
            "tier": "backend"
          }
        },
        "maxSkew": "not a number",
        "topologyKey": "kubernetes.io/hostname",
        "whenUnsatisfiable": "DoNotSchedule"
      }
    }
  ]
}