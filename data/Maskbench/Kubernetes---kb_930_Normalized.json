{
  "description": "sample Kubernetes/kb_930_Normalized.json",
  "meta": {
    "full_size": 808,
    "stripped_size": 215,
    "features": [
      "items"
    ],
    "raw_features": [
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "description": "A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.",
    "properties": {
      "operator": {
        "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.",
        "type": [
          "string",
          "null"
        ]
      },
      "scopeName": {
        "description": "The name of the scope that the selector applies to.",
        "type": [
          "string",
          "null"
        ]
      },
      "values": {
        "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
        "items": {
          "type": [
            "string",
            "null"
          ]
        },
        "type": [
          "array",
          "null"
        ]
      }
    },
    "required": [
      "scopeName",
      "operator"
    ],
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "operator": "In",
        "scopeName": "example-scope",
        "values": [
          "value1",
          "value2",
          "value3"
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"null\", \"string\"",
      "python_error": "123 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['operator']:\n    {'description': \"Represents a scope's relationship to a set of values. \"\n                    'Valid operators are In, NotIn, Exists, DoesNotExist.',\n     'type': ['string', 'null']}\n\nOn instance['operator']:\n    123",
      "data": {
        "operator": 123,
        "scopeName": "example-scope",
        "values": [
          "value1",
          "value2",
          "value3"
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "{\"key\":\"value\"} is not of types \"array\", \"null\"",
      "python_error": "{'key': 'value'} is not of type 'array', 'null'\n\nFailed validating 'type' in schema['properties']['values']:\n    {'description': 'An array of string values. If the operator is In or '\n                    'NotIn, the values array must be non-empty. If the '\n                    'operator is Exists or DoesNotExist, the values array '\n                    'must be empty. This array is replaced during a '\n                    'strategic merge patch.',\n     'items': {'type': ['string', 'null']},\n     'type': ['array', 'null']}\n\nOn instance['values']:\n    {'key': 'value'}",
      "data": {
        "operator": "In",
        "scopeName": "example-scope",
        "values": {
          "key": "value"
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "operator": "In",
        "scopeName": "myScope",
        "values": [
          "value1",
          "value2",
          "value3"
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"string\" is not of types \"array\", \"null\"",
      "python_error": "'string' is not of type 'array', 'null'\n\nFailed validating 'type' in schema['properties']['values']:\n    {'description': 'An array of string values. If the operator is In or '\n                    'NotIn, the values array must be non-empty. If the '\n                    'operator is Exists or DoesNotExist, the values array '\n                    'must be empty. This array is replaced during a '\n                    'strategic merge patch.',\n     'items': {'type': ['string', 'null']},\n     'type': ['array', 'null']}\n\nOn instance['values']:\n    'string'",
      "data": {
        "operator": "In",
        "scopeName": "myScope",
        "values": "string"
      }
    }
  ]
}