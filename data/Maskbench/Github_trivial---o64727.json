{
  "description": "sample Github_trivial/o64727.json",
  "meta": {
    "full_size": 664,
    "stripped_size": 268,
    "features": [
      "pattern"
    ],
    "raw_features": [
      "$id",
      "$schema",
      "type",
      "type:string"
    ]
  },
  "schema": {
    "$id": "http://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/stix2.1/schemas/common/binary.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "binary",
    "description": "The ​binary data type represents a sequence of bytes. In order to allow pattern matching on custom objects, for all properties that use the binary type, the property name MUST end with '_bin'. The JSON MTI serialization represents this as a base64-­encoded string as specified in RFC4648​. Other serializations SHOULD use a native binary type, if available.",
    "type": "string",
    "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": "VGhlIHF1aWNrIGJyb3duIGZveA=="
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "{\"value\":\"VGhlIHF1aWNrIGJyb3duIGZveA\"} is not of type \"string\"",
      "python_error": "{'value': 'VGhlIHF1aWNrIGJyb3duIGZveA'} is not of type 'string'\n\nFailed validating 'type' in schema:\n    {'$id': 'http://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/stix2.1/schemas/common/binary.json',\n     '$schema': 'http://json-schema.org/draft-07/schema#',\n     'title': 'binary',\n     'description': 'The \\u200bbinary data type represents a sequence of '\n                    'bytes. In order to allow pattern matching on custom '\n                    'objects, for all properties that use the binary type, '\n                    \"the property name MUST end with '_bin'. The JSON MTI \"\n                    'serialization represents this as a base64-\\xadencoded '\n                    'string as specified in RFC4648\\u200b. Other '\n                    'serializations SHOULD use a native binary type, if '\n                    'available.',\n     'type': 'string',\n     'pattern': '^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$'}\n\nOn instance:\n    {'value': 'VGhlIHF1aWNrIGJyb3duIGZveA'}",
      "data": {
        "value": "VGhlIHF1aWNrIGJyb3duIGZveA"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"invalid_instance\":\"VGhlIHF1aWNrIGJyb3duIGZveA\"} is not of type \"string\"",
      "python_error": "{'invalid_instance': 'VGhlIHF1aWNrIGJyb3duIGZveA'} is not of type 'string'\n\nFailed validating 'type' in schema:\n    {'$id': 'http://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/stix2.1/schemas/common/binary.json',\n     '$schema': 'http://json-schema.org/draft-07/schema#',\n     'title': 'binary',\n     'description': 'The \\u200bbinary data type represents a sequence of '\n                    'bytes. In order to allow pattern matching on custom '\n                    'objects, for all properties that use the binary type, '\n                    \"the property name MUST end with '_bin'. The JSON MTI \"\n                    'serialization represents this as a base64-\\xadencoded '\n                    'string as specified in RFC4648\\u200b. Other '\n                    'serializations SHOULD use a native binary type, if '\n                    'available.',\n     'type': 'string',\n     'pattern': '^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$'}\n\nOn instance:\n    {'invalid_instance': 'VGhlIHF1aWNrIGJyb3duIGZveA'}",
      "data": {
        "invalid_instance": "VGhlIHF1aWNrIGJyb3duIGZveA"
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "{\"VGhlIHF1aWNrIGJyb3duIGZveA==\":\"Invalid\"} is not of type \"string\"",
      "python_error": "{'VGhlIHF1aWNrIGJyb3duIGZveA==': 'Invalid'} is not of type 'string'\n\nFailed validating 'type' in schema:\n    {'$id': 'http://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/stix2.1/schemas/common/binary.json',\n     '$schema': 'http://json-schema.org/draft-07/schema#',\n     'title': 'binary',\n     'description': 'The \\u200bbinary data type represents a sequence of '\n                    'bytes. In order to allow pattern matching on custom '\n                    'objects, for all properties that use the binary type, '\n                    \"the property name MUST end with '_bin'. The JSON MTI \"\n                    'serialization represents this as a base64-\\xadencoded '\n                    'string as specified in RFC4648\\u200b. Other '\n                    'serializations SHOULD use a native binary type, if '\n                    'available.',\n     'type': 'string',\n     'pattern': '^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$'}\n\nOn instance:\n    {'VGhlIHF1aWNrIGJyb3duIGZveA==': 'Invalid'}",
      "data": {
        "VGhlIHF1aWNrIGJyb3duIGZveA==": "Invalid"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"instance\":\"VGhlIHF1aWNrIGJyb3duIGZveA\"} is not of type \"string\"",
      "python_error": "{'instance': 'VGhlIHF1aWNrIGJyb3duIGZveA'} is not of type 'string'\n\nFailed validating 'type' in schema:\n    {'$id': 'http://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/stix2.1/schemas/common/binary.json',\n     '$schema': 'http://json-schema.org/draft-07/schema#',\n     'title': 'binary',\n     'description': 'The \\u200bbinary data type represents a sequence of '\n                    'bytes. In order to allow pattern matching on custom '\n                    'objects, for all properties that use the binary type, '\n                    \"the property name MUST end with '_bin'. The JSON MTI \"\n                    'serialization represents this as a base64-\\xadencoded '\n                    'string as specified in RFC4648\\u200b. Other '\n                    'serializations SHOULD use a native binary type, if '\n                    'available.',\n     'type': 'string',\n     'pattern': '^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$'}\n\nOn instance:\n    {'instance': 'VGhlIHF1aWNrIGJyb3duIGZveA'}",
      "data": {
        "instance": "VGhlIHF1aWNrIGJyb3duIGZveA"
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "{\"$id\":\"http://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/stix2.1/schemas/common/binary.json\",\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"binary\",\"description\":\"The ​binary data type represents a sequence of bytes. In order to allow pattern matching on custom objects, for all properties that use the binary type, the property name MUST end with '_bin'. The JSON MTI serialization represents this as a base64-­encoded string as specified in RFC4648​. Other serializations SHOULD use a native binary type, if available.\",\"type\":\"string\",\"pattern\":\"^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$\"} is not of type \"string\"",
      "python_error": "{'$id': 'http://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/stix2.1/schemas/common/binary.json', '$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'binary', 'description': \"The \\u200bbinary data type represents a sequence of bytes. In order to allow pattern matching on custom objects, for all properties that use the binary type, the property name MUST end with '_bin'. The JSON MTI serialization represents this as a base64-\\xadencoded string as specified in RFC4648\\u200b. Other serializations SHOULD use a native binary type, if available.\", 'type': 'string', 'pattern': '^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$'} is not of type 'string'\n\nFailed validating 'type' in schema:\n    {'$id': 'http://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/stix2.1/schemas/common/binary.json',\n     '$schema': 'http://json-schema.org/draft-07/schema#',\n     'title': 'binary',\n     'description': 'The \\u200bbinary data type represents a sequence of '\n    .. (1482 more)",
      "data": {
        "$id": "http://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/stix2.1/schemas/common/binary.json",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "binary",
        "description": "The ​binary data type represents a sequence of bytes. In order to allow pattern matching on custom objects, for all properties that use the binary type, the property name MUST end with '_bin'. The JSON MTI serialization represents this as a base64-­encoded string as specified in RFC4648​. Other serializations SHOULD use a native binary type, if available.",
        "type": "string",
        "pattern": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"VGhlIHF1aWNrIGJyb3duIGZveA===\":\"A===\"} is not of type \"string\"",
      "python_error": "{'VGhlIHF1aWNrIGJyb3duIGZveA===': 'A==='} is not of type 'string'\n\nFailed validating 'type' in schema:\n    {'$id': 'http://raw.githubusercontent.com/oasis-open/cti-stix2-json-schemas/stix2.1/schemas/common/binary.json',\n     '$schema': 'http://json-schema.org/draft-07/schema#',\n     'title': 'binary',\n     'description': 'The \\u200bbinary data type represents a sequence of '\n                    'bytes. In order to allow pattern matching on custom '\n                    'objects, for all properties that use the binary type, '\n                    \"the property name MUST end with '_bin'. The JSON MTI \"\n                    'serialization represents this as a base64-\\xadencoded '\n                    'string as specified in RFC4648\\u200b. Other '\n                    'serializations SHOULD use a native binary type, if '\n                    'available.',\n     'type': 'string',\n     'pattern': '^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$'}\n\nOn instance:\n    {'VGhlIHF1aWNrIGJyb3duIGZveA===': 'A==='}",
      "data": {
        "VGhlIHF1aWNrIGJyb3duIGZveA===": "A==="
      }
    }
  ]
}