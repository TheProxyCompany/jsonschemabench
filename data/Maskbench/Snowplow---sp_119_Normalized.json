{
  "description": "sample Snowplow/sp_119_Normalized.json",
  "meta": {
    "full_size": 2639,
    "stripped_size": 823,
    "features": [
      "@minmaxLength",
      "additionalProperties"
    ],
    "raw_features": [
      "_boolSchema",
      "maxLength",
      "minLength",
      "properties",
      "type",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "additionalProperties": true,
    "description": "Schema for a Mailgun message opened event",
    "properties": {
      "campaignId": {
        "description": "id of campaign triggering the event.",
        "type": "string"
      },
      "campaignName": {
        "description": "The name of campaign triggering the event.",
        "type": "string"
      },
      "city": {
        "description": "Name of the city the event came from or ‘unknown’ if it couldn’t be determined.",
        "maxLength": 64,
        "type": "string"
      },
      "clientName": {
        "description": "Name of the client software, e.g. ‘Thunderbird’, ‘Chrome’, ‘Firefox’.",
        "maxLength": 64,
        "type": "string"
      },
      "clientOs": {
        "description": "OS family running the client software, e.g. ‘Linux’, ‘Windows’, ‘OSX’.",
        "maxLength": 64,
        "type": "string"
      },
      "clientType": {
        "description": "Type of software the link was opened in, e.g. ‘browser’, ‘mobile browser’, ‘email client’.",
        "maxLength": 64,
        "type": "string"
      },
      "country": {
        "description": "Two-letter country code (as specified by ISO3166) the event came from or ‘unknown’ if it couldn’t be determined.",
        "maxLength": 8,
        "type": "string"
      },
      "deviceType": {
        "description": "Device type the message was opened on. Can be ‘desktop’, ‘mobile’, ‘tablet’, ‘other’ or ‘unknown’.",
        "maxLength": 64,
        "type": "string"
      },
      "domain": {
        "_format": "hostname",
        "description": "Domain that sent the original message.",
        "maxLength": 256,
        "type": "string"
      },
      "ip": {
        "_format": "ipv4",
        "description": "IP address the event originated from (currently only seems to support ipv4).",
        "type": "string"
      },
      "mailingList": {
        "description": "The address of mailing list the original message was sent to.",
        "type": "string"
      },
      "messageId": {
        "description": "The Id of the message that bounced.",
        "maxLength": 1024,
        "type": "string"
      },
      "recipient": {
        "_format": "email",
        "description": "Recipient who opened the message.",
        "maxLength": 256,
        "type": "string"
      },
      "region": {
        "description": "Two-letter or two-digit region code or ‘unknown’ if it couldn’t be determined.",
        "maxLength": 8,
        "type": "string"
      },
      "signature": {
        "description": "String with hexadecimal digits generate by HMAC algorithm (see securing webhooks).",
        "maxLength": 128,
        "type": "string"
      },
      "tag": {
        "description": "Message tag, if it was tagged. See Tagging.",
        "type": "string"
      },
      "timestamp": {
        "_format": "date-time",
        "description": "Timestamp in ISO8601 format.",
        "type": "string"
      },
      "token": {
        "description": "Randomly generated string with length 50 (see securing webhooks).",
        "maxLength": 50,
        "minLength": 50,
        "type": "string"
      },
      "userAgent": {
        "description": "User agent string of the client triggered the event.",
        "maxLength": 1024,
        "type": "string"
      }
    },
    "self": {
      "format": "jsonschema",
      "name": "message_opened",
      "vendor": "com.mailgun",
      "version": "1-0-0"
    },
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "campaignId": "12345",
        "campaignName": "Summer Sale",
        "city": "New York",
        "clientName": "Chrome",
        "clientOs": "Windows",
        "clientType": "browser",
        "country": "US",
        "deviceType": "desktop",
        "domain": "example.com",
        "ip": "192.168.1.1",
        "mailingList": "summer-sale@example.com",
        "messageId": "202201011234567890abcdef",
        "recipient": "john.doe@example.com",
        "region": "NY",
        "signature": "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef",
        "tag": "summer-sale",
        "timestamp": "2022-01-01T12:34:56Z",
        "token": "0123456789abcdef0123456789abcdef0123456789abcdef01",
        "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36",
        "extraProperty": "This is an extra property that is allowed due to the 'additionalProperties': true setting in the schema."
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword or maxLength keyword",
      "valid": false,
      "rust_error": "\"0123456789abcdef0123456789abcdef0123456789abcdef0\" is shorter than 50 characters",
      "python_error": "'0123456789abcdef0123456789abcdef0123456789abcdef0' is too short\n\nFailed validating 'minLength' in schema['properties']['token']:\n    {'description': 'Randomly generated string with length 50 (see '\n                    'securing webhooks).',\n     'maxLength': 50,\n     'minLength': 50,\n     'type': 'string'}\n\nOn instance['token']:\n    '0123456789abcdef0123456789abcdef0123456789abcdef0'",
      "data": {
        "campaignId": "12345",
        "campaignName": "Summer Sale",
        "city": "New York",
        "clientName": "Chrome",
        "clientOs": "Windows",
        "clientType": "browser",
        "country": "US",
        "deviceType": "desktop",
        "domain": "example.com",
        "ip": "192.168.1.1",
        "mailingList": "summer-sale@example.com",
        "messageId": "202201011234567890abcdef",
        "recipient": "john.doe@example.com",
        "region": "NY",
        "signature": "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef",
        "tag": "summer-sale",
        "timestamp": "2022-01-01T12:34:56Z",
        "token": "0123456789abcdef0123456789abcdef0123456789abcdef0",
        "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36",
        "extraProperty": "This is an extra property that is allowed due to the 'additionalProperties': true setting in the schema."
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"0123456789abcdef0123456789\" is shorter than 50 characters",
      "python_error": "'0123456789abcdef0123456789' is too short\n\nFailed validating 'minLength' in schema['properties']['token']:\n    {'description': 'Randomly generated string with length 50 (see '\n                    'securing webhooks).',\n     'maxLength': 50,\n     'minLength': 50,\n     'type': 'string'}\n\nOn instance['token']:\n    '0123456789abcdef0123456789'",
      "data": {
        "campaignId": "12345",
        "campaignName": "Summer Sale",
        "city": "New York",
        "clientName": "Chrome",
        "clientOs": "Windows",
        "clientType": "browser",
        "country": "USA",
        "deviceType": "desktop",
        "domain": "example.com",
        "ip": "256.1.1.1",
        "mailingList": "summer-sale@example.com",
        "messageId": "202201011234567890abcdef",
        "recipient": "john.doe@example.com",
        "region": "New York",
        "signature": "0123456789abcdef0123456789abcdef0123456789abcdef01",
        "tag": "summer-sale",
        "timestamp": "2022-01-01 12:34:56",
        "token": "0123456789abcdef0123456789",
        "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36 This is an extra long user agent string that exceeds the maxLength of 1024 characters. It is used to test the maxLength of the userAgent field and ensure that it is properly validated according to the schema",
        "additional characters beyond the maxLength of 8": "country",
        "invalid ipv4 format": "ip",
        "invalid region code": "region",
        "shorter than maxLength": "signature",
        "not in ISO8601 format": "timestamp",
        "shorter than minLength and maxLength": "token",
        "extraProperty": "This is an extra property that is allowed due to the 'additionalProperties': true setting in the schema."
      }
    }
  ]
}