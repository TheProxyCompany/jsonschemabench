{
  "description": "sample JsonSchemaStore/jasmine.json",
  "meta": {
    "full_size": 2636,
    "stripped_size": 887,
    "features": [
      "$ref",
      "@siblingKeys",
      "allOf",
      "anyOf",
      "items"
    ],
    "raw_features": [
      "$schema",
      "definitions",
      "id",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:null",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "allOf": [
      {
        "$ref": "#/definitions/root-items"
      },
      {
        "type": "object",
        "properties": {
          "env": {
            "$ref": "#/definitions/env-items"
          }
        }
      },
      {
        "$ref": "#/definitions/env-items"
      }
    ],
    "definitions": {
      "root-items": {
        "type": "object",
        "required": [
          "spec_dir",
          "spec_files"
        ],
        "properties": {
          "spec_dir": {
            "description": "Spec directory path relative to the current working dir when jasmine is executed.",
            "type": "string",
            "default": ""
          },
          "spec_files": {
            "description": "Array of filepaths (and globs) relative to spec_dir to include and exclude.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "helpers": {
            "description": "Array of filepaths (and globs) relative to spec_dir to include before jasmine specs",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          }
        }
      },
      "env-items": {
        "description": "Configuration of the Jasmine environment",
        "type": "object",
        "properties": {
          "autoCleanClosure": {
            "description": "Clean closures when a suite is done running (done by clearing the stored function reference). This prevents memory leaks, but you won't be able to run jasmine multiple times.",
            "type": "boolean",
            "default": false
          },
          "failSpecWithNoExpectations": {
            "description": "Whether to fail the spec if it ran no expectations. By default a spec that ran no expectations is reported as passed. Setting this to true will report such spec as a failure.",
            "type": "boolean",
            "default": false
          },
          "hideDisbaled": {
            "description": "Whether or not reporters should hide disabled specs from their output. Currently only supported by Jasmine's HTMLReporter.",
            "type": "boolean",
            "default": false
          },
          "random": {
            "description": "Whether to randomize spec execution order.",
            "type": "boolean",
            "default": true
          },
          "seed": {
            "description": "Seed to use as the basis of randomization. Null causes the seed to be determined randomly at the start of execution.",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "default": null
          },
          "stopOnSpecFailure": {
            "description": "Whether to stop execution of the suite after the first spec failure.",
            "type": "boolean",
            "default": false
          },
          "stopSpecOnExpectationFailure": {
            "description": "Whether to cause specs to only have one expectation failure.",
            "type": "boolean",
            "default": false
          },
          "verboseDeprication": {
            "description": "Whether or not to issue warnings for certain deprecated functionality every time it's used. If not set or set to false, deprecation warnings for methods that tend to be called frequently will be issued only once or otherwise throttled to to prevent the suite output from being flooded with warnings.",
            "type": "boolean",
            "default": false
          }
        }
      }
    },
    "id": "https://json.schemastore.org/jasmine.json",
    "title": "Schema for jasmine JSON config file"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "spec_dir": "spec",
        "spec_files": [
          "**/*.spec.js"
        ],
        "helpers": [
          "helpers/**/*.js"
        ],
        "env": {
          "autoCleanClosure": true,
          "failSpecWithNoExpectations": true,
          "hideDisabled": true,
          "randomize": true,
          "seed ": 123,
          "stopOnSpecFailure ": true,
          "stopSpecOnExpectationFailure ": true,
          "verboseDeprecation ": true
        },
        "autoCleanClosure": true,
        "failSpecWithNoExpectations": true,
        "hideDisabled": true,
        "randomize": true,
        "seed ": 123,
        "stopOnSpecFailure ": true,
        "stopSpecOnExpectationFailure ": true,
        "verboseDeprecation ": true
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "{} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema['allOf'][2]['properties']['seed']:\n    {'description': 'Seed to use as the basis of randomization. Null '\n                    'causes the seed to be determined randomly at the '\n                    'start of execution.',\n     'anyOf': [{'type': 'string'}, {'type': 'number'}, {'type': 'null'}],\n     'default': None}\n\nOn instance['seed']:\n    {}",
      "data": {
        "spec_dir": "spec",
        "spec_files": [
          "**/*.spec.js"
        ],
        "helpers": [
          "helpers/**/*.js"
        ],
        "env": {
          "autoCleanClosure": true,
          "failSpecWithNoExpectations": true,
          "hideDisabled": true,
          "randomize": true,
          "seed": {},
          "stopOnSpecFailure": true,
          "stopSpecOnExpectationFailure": true,
          "verboseDeprecation": true
        },
        "autoCleanClosure": true,
        "failSpecWithNoExpectations": true,
        "hideDisabled": true,
        "randomize": true,
        "seed": {},
        "stopOnSpecFailure": true,
        "stopSpecOnExpectationFailure": true,
        "verboseDeprecation": true
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['allOf'][0]['properties']['spec_dir']:\n    {'description': 'Spec directory path relative to the current working '\n                    'dir when jasmine is executed.',\n     'type': 'string',\n     'default': ''}\n\nOn instance['spec_dir']:\n    123",
      "data": {
        "spec_dir": 123,
        "spec_files": [
          "**/*.spec.js"
        ],
        "helpers": [
          "helpers/**/*.js"
        ],
        "env": {
          "autoCleanClosure": true,
          "failSpecWithNoExpectations": true,
          "hideDisabled": true,
          "randomize": true,
          "seed ": 123,
          "stopOnSpecFailure ": true,
          "stopSpecOnExpectationFailure ": true,
          "verboseDeprecation ": true
        },
        "autoCleanClosure": true,
        "failSpecWithNoExpectations": true,
        "hideDisabled": true,
        "randomize": true,
        "seed ": 123,
        "stopOnSpecFailure ": true,
        "stopSpecOnExpectationFailure ": true,
        "verboseDeprecation ": true
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['allOf'][0]['properties']['spec_dir']:\n    {'description': 'Spec directory path relative to the current working '\n                    'dir when jasmine is executed.',\n     'type': 'string',\n     'default': ''}\n\nOn instance['spec_dir']:\n    123",
      "data": {
        "spec_dir": 123,
        "spec_files": [
          "**/*.spec.js"
        ],
        "helpers": [
          "helpers/**/*.js"
        ],
        "env": {
          "autoCleanClosure": true,
          "failSpecWithNoExpectations": true,
          "hideDisabled": true,
          "randomize": true,
          "seed": 123,
          "stopOnSpecFailure": true,
          "stopSpecOnExpectationFailure": true,
          "verboseDeprecation": true
        },
        "autoCleanClosure": true,
        "failSpecWithNoExpectations": true,
        "hideDisabled": true,
        "randomize": true,
        "seed": 123,
        "stopOnSpecFailure": true,
        "stopSpecOnExpectationFailure": true,
        "verboseDeprecation": true
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "spec_dir": "spec",
        "spec_files": [
          "**/*.spec.js"
        ],
        "helpers": [
          "helpers/**/*.js"
        ],
        "env": {
          "autoCleanClosure": true,
          "failSpecWithNoExpectations": true,
          "random": false,
          "seed": 123,
          "stopOnSpecFailure": true,
          "stopSpecOnExpectationFailure": true,
          "hideDisabled": true,
          "verboseDeprecation": true
        },
        "autoCleanClosure": true,
        "failSpecWithNoExpectations": true,
        "random": false,
        "seed": 123,
        "stopOnSpecFailure": true,
        "stopSpecOnExpectationFailure": true,
        "hideDisabled": true,
        "verboseDeprecation": true
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "{} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema['allOf'][2]['properties']['seed']:\n    {'description': 'Seed to use as the basis of randomization. Null '\n                    'causes the seed to be determined randomly at the '\n                    'start of execution.',\n     'anyOf': [{'type': 'string'}, {'type': 'number'}, {'type': 'null'}],\n     'default': None}\n\nOn instance['seed']:\n    {}",
      "data": {
        "spec_dir": "spec",
        "spec_files": [
          "**/*.spec.js"
        ],
        "helpers": [
          "helpers/**/*.js"
        ],
        "env": {
          "autoCleanClosure": true,
          "failSpecWithNoExpectations": true,
          "hideDisabled": true,
          "random": false,
          "seed": {},
          "stopOnSpecFailure": true,
          "stopSpecOnExpectationFailure": true,
          "verboseDeprecation": true
        },
        "autoCleanClosure": true,
        "failSpecWithNoExpectations": true,
        "hideDisabled": true,
        "random": false,
        "seed": {},
        "stopOnSpecFailure": true,
        "stopSpecOnExpectationFailure": true,
        "verboseDeprecation": true
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['allOf'][0]['properties']['spec_dir']:\n    {'description': 'Spec directory path relative to the current working '\n                    'dir when jasmine is executed.',\n     'type': 'string',\n     'default': ''}\n\nOn instance['spec_dir']:\n    123",
      "data": {
        "spec_dir": 123,
        "spec_files": [
          "**/*.spec.js"
        ],
        "helpers": [
          "helpers/**/*.js"
        ],
        "env": {
          "autoCleanClosure": true,
          "failSpecWithNoExpectations": true,
          "hideDisabled": true,
          "random": false,
          "seed": 123,
          "stopOnSpecFailure": true,
          "stopSpecOnExpectationFailure": true,
          "verboseDeprecation": true
        },
        "autoCleanClosure": true,
        "failSpecWithNoExpectations": true,
        "hideDisabled": true,
        "random": false,
        "seed": 123,
        "stopOnSpecFailure": true,
        "stopSpecOnExpectationFailure": true,
        "verboseDeprecation": true
      }
    }
  ]
}