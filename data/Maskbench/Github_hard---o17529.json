{
  "description": "sample Github_hard/o17529.json",
  "meta": {
    "full_size": 6270,
    "stripped_size": 5847,
    "features": [
      "$ref",
      "@minmaxInteger",
      "@minmaxItems",
      "@minmaxLength",
      "@siblingKeys",
      "additionalProperties",
      "enum",
      "items",
      "oneOf"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "minItems",
      "minLength",
      "minimum",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:null",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "Doctrine ORM Entity JSON schema for Xcore Generator",
    "type": "object",
    "definitions": {
      "entity-name": {
        "type": "string",
        "description": "Entity name without namespace",
        "minLength": 1
      },
      "property-name": {
        "type": "string",
        "description": "Property name",
        "minLength": 1
      }
    },
    "properties": {
      "name": {
        "$ref": "#/definitions/entity-name"
      },
      "get": {
        "type": "boolean"
      },
      "set": {
        "type": "boolean"
      },
      "namespace": {
        "type": "string"
      },
      "nullable": {
        "type": "boolean",
        "default": true,
        "description": "All properties are nullable by default."
      },
      "properties": {
        "type": "array",
        "minItems": 1,
        "items": {
          "properties": {
            "id": {
              "type": "boolean",
              "default": true
            },
            "generatedValue": {
              "enum": [
                "AUTO",
                "SEQUENCE",
                "IDENTITY",
                "UUID",
                "TABLE",
                "NONE",
                "CUSTOM"
              ],
              "default": "AUTO"
            },
            "sequenceGenerator": {
              "type": "object",
              "properties": {
                "sequenceName": {
                  "type": "string"
                },
                "initialValue": {
                  "type": "integer"
                },
                "allocationSize": {
                  "type": "integer"
                }
              }
            },
            "name": {
              "$ref": "#/definitions/property-name"
            },
            "columnName": {
              "type": "string"
            },
            "get": {
              "enum": [
                true,
                false,
                "has",
                "is"
              ],
              "description": "Whether is getter enabled/getter type"
            },
            "set": {
              "type": "boolean"
            },
            "length": {
              "type": "integer",
              "minimum": 1
            },
            "nullable": {
              "type": "boolean",
              "default": true
            },
            "type": {
              "enum": [
                "string",
                "integer",
                "smallint",
                "bigint",
                "boolean",
                "decimal",
                "date",
                "time",
                "datetime",
                "datetimez",
                "text",
                "object",
                "array",
                "simple_array",
                "json_array",
                "float",
                "guid",
                "blob"
              ]
            },
            "manyToOne": {
              "type": "object",
              "properties": {
                "targetEntity": {
                  "type": "string"
                },
                "inversedBy": {
                  "type": "string"
                }
              },
              "required": [
                "targetEntity"
              ]
            },
            "oneToOne": {
              "type": "object",
              "properties": {
                "targetEntity": {
                  "type": "string"
                },
                "mappedBy": {
                  "type": "string"
                },
                "inversedBy": {
                  "type": "string"
                }
              },
              "required": [
                "targetEntity"
              ]
            },
            "oneToMany": {
              "type": "object",
              "properties": {
                "targetEntity": {
                  "type": "string"
                },
                "mappedBy": {
                  "type": "string"
                }
              }
            },
            "manyToMany": {
              "type": "object",
              "properties": {
                "targetEntity": {
                  "type": "string"
                },
                "inversedBy": {
                  "type": "string"
                },
                "mappedBy": {
                  "type": "string"
                }
              }
            },
            "joinColumn": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "referencedColumnName": {
                  "type": "string"
                }
              }
            },
            "asserts": {
              "type": "array",
              "_uniqueItems": true,
              "minItems": 1,
              "items": {
                "oneOf": [
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "NotBlank"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Blank"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "NotNull"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "IsNull"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "IsTrue"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "IsFalse"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Type"
                        ]
                      },
                      "type": {
                        "enum": [
                          "array",
                          "bool",
                          "callable",
                          "float",
                          "double",
                          "int",
                          "integer",
                          "long",
                          "null",
                          "numeric",
                          "object",
                          "real",
                          "resource",
                          "scalar",
                          "string",
                          "alnum",
                          "alpha",
                          "cntrl",
                          "digit",
                          "graph",
                          "lower",
                          "print",
                          "punct",
                          "space",
                          "upper",
                          "xdigit"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Email"
                        ]
                      },
                      "strict": {
                        "type": "boolean",
                        "default": true
                      },
                      "checkMX": {
                        "type": "boolean",
                        "default": true
                      },
                      "checkHost": {
                        "type": "boolean",
                        "default": true
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Length"
                        ]
                      },
                      "min": {
                        "type": "integer"
                      },
                      "max": {
                        "type": "integer"
                      },
                      "charset": {
                        "type": "integer",
                        "default": "UTF-8"
                      },
                      "minMessage": {
                        "type": "string"
                      },
                      "maxMessage": {
                        "type": "string"
                      },
                      "exactMessage": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Url"
                        ]
                      },
                      "protocols": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "checkDNS": {
                        "type": "boolean",
                        "default": true
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Regex"
                        ]
                      },
                      "pattern": {
                        "type": "string"
                      },
                      "htmlPattern": {
                        "type": [
                          "string",
                          "boolean"
                        ]
                      },
                      "match": {
                        "type": "boolean",
                        "default": true
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Ip"
                        ]
                      },
                      "version": {
                        "enum": [
                          "4",
                          "6",
                          "all",
                          "4_no_priv",
                          "6_no_priv",
                          "all_no_priv",
                          "4_no_res",
                          "6_no_res",
                          "all_no_res",
                          "4_public",
                          "6_public",
                          "all_public"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Uuid"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Range"
                        ]
                      },
                      "min": {
                        "type": [
                          "integer",
                          "string"
                        ]
                      },
                      "max": {
                        "type": [
                          "integer",
                          "string"
                        ]
                      },
                      "minMessage": {
                        "type": "string"
                      },
                      "maxMessage": {
                        "type": "string"
                      },
                      "invalidMessage": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "EqualTo"
                        ]
                      },
                      "value": {
                        "type": [
                          "integer",
                          "number",
                          "null",
                          "string",
                          "boolean"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "NotEqualTo"
                        ]
                      },
                      "value": {
                        "type": [
                          "integer",
                          "number",
                          "null",
                          "string",
                          "boolean"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "IdenticalTo"
                        ]
                      },
                      "value": {
                        "type": [
                          "integer",
                          "number",
                          "null",
                          "string",
                          "boolean"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "NotIdenticalTo"
                        ]
                      },
                      "value": {
                        "type": [
                          "integer",
                          "number",
                          "null",
                          "string",
                          "boolean"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "LessThan"
                        ]
                      },
                      "value": {
                        "type": [
                          "integer",
                          "number",
                          "null",
                          "string",
                          "boolean"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "LessThanOrEqual"
                        ]
                      },
                      "value": {
                        "type": [
                          "integer",
                          "number",
                          "null",
                          "string",
                          "boolean"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "GreaterThan"
                        ]
                      },
                      "value": {
                        "type": [
                          "integer",
                          "number",
                          "null",
                          "string",
                          "boolean"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "GreaterThanOrEqual"
                        ]
                      },
                      "value": {
                        "type": [
                          "integer",
                          "number",
                          "null",
                          "string",
                          "boolean"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Date"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "DateTime"
                        ]
                      },
                      "format": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Time"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Language"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Locale"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Country"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Currency"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Luhn"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Iban"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "properties": {
                      "assert": {
                        "enum": [
                          "Bic"
                        ]
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "required": [
                  "assert"
                ]
              }
            }
          },
          "additionalProperties": false,
          "required": [
            "name"
          ]
        },
        "additionalProperties": false
      }
    },
    "required": [
      "name"
    ],
    "additionalProperties": false
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "name": "User",
        "get": true,
        "set": true,
        "namespace": "App\\Entity",
        "nullable": true,
        "properties": [
          {
            "id": true,
            "generatedValue": "AUTO",
            "name": "id",
            "columnName": "id",
            "get": true,
            "set": true,
            "length": 11,
            "nullable": false,
            "type": "integer"
          },
          {
            "name": "username",
            "columnName": "username",
            "get": true,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Username cannot be blank."
              },
              {
                "assert": "Length",
                "min": 3,
                "max": 255,
                "minMessage": "Username must be at least 3 characters long.",
                "maxMessage": "Username cannot be longer than 255 characters."
              }
            ]
          },
          {
            "name": "email",
            "columnName": "email",
            "get": true,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Email cannot be blank."
              },
              {
                "assert": "Email",
                "strict": true,
                "checkMX": true,
                "checkHost": true,
                "message": "Invalid email address."
              }
            ]
          },
          {
            "name": "password",
            "columnName": "password",
            "get": false,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Password cannot be blank."
              },
              {
                "assert": "Length",
                "min": 8,
                "max": 255,
                "minMessage": "Password must be at least 8 characters long.",
                "maxMessage": "Password cannot be longer than 255 characters."
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "name": "User",
        "get": true,
        "set": true,
        "namespace": "App\\Entity",
        "nullable": true,
        "properties": [
          {
            "id": true,
            "generatedValue": "AUTO",
            "name": "id",
            "columnName": "id",
            "get": true,
            "set": true,
            "type": "integer"
          },
          {
            "name": "username",
            "columnName": "username",
            "get": true,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Username cannot be blank"
              },
              {
                "assert": "Length",
                "min": 3,
                "max": 255,
                "minMessage": "Username must be at least 3 characters long",
                "maxMessage": "Username cannot be longer than 255 characters"
              }
            ]
          },
          {
            "name": "email",
            "columnName": "email",
            "get": true,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Email cannot be blank"
              },
              {
                "assert": "Email",
                "strict": true,
                "checkMX": true,
                "checkHost": true,
                "message": "Invalid email address"
              }
            ]
          },
          {
            "name": "password",
            "columnName": "password",
            "get": false,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Password cannot be blank"
              },
              {
                "assert": "Length",
                "min": 8,
                "max": 255,
                "minMessage": "Password must be at least 8 characters long",
                "maxMessage": "Password cannot be longer than 255 characters"
              }
            ]
          },
          {
            "name": "roles",
            "columnName": "roles",
            "get": true,
            "set": true,
            "type": "array",
            "manyToMany": {
              "targetEntity": "Role",
              "mappedBy": "users"
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword",
      "valid": false,
      "rust_error": "0 is less than the minimum of 1",
      "python_error": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['properties']['items']['properties']['length']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['properties'][1]['length']:\n    0",
      "data": {
        "name": "User",
        "get": true,
        "set": true,
        "namespace": "App\\Entity",
        "nullable": true,
        "properties": [
          {
            "id": true,
            "generatedValue": "AUTO",
            "sequenceGenerator": {
              "sequenceName": "seq",
              "initialValue": 0,
              "allocationSize": 1
            },
            "name": "id",
            "columnName": "id",
            "get": true,
            "set": true,
            "type": "integer"
          },
          {
            "name": "username",
            "columnName": "username",
            "get": true,
            "set": true,
            "length": 0,
            "nullable": false,
            "type": "string"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "[\"integer\",\"string\"] is not one of [\"string\",\"integer\",\"smallint\",\"bigint\",\"boolean\",\"decimal\",\"date\",\"time\",\"datetime\",\"datetimez\",\"text\",\"object\",\"array\",\"simple_array\",\"json_array\",\"float\",\"guid\",\"blob\"]",
      "python_error": "['integer', 'string'] is not one of ['string', 'integer', 'smallint', 'bigint', 'boolean', 'decimal', 'date', 'time', 'datetime', 'datetimez', 'text', 'object', 'array', 'simple_array', 'json_array', 'float', 'guid', 'blob']\n\nFailed validating 'enum' in schema['properties']['properties']['items']['properties']['type']:\n    {'enum': ['string',\n              'integer',\n              'smallint',\n              'bigint',\n              'boolean',\n              'decimal',\n              'date',\n              'time',\n              'datetime',\n              'datetimez',\n              'text',\n              'object',\n              'array',\n              'simple_array',\n              'json_array',\n              'float',\n              'guid',\n              'blob']}\n\nOn instance['properties'][0]['type']:\n    ['integer', 'string']",
      "data": {
        "name": "User",
        "get": true,
        "set": true,
        "namespace": "App\\Entity",
        "nullable": true,
        "properties": [
          {
            "id": true,
            "generatedValue": "AUTO",
            "name": "id",
            "columnName": "id",
            "get": true,
            "set": true,
            "type": [
              "integer",
              "string"
            ]
          },
          {
            "name": "username",
            "columnName": "username",
            "get": true,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Username cannot be blank"
              },
              {
                "assert": "Length",
                "min": 3,
                "max": 255,
                "minMessage": "Username must be at least 3 characters long",
                "maxMessage": "Username cannot be longer than 255 characters"
              }
            ]
          },
          {
            "name": "email",
            "columnName": "email",
            "get": true,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Email cannot be blank"
              },
              {
                "assert": "Email",
                "strict": true,
                "checkMX": true,
                "checkHost": true,
                "message": "Invalid email address"
              }
            ]
          },
          {
            "name": "password",
            "columnName": "password",
            "get": false,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Password cannot be blank"
              },
              {
                "assert": "Length",
                "min": 8,
                "max": 255,
                "minMessage": "Password must be at least 8 characters long",
                "maxMessage": "Password cannot be longer than 255 characters"
              }
            ]
          },
          {
            "name": "roles",
            "columnName": "roles",
            "get": true,
            "set": true,
            "type": "object",
            "manyToMany": {
              "targetEntity": "Role",
              "mappedBy": "users"
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['name']:\n    {'type': 'string',\n     'description': 'Entity name without namespace',\n     'minLength': 1}\n\nOn instance['name']:\n    ''",
      "data": {
        "name": "",
        "get": true,
        "set": true,
        "namespace": "App\\Entity",
        "nullable": true,
        "properties": [
          {
            "id": true,
            "generatedValue": "AUTO",
            "name": "id",
            "columnName": "id",
            "get": true,
            "set": true,
            "type": "integer"
          },
          {
            "name": "username",
            "columnName": "username",
            "get": true,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Username cannot be blank"
              },
              {
                "assert": "Length",
                "min": 3,
                "max": 255,
                "minMessage": "Username must be at least 3 characters long",
                "maxMessage": "Username cannot be longer than 255 characters"
              }
            ]
          },
          {
            "name": "email",
            "columnName": "email",
            "get": true,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Email cannot be blank"
              },
              {
                "assert": "Email",
                "strict": true,
                "checkMX": true,
                "checkHost": true,
                "message": "Invalid email address"
              }
            ]
          },
          {
            "name": "password",
            "columnName": "password",
            "get": false,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Password cannot be blank"
              },
              {
                "assert": "Length",
                "min": 8,
                "max": 255,
                "minMessage": "Password must be at least 8 characters long",
                "maxMessage": "Password cannot be longer than 255 characters"
              }
            ]
          },
          {
            "name": "roles",
            "columnName": "roles",
            "get": true,
            "set": true,
            "type": "array",
            "manyToMany": {
              "targetEntity": "Role",
              "mappedBy": "users"
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minItems keyword",
      "valid": false,
      "rust_error": "[] has less than 1 item",
      "python_error": "[] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['properties']:\n    {'type': 'array',\n     'minItems': 1,\n     'items': {'properties': {'id': {'type': 'boolean', 'default': True},\n                              'generatedValue': {'enum': ['AUTO',\n                                                          'SEQUENCE',\n                                                          'IDENTITY',\n                                                          'UUID',\n                                                          'TABLE',\n                                                          'NONE',\n                                                          'CUSTOM'],\n                                                 'default': 'AUTO'},\n                              'sequenceGenerator': {'type': 'object',\n                                                    'properties': {'sequenceName': {'type': 'string'},\n                                                                   'initialValue': {'type': 'integer.. (22425 more)",
      "data": {
        "name": "User",
        "get": true,
        "set": true,
        "namespace": "App\\Entity",
        "nullable": true,
        "properties": []
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['properties']['items']['properties']['name']:\n    {'type': 'string', 'description': 'Property name', 'minLength': 1}\n\nOn instance['properties'][0]['name']:\n    ''",
      "data": {
        "name": "User",
        "get": true,
        "set": true,
        "namespace": "App\\Entity",
        "nullable": true,
        "properties": [
          {
            "id": true,
            "generatedValue": "AUTO",
            "name": "",
            "columnName": "id",
            "get": true,
            "set": true,
            "type": "integer"
          },
          {
            "name": "username",
            "columnName": "username",
            "get": true,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Username cannot be blank"
              },
              {
                "assert": "Length",
                "min": 3,
                "max": 255,
                "minMessage": "Username must be at least 3 characters long",
                "maxMessage": "Username cannot be longer than 255 characters"
              }
            ]
          },
          {
            "name": "email",
            "columnName": "email",
            "get": true,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Email cannot be blank"
              },
              {
                "assert": "Email",
                "strict": true,
                "checkMX": true,
                "checkHost": true,
                "message": "Invalid email address"
              }
            ]
          },
          {
            "name": "password",
            "columnName": "password",
            "get": false,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string",
            "asserts": [
              {
                "assert": "NotBlank",
                "message": "Password cannot be blank"
              },
              {
                "assert": "Length",
                "min": 8,
                "max": 255,
                "minMessage": "Password must be at least 8 characters long",
                "maxMessage": "Password cannot be longer than 255 characters"
              }
            ]
          },
          {
            "name": "roles",
            "columnName": "roles",
            "get": true,
            "set": true,
            "type": "array",
            "manyToMany": {
              "targetEntity": "Role",
              "mappedBy": "users"
            }
          },
          {
            "name": "extraField",
            "columnName": "extraField",
            "get": true,
            "set": true,
            "length": 255,
            "nullable": false,
            "type": "string"
          }
        ]
      }
    }
  ]
}