{
  "description": "sample JsonSchemaStore/creatomic.json",
  "meta": {
    "full_size": 1987,
    "stripped_size": 731,
    "features": [
      "enum",
      "items"
    ],
    "raw_features": [
      "$schema",
      "id",
      "properties",
      "type",
      "type:[]",
      "type:array",
      "type:boolean",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "id": "https://json.schemastore.org/creatomic.json",
    "properties": {
      "tslint.enable": {
        "type": "boolean",
        "default": true,
        "description": "Control whether tslint is enabled for TypeScript files or not."
      },
      "tslint.jsEnable": {
        "type": "boolean",
        "default": false,
        "description": "Control whether tslint is enabled for JavaScript files or not.",
        "scope": "resource"
      },
      "tslint.rulesDirectory": {
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        },
        "description": "An additional rules directory",
        "default": "",
        "scope": "resource"
      },
      "tslint.validateWithDefaultConfig": {
        "type": "boolean",
        "description": "Validate a file when there is only a default tslint configuration is found",
        "default": false,
        "scope": "resource"
      },
      "tslint.configFile": {
        "type": "string",
        "description": "The path to the rules configuration file",
        "default": "",
        "scope": "resource"
      },
      "tslint.ignoreDefinitionFiles": {
        "type": "boolean",
        "default": true,
        "description": "Control if TypeScript definition files should be ignored",
        "scope": "resource"
      },
      "tslint.exclude": {
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        },
        "description": "Configure glob patterns of file paths to exclude from linting",
        "scope": "resource"
      },
      "tslint.run": {
        "type": "string",
        "enum": [
          "onSave",
          "onType"
        ],
        "default": "onType",
        "description": "Run the linter on save (onSave) or on type (onType)",
        "scope": "window"
      },
      "tslint.nodePath": {
        "type": "string",
        "default": "",
        "description": "A path added to NODE_PATH when resolving the tslint module.",
        "scope": "resource"
      },
      "tslint.autoFixOnSave": {
        "type": [
          "boolean",
          "array"
        ],
        "items": {
          "type": "string"
        },
        "default": false,
        "description": "Turns auto fix on save on or off, or defines which rules (e.g. `no-var-keyword`) to auto fix on save.",
        "scope": "resource"
      },
      "tslint.alwaysShowRuleFailuresAsWarnings": {
        "type": "boolean",
        "default": false,
        "description": "Always show rule failures as warnings, independent of the tslint configuration.",
        "scope": "resource"
      }
    },
    "title": "JSON schema for Creatomic configuration file",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "tslint.enable": true,
        "tslint.jsEnable": false,
        "tslint.rulesDirectory": "/path/to/rules/directory",
        "tslint.validateWithDefaultConfig": false,
        "tslint.configFile": "/path/to/tslint/config.json",
        "tslint.ignoreDefinitionFiles": true,
        "tslint.exclude": [
          "**/node_modules/**",
          "**/coverage/**"
        ],
        "tslint.run": "onType",
        "tslint.nodePath": "/path/to/node/modules",
        "tslint.autoFixOnSave": [
          "no-var-keyword",
          "no-trailing-comma"
        ],
        "tslint.alwaysShowRuleFailuresAsWarnings": false
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['tslint.autoFixOnSave']['items']:\n    {'type': 'string'}\n\nOn instance['tslint.autoFixOnSave'][0]:\n    123",
      "data": {
        "tslint.enable": true,
        "tslint.jsEnable": false,
        "tslint.rulesDirectory": "/path/to/rules/directory",
        "tslint.validateWithDefaultConfig": false,
        "tslint.configFile": "/path/to/tslint/config.json",
        "tslint.ignoreDefinitionFiles": true,
        "tslint.exclude": [
          "**/node_modules/**",
          "**/coverage/**"
        ],
        "tslint.run": "onType",
        "tslint.nodePath": "/path/to/node/modules",
        "tslint.autoFixOnSave": [
          123,
          "no-trailing-comma"
        ],
        "tslint.alwaysShowRuleFailuresAsWarnings": false
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['tslint.exclude']['items']:\n    {'type': 'string'}\n\nOn instance['tslint.exclude'][2]:\n    123",
      "data": {
        "tslint.enable": true,
        "tslint.jsEnable": false,
        "tslint.rulesDirectory": "/path/to/rules/directory",
        "tslint.validateWithDefaultConfig": false,
        "tslint.configFile": "/path/to/tslint/config.json",
        "tslint.ignoreDefinitionFiles": true,
        "tslint.exclude": [
          "**/node_modules/**",
          "**/coverage/**",
          123
        ],
        "tslint.run": "onType",
        "tslint.nodePath": "/path/to/node/modules",
        "tslint.autoFixOnSave": [
          "no-var-keyword",
          "no-trailing-comma",
          456
        ],
        "tslint.alwaysShowRuleFailuresAsWarnings": false
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"array\", \"string\"",
      "python_error": "123 is not of type 'string', 'array'\n\nFailed validating 'type' in schema['properties']['tslint.rulesDirectory']:\n    {'type': ['string', 'array'],\n     'items': {'type': 'string'},\n     'description': 'An additional rules directory',\n     'default': '',\n     'scope': 'resource'}\n\nOn instance['tslint.rulesDirectory']:\n    123",
      "data": {
        "tslint.enable": true,
        "tslint.jsEnable": false,
        "tslint.rulesDirectory": 123,
        "tslint.validateWithDefaultConfig": false,
        "tslint.configFile": "/path/to/tslint/config.json",
        "tslint.ignoreDefinitionFiles": true,
        "tslint.exclude": [
          "**/node_modules/**",
          "**/coverage/**"
        ],
        "tslint.run": "onType",
        "tslint.nodePath": "/path/to/node/modules",
        "tslint.autoFixOnSave": [
          "no-var-keyword",
          "no-trailing-comma"
        ],
        "tslint.alwaysShowRuleFailuresAsWarnings": false
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['tslint.exclude']['items']:\n    {'type': 'string'}\n\nOn instance['tslint.exclude'][2]:\n    123",
      "data": {
        "tslint.enable": true,
        "tslint.jsEnable": false,
        "tslint.rulesDirectory": "/path/to/rules/directory",
        "tslint.validateWithDefaultConfig": false,
        "tslint.configFile": "/path/to/tslint/config.json",
        "tslint.ignoreDefinitionFiles": true,
        "tslint.exclude": [
          "**/node_modules/**",
          "**/coverage/**",
          123
        ],
        "tslint.run": "onType",
        "tslint.nodePath": "/path/to/node/modules",
        "tslint.autoFixOnSave": [
          "no-var-keyword",
          "no-trailing-comma",
          true
        ],
        "tslint.alwaysShowRuleFailuresAsWarnings": false
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "tslint.enable": true,
        "tslint.jsEnable": false,
        "tslint.rulesDirectory": "/path/to/rules/directory",
        "tslint.validateWithDefaultConfig": false,
        "tslint.configFile": "/path/to/config/file",
        "tslint.ignoreDefinitionFiles": true,
        "tslint.exclude": [
          "**/node_modules/**",
          "**/coverage/**"
        ],
        "tslint.run": "onType",
        "tslint.nodePath": "/path/to/node/modules",
        "tslint.autoFixOnSave": [
          "no-var-keyword",
          "no-console"
        ],
        "tslint.alwaysShowRuleFailuresAsWarnings": false
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"array\", \"string\"",
      "python_error": "123 is not of type 'string', 'array'\n\nFailed validating 'type' in schema['properties']['tslint.rulesDirectory']:\n    {'type': ['string', 'array'],\n     'items': {'type': 'string'},\n     'description': 'An additional rules directory',\n     'default': '',\n     'scope': 'resource'}\n\nOn instance['tslint.rulesDirectory']:\n    123",
      "data": {
        "tslint.enable": true,
        "tslint.jsEnable": false,
        "tslint.rulesDirectory": 123,
        "tslint.validateWithDefaultConfig": false,
        "tslint.configFile": "/path/to/config/file",
        "tslint.ignoreDefinitionFiles": true,
        "tslint.exclude": [
          "**/node_modules/**",
          "**/coverage/**"
        ],
        "tslint.run": "onType",
        "tslint.nodePath": "/path/to/node/modules",
        "tslint.autoFixOnSave": [
          "no-var-keyword",
          "no-console"
        ],
        "tslint.alwaysShowRuleFailuresAsWarnings": false
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"true\" is not of type \"boolean\"",
      "python_error": "'false' is not of type 'boolean'\n\nFailed validating 'type' in schema['properties']['tslint.validateWithDefaultConfig']:\n    {'type': 'boolean',\n     'description': 'Validate a file when there is only a default tslint '\n                    'configuration is found',\n     'default': False,\n     'scope': 'resource'}\n\nOn instance['tslint.validateWithDefaultConfig']:\n    'false'",
      "data": {
        "tslint.enable": "true",
        "tslint.jsEnable": 1,
        "tslint.rulesDirectory": "/path/to/rules/directory",
        "tslint.validateWithDefaultConfig": "false",
        "tslint.configFile": "/path/to/config/file",
        "tslint.ignoreDefinitionFiles": null,
        "tslint.exclude": [
          "**/node_modules/**",
          12
        ],
        "tslint.run": "onSavee",
        "tslint.nodePath": "/path/to/node/modules",
        "tslint.autoFixOnSave": 2,
        "tslint.alwaysShowRuleFailuresAsWarnings": false,
        "unknown": "not allowed"
      }
    }
  ]
}