{
  "description": "sample JsonSchemaStore/prometheus.rules.json",
  "meta": {
    "full_size": 2892,
    "stripped_size": 1628,
    "features": [
      "$ref",
      "@minmaxLength",
      "additionalProperties",
      "items",
      "oneOf",
      "pattern",
      "patternProperties"
    ],
    "raw_features": [
      "$id",
      "$schema",
      "_boolSchema",
      "definitions",
      "minLength",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:integer",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$id": "https://json.schemastore.org/prometheus.rules.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "duration": {
        "type": [
          "string",
          "null"
        ],
        "pattern": "^([0-9]+y)?([0-9]+w)?([0-9]+d)?([0-9]+h)?([0-9]+m)?([0-9]+s)?([0-9]+ms)?$",
        "minLength": 1
      },
      "label_name": {
        "type": "string",
        "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
      },
      "label_value": {
        "type": "string"
      },
      "labels": {
        "type": [
          "object",
          "null"
        ],
        "patternProperties": {
          "^[a-zA-Z_][a-zA-Z0-9_]*$": {
            "$ref": "#/definitions/label_value"
          }
        },
        "additionalProperties": false
      },
      "tmpl_string": {
        "description": "A string which is template-expanded before usage.",
        "type": "string"
      },
      "annotations": {
        "type": [
          "object",
          "null"
        ],
        "patternProperties": {
          "^[a-zA-Z_][a-zA-Z0-9_]*$": {
            "$ref": "#/definitions/tmpl_string"
          }
        },
        "additionalProperties": false
      },
      "recording_rule": {
        "type": "object",
        "properties": {
          "record": {
            "description": "The name of the time series to output to. Must be a valid metric name.",
            "type": "string"
          },
          "expr": {
            "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and the result recorded as a new set of time series with the metric name as given by 'record'.",
            "type": "string"
          },
          "labels": {
            "description": "Labels to add or overwrite before storing the result.",
            "$ref": "#/definitions/labels"
          }
        },
        "required": [
          "record",
          "expr"
        ],
        "additionalProperties": false
      },
      "alerting_rule": {
        "type": "object",
        "properties": {
          "alert": {
            "description": "The name of the alert. Must be a valid metric name.",
            "type": "string"
          },
          "expr": {
            "description": "The PromQL expression to evaluate. Every evaluation cycle this is evaluated at the current time, and all resultant time series become pending/firing alerts.",
            "type": "string"
          },
          "for": {
            "description": "Alerts are considered firing once they have been returned for this long. Alerts which have not yet fired for long enough are considered pending.",
            "$ref": "#/definitions/duration"
          },
          "labels": {
            "description": "Labels to add or overwrite for each alert.",
            "$ref": "#/definitions/labels"
          },
          "annotations": {
            "description": "Annotations to add to each alert.",
            "$ref": "#/definitions/annotations"
          }
        },
        "required": [
          "alert",
          "expr"
        ],
        "additionalProperties": false
      }
    },
    "description": "Prometheus rules file",
    "properties": {
      "groups": {
        "type": [
          "array",
          "null"
        ],
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the group. Must be unique within a file.",
              "type": "string"
            },
            "interval": {
              "description": "How often rules in the group are evaluated.",
              "$ref": "#/definitions/duration"
            },
            "limit": {
              "description": "Limit the number of alerts an alerting rule and series a recording rule can produce. 0 is no limit.",
              "type": [
                "integer",
                "null"
              ],
              "default": 0
            },
            "rules": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/definitions/recording_rule"
                  },
                  {
                    "$ref": "#/definitions/alerting_rule"
                  }
                ]
              }
            }
          },
          "required": [
            "name"
          ],
          "additionalProperties": false
        }
      }
    },
    "title": "Prometheus Rules",
    "type": [
      "object",
      "null"
    ]
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "groups": [
          {
            "name": "example_group",
            "interval": "1m",
            "limit": 10,
            "rules": [
              {
                "record": "example_record",
                "expr": "up",
                "labels": {
                  "label1": "value1",
                  "label2": "value2"
                }
              },
              {
                "alert": "example_alert",
                "expr": "up == 0",
                "for": "5m",
                "labels": {
                  "label1": "value1",
                  "label2": "value2"
                },
                "annotations": {
                  "description": "Example alert",
                  "summary": "Example summary"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "groups": [
          {
            "name": "example_group",
            "interval": "1m",
            "limit": 10,
            "rules": [
              {
                "record": "example_record",
                "expr": "up",
                "labels": {
                  "label1": "value1",
                  "label2": "value2"
                }
              },
              {
                "alert": "example_alert",
                "expr": "up == 0",
                "for": "5m",
                "labels": {
                  "label3": "value3",
                  "label4": "value4"
                },
                "annotations": {
                  "description": "Example alert description",
                  "summary": "Example alert summary"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"1minute\" does not match \"^([0-9]+y)?([0-9]+w)?([0-9]+d)?([0-9]+h)?([0-9]+m)?([0-9]+s)?([0-9]+ms)?$\"",
      "python_error": "'1minute' does not match '^([0-9]+y)?([0-9]+w)?([0-9]+d)?([0-9]+h)?([0-9]+m)?([0-9]+s)?([0-9]+ms)?$'\n\nFailed validating 'pattern' in schema['properties']['groups']['items']['properties']['interval']:\n    {'type': ['string', 'null'],\n     'pattern': '^([0-9]+y)?([0-9]+w)?([0-9]+d)?([0-9]+h)?([0-9]+m)?([0-9]+s)?([0-9]+ms)?$',\n     'minLength': 1}\n\nOn instance['groups'][0]['interval']:\n    '1minute'",
      "data": {
        "groups": [
          {
            "name": "example_group",
            "interval": "1minute",
            "limit": 10,
            "rules": [
              {
                "record": "example_record",
                "expr": "up",
                "labels": {
                  "label1": "value1",
                  "label2": "value2"
                }
              },
              {
                "alert": "example_alert",
                "expr": "up == 0",
                "for": "5minutes",
                "labels": {
                  "label3": "value3",
                  "label4": "value4"
                },
                "annotations": {
                  "description": "Example alert description",
                  "summary": "Example alert summary"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "{\"record\":\"example_record\",\"expr\":\"up\",\"labels\":{\"label1\":\"value1\",\"label2\":\"value2\"},\"alert\":\"example_alert\",\"for\":\"5m\"} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'record': 'example_record', 'expr': 'up', 'labels': {'label1': 'value1', 'label2': 'value2'}, 'alert': 'example_alert', 'for': '5m'} is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['groups']['items']['properties']['rules']['items']:\n    {'oneOf': [{'$ref': '#/definitions/recording_rule'},\n               {'$ref': '#/definitions/alerting_rule'}]}\n\nOn instance['groups'][0]['rules'][0]:\n    {'record': 'example_record',\n     'expr': 'up',\n     'labels': {'label1': 'value1', 'label2': 'value2'},\n     'alert': 'example_alert',\n     'for': '5m'}",
      "data": {
        "groups": [
          {
            "name": "example_group",
            "interval": "1m",
            "limit": 10,
            "rules": [
              {
                "record": "example_record",
                "expr": "up",
                "labels": {
                  "label1": "value1",
                  "label2": "value2"
                },
                "alert": "example_alert",
                "for": "5m"
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on patternProperties keyword",
      "valid": false,
      "rust_error": "{\"record\":\"example_record\",\"expr\":\"up\",\"labels\":{\"1label1\":\"value1\",\"label2\":\"value2\"}} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'record': 'example_record', 'expr': 'up', 'labels': {'1label1': 'value1', 'label2': 'value2'}} is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['groups']['items']['properties']['rules']['items']:\n    {'oneOf': [{'$ref': '#/definitions/recording_rule'},\n               {'$ref': '#/definitions/alerting_rule'}]}\n\nOn instance['groups'][0]['rules'][0]:\n    {'record': 'example_record',\n     'expr': 'up',\n     'labels': {'1label1': 'value1', 'label2': 'value2'}}",
      "data": {
        "groups": [
          {
            "name": "example_group",
            "interval": "1m",
            "limit": 10,
            "rules": [
              {
                "record": "example_record",
                "expr": "up",
                "labels": {
                  "1label1": "value1",
                  "label2": "value2"
                }
              },
              {
                "alert": "example_alert",
                "expr": "up == 0",
                "for": "5m",
                "labels": {
                  "label3": "value3",
                  "label4": "value4"
                },
                "annotations": {
                  "description": "Example alert description",
                  "summary": "Example alert summary"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "{\"record\":\"example_record\",\"expr\":\"up\",\"labels\":true} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'record': 'example_record', 'expr': 'up', 'labels': True} is not valid under any of the given schemas\n\nFailed validating 'oneOf' in schema['properties']['groups']['items']['properties']['rules']['items']:\n    {'oneOf': [{'$ref': '#/definitions/recording_rule'},\n               {'$ref': '#/definitions/alerting_rule'}]}\n\nOn instance['groups'][0]['rules'][0]:\n    {'record': 'example_record', 'expr': 'up', 'labels': True}",
      "data": {
        "groups": [
          {
            "name": "example_group",
            "interval": "1m",
            "limit": 10,
            "rules": [
              {
                "record": "example_record",
                "expr": "up",
                "labels": true
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['groups']['items']['properties']['interval']:\n    {'type': ['string', 'null'],\n     'pattern': '^([0-9]+y)?([0-9]+w)?([0-9]+d)?([0-9]+h)?([0-9]+m)?([0-9]+s)?([0-9]+ms)?$',\n     'minLength': 1}\n\nOn instance['groups'][0]['interval']:\n    ''",
      "data": {
        "groups": [
          {
            "name": "example_group",
            "interval": "",
            "limit": 10,
            "rules": [
              {
                "record": "example_record",
                "expr": "up",
                "labels": {
                  "label1": "value1",
                  "label2": "value2"
                }
              },
              {
                "alert": "example_alert",
                "expr": "up == 0",
                "for": "5m",
                "labels": {
                  "label3": "value3",
                  "label4": "value4"
                },
                "annotations": {
                  "description": "Example alert description",
                  "summary": "Example alert summary"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"record\":\"example_record\",\"expr\":\"up\",\"labels\":{\"123\":\"value1\",\"label2\":\"value2\"}} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "'5 minutes' does not match '^([0-9]+y)?([0-9]+w)?([0-9]+d)?([0-9]+h)?([0-9]+m)?([0-9]+s)?([0-9]+ms)?$'\n\nFailed validating 'pattern' in schema[1]['properties']['for']:\n    {'type': ['string', 'null'],\n     'pattern': '^([0-9]+y)?([0-9]+w)?([0-9]+d)?([0-9]+h)?([0-9]+m)?([0-9]+s)?([0-9]+ms)?$',\n     'minLength': 1}\n\nOn instance['for']:\n    '5 minutes'",
      "data": {
        "groups": [
          {
            "name": "example_group",
            "interval": "1m",
            "limit": 10,
            "rules": [
              {
                "record": "example_record",
                "expr": "up",
                "labels": {
                  "123": "value1",
                  "label2": "value2"
                }
              },
              {
                "alert": "example_alert",
                "expr": "up == 0",
                "for": "5 minutes",
                "labels": {
                  "label3": "value3",
                  "label4": "value4"
                },
                "annotations": {
                  "description": "Example alert description",
                  "summary": "Example alert summary"
                }
              }
            ]
          }
        ]
      }
    }
  ]
}