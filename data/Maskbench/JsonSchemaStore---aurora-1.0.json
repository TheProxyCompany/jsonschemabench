{
  "description": "sample JsonSchemaStore/aurora-1.0.json",
  "meta": {
    "full_size": 5913,
    "stripped_size": 3106,
    "features": [
      "$ref",
      "@minmaxLength",
      "@minmaxNumber",
      "additionalProperties",
      "enum",
      "items"
    ],
    "raw_features": [
      "$id",
      "$schema",
      "_boolSchema",
      "definitions",
      "minLength",
      "minimum",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:boolean",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$comment": "https://docs.aurorajs.dev/",
    "$id": "https://json.schemastore.org/aurora-1.0.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
      "property": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of property, in camelCase",
            "minLength": 2
          },
          "type": {
            "type": "string",
            "description": "The type of property",
            "enum": [
              "bigint.unsigned",
              "bigint",
              "blob.long",
              "blob.medium",
              "blob.tiny",
              "blob",
              "boolean",
              "char",
              "date",
              "decimal",
              "enum",
              "float",
              "id",
              "int.unsigned",
              "int",
              "json",
              "manyToMany",
              "password",
              "relationship",
              "smallint.unsigned",
              "smallint",
              "text",
              "timestamp",
              "tinyint.unsigned",
              "tinyint",
              "varchar"
            ]
          },
          "length": {
            "type": "number",
            "description": "Set max length to property",
            "minimum": 1
          },
          "maxLength": {
            "type": "number",
            "description": "Set max length to property",
            "minimum": 1
          },
          "nullable": {
            "type": "boolean",
            "description": "Set property to nullable"
          },
          "primaryKey": {
            "type": "boolean",
            "description": "Set property to primary key"
          },
          "index": {
            "type": "string",
            "description": "To define property like a index",
            "enum": [
              "index",
              "unique"
            ]
          },
          "indexName": {
            "type": "string",
            "description": "The name of index, if there are various indexes with the same name, they will be grouped",
            "minLength": 2
          },
          "enumOptions": {
            "type": "array",
            "description": "Values for enum type",
            "items": {
              "type": "string",
              "minLength": 1
            }
          },
          "defaultValue": {
            "type": [
              "number",
              "string",
              "boolean"
            ],
            "description": "Default value for property"
          },
          "example": {
            "type": [
              "number",
              "string",
              "boolean"
            ],
            "description": "Example value for property, this value will be used in swagger documentation"
          },
          "decimals": {
            "type": "array",
            "description": "Total digits of the number and length of the decimal places in the back of the number, example: [10, 2].",
            "items": {
              "type": "number",
              "minimum": 1
            }
          },
          "autoIncrement": {
            "type": "boolean",
            "description": "Set number property as auto increment"
          },
          "relationship": {
            "$ref": "#/definitions/relationship"
          },
          "webComponent": {
            "$ref": "#/definitions/webComponent"
          }
        }
      },
      "apiDefinition": {
        "type": "object",
        "required": [
          "path",
          "resolverType",
          "httpMethod"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to access api",
            "minLength": 2
          },
          "resolverType": {
            "type": "string",
            "description": "Type of resolver, query or mutation",
            "enum": [
              "query",
              "mutation"
            ]
          },
          "httpMethod": {
            "type": "string",
            "description": "Verb of api rest",
            "enum": [
              "get",
              "post",
              "put",
              "delete",
              "patch"
            ]
          }
        }
      },
      "relationship": {
        "type": "object",
        "additionalProperties": false,
        "description": "Relationship definition for this property",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of web component",
            "enum": [
              "many-to-many",
              "many-to-one",
              "none",
              "one-to-many",
              "one-to-one"
            ]
          },
          "singularName": {
            "type": "string",
            "description": "Singular name of the property referred to in the relationship, only for one-to-many and many-to-many relationship, example: book",
            "minLength": 2
          },
          "aggregate": {
            "type": "string",
            "description": "Aggregate referring to this relationship, example: LibraryAuthor",
            "minLength": 2
          },
          "modulePath": {
            "type": "string",
            "description": "Path to the module that refers to this relationship, example: library/author",
            "minLength": 2
          },
          "key": {
            "type": "string",
            "description": "Property key that refers to this relationship, only for many-to-one relationship, example: id",
            "minLength": 2
          },
          "field": {
            "type": "string",
            "description": "Field to obtain the relationship data, example: author",
            "minLength": 2
          },
          "avoidConstraint": {
            "type": "boolean",
            "description": "Avoid constraint rules for this relationship"
          },
          "packageName": {
            "type": "string",
            "description": "Path to packageName where is the relationship, example: @aurora-ts/core",
            "minLength": 2
          },
          "isDenormalized": {
            "type": "boolean",
            "description": "Set many-to-many relationship as denormalized, creating a field to store the selected ids"
          },
          "pivot": {
            "$ref": "#/definitions/pivotTable"
          }
        }
      },
      "webComponent": {
        "type": "object",
        "additionalProperties": false,
        "description": "Web Component that wil be rendered for this property",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of web component",
            "enum": [
              "grid-select-element",
              "grid-elements-manager",
              "select"
            ]
          }
        }
      },
      "pivotTable": {
        "type": "object",
        "additionalProperties": false,
        "description": "Relationship pivot table definition for this relationship",
        "properties": {
          "aggregate": {
            "type": "string",
            "description": "AggregateName of Pivot table, example: IamRolesAccounts",
            "minLength": 2
          },
          "modulePath": {
            "type": "string",
            "description": "Module path where table model file will be saved, example: iam/role",
            "minLength": 2
          },
          "fileName": {
            "type": "string",
            "description": "Filename of pivot table model file, example: roles-accounts",
            "minLength": 2
          }
        }
      }
    },
    "description": "Make agile applications without technical debt",
    "properties": {
      "version": {
        "type": "string",
        "description": "Schema version",
        "default": "0.0.1",
        "minLength": 2
      },
      "boundedContextName": {
        "type": "string",
        "description": "The name of the bounded context, singular in kebab-case",
        "minLength": 2
      },
      "moduleName": {
        "type": "string",
        "description": "The name of the module, singular in kebab-case",
        "minLength": 2
      },
      "moduleNames": {
        "type": "string",
        "description": "The name of the module, plural in kebab-case",
        "minLength": 2
      },
      "aggregateName": {
        "type": "string",
        "description": "The name of the aggregateName, singular in PascalCase",
        "minLength": 2
      },
      "hasOAuth": {
        "type": "boolean",
        "description": "Enabled authentication for this module",
        "default": false
      },
      "hasTenant": {
        "type": "boolean",
        "description": "Enabled tenant for this module",
        "default": false
      },
      "hasAuditing": {
        "type": "boolean",
        "description": "Enabled auditing for this module",
        "default": false
      },
      "aggregateProperties": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/property"
        }
      },
      "aggregateI18nProperties": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/property"
        }
      },
      "additionalApis": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/apiDefinition"
        }
      }
    },
    "required": [
      "boundedContextName",
      "moduleName",
      "moduleNames",
      "aggregateName"
    ],
    "title": "Aurora Agile Meta Framework",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "version": "0.0.1",
        "boundedContextName": "user-management",
        "moduleName": "user",
        "moduleNames": "users",
        "aggregateName": "User",
        "hasOAuth": true,
        "hasTenant": false,
        "hasAuditing": true,
        "aggregateProperties": [
          {
            "name": "id",
            "type": "id",
            "primaryKey": true,
            "autoIncrement": true
          },
          {
            "name": "email",
            "type": "varchar",
            "length": 255,
            "nullable": false,
            "index": "unique"
          },
          {
            "name": "password",
            "type": "password",
            "length": 255,
            "nullable": false
          },
          {
            "name": "firstName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "lastName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "role",
            "type": "manyToMany",
            "relationship": {
              "type": "many-to-many",
              "singularName": "role",
              "aggregate": "UserRole",
              "modulePath": "user/role",
              "packageName": "@aurora-ts/core",
              "isDenormalized": true,
              "pivot": {
                "aggregate": "UserRoles",
                "modulePath": "user/role",
                "fileName": "users-roles"
              }
            }
          }
        ],
        "aggregateI18nProperties": [
          {
            "name": "description",
            "type": "text",
            "nullable": false
          }
        ],
        "additionalApis": [
          {
            "path": "/users/{id}",
            "resolverType": "query",
            "httpMethod": "get"
          },
          {
            "path": "/users",
            "resolverType": "mutation",
            "httpMethod": "post"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"0\" is shorter than 2 characters",
      "python_error": "'0' is too short\n\nFailed validating 'minLength' in schema['properties']['version']:\n    {'type': 'string',\n     'description': 'Schema version',\n     'default': '0.0.1',\n     'minLength': 2}\n\nOn instance['version']:\n    '0'",
      "data": {
        "version": "0",
        "boundedContextName": "user-management",
        "moduleName": "user",
        "moduleNames": "users",
        "aggregateName": "User",
        "hasOAuth": true,
        "hasTenant": false,
        "hasAuditing": true,
        "aggregateProperties": [
          {
            "name": "id",
            "type": "id",
            "primaryKey": true,
            "autoIncrement": true
          },
          {
            "name": "email",
            "type": "varchar",
            "length": 255,
            "nullable": false,
            "index": "unique"
          },
          {
            "name": "password",
            "type": "password",
            "length": 255,
            "nullable": false
          },
          {
            "name": "firstName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "lastName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "role",
            "type": "manyToMany",
            "relationship": {
              "type": "many-to-many",
              "singularName": "r",
              "aggregate": "UserRole",
              "modulePath": "user/role",
              "packageName": "@aurora-ts/core",
              "isDenormalized": true,
              "pivot": {
                "aggregate": "UserRoles",
                "modulePath": "user/role",
                "fileName": "users-roles"
              }
            }
          }
        ],
        "aggregateI18nProperties": [
          {
            "name": "description",
            "type": "text",
            "nullable": false
          }
        ],
        "additionalApis": [
          {
            "path": "/users/{id}",
            "resolverType": "query",
            "httpMethod": "get"
          },
          {
            "path": "/users",
            "resolverType": "mutation",
            "httpMethod": "post"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"object\" is not one of [\"bigint.unsigned\",\"bigint\",\"blob.long\",\"blob.medium\",\"blob.tiny\",\"blob\",\"boolean\",\"char\",\"date\",\"decimal\",\"enum\",\"float\",\"id\",\"int.unsigned\",\"int\",\"json\",\"manyToMany\",\"password\",\"relationship\",\"smallint.unsigned\",\"smallint\",\"text\",\"timestamp\",\"tinyint.unsigned\",\"tinyint\",\"varchar\"]",
      "python_error": "'object' is not one of ['bigint.unsigned', 'bigint', 'blob.long', 'blob.medium', 'blob.tiny', 'blob', 'boolean', 'char', 'date', 'decimal', 'enum', 'float', 'id', 'int.unsigned', 'int', 'json', 'manyToMany', 'password', 'relationship', 'smallint.unsigned', 'smallint', 'text', 'timestamp', 'tinyint.unsigned', 'tinyint', 'varchar']\n\nFailed validating 'enum' in schema['properties']['aggregateProperties']['items']['properties']['type']:\n    {'type': 'string',\n     'description': 'The type of property',\n     'enum': ['bigint.unsigned',\n              'bigint',\n              'blob.long',\n              'blob.medium',\n              'blob.tiny',\n              'blob',\n              'boolean',\n              'char',\n              'date',\n              'decimal',\n              'enum',\n              'float',\n              'id',\n              'int.unsigned',\n              'int',\n              'json',\n              'manyToMany',\n              'password',\n              'relationship',\n              'smallint.unsigned',\n       .. (213 more)",
      "data": {
        "version": "0.0.1",
        "boundedContextName": "user-management",
        "moduleName": "user",
        "moduleNames": "users",
        "aggregateName": "User",
        "hasOAuth": true,
        "hasTenant": false,
        "hasAuditing": true,
        "aggregateProperties": [
          {
            "name": "id",
            "type": "id",
            "primaryKey": true,
            "autoIncrement": true
          },
          {
            "name": "email",
            "type": "varchar",
            "length": 255,
            "nullable": false,
            "index": "unique"
          },
          {
            "name": "password",
            "type": "password",
            "length": 255,
            "nullable": false
          },
          {
            "name": "firstName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "lastName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "role",
            "type": "manyToMany",
            "relationship": {
              "type": "many-to-many",
              "singularName": "role",
              "aggregate": "UserRole",
              "modulePath": "user/role",
              "packageName": "@aurora-ts/core",
              "isDenormalized": true,
              "pivot": {
                "aggregate": "UserRoles",
                "modulePath": "user/role",
                "fileName": "users-roles"
              }
            }
          },
          {
            "name": "example",
            "type": "object",
            "defaultValue": "hello"
          }
        ],
        "aggregateI18nProperties": [
          {
            "name": "description",
            "type": "text",
            "nullable": false
          }
        ],
        "additionalApis": [
          {
            "path": "/users/{id}",
            "resolverType": "query",
            "httpMethod": "get"
          },
          {
            "path": "/users",
            "resolverType": "mutation",
            "httpMethod": "post"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"invalidType\" is not one of [\"bigint.unsigned\",\"bigint\",\"blob.long\",\"blob.medium\",\"blob.tiny\",\"blob\",\"boolean\",\"char\",\"date\",\"decimal\",\"enum\",\"float\",\"id\",\"int.unsigned\",\"int\",\"json\",\"manyToMany\",\"password\",\"relationship\",\"smallint.unsigned\",\"smallint\",\"text\",\"timestamp\",\"tinyint.unsigned\",\"tinyint\",\"varchar\"]",
      "python_error": "'invalidType' is not one of ['bigint.unsigned', 'bigint', 'blob.long', 'blob.medium', 'blob.tiny', 'blob', 'boolean', 'char', 'date', 'decimal', 'enum', 'float', 'id', 'int.unsigned', 'int', 'json', 'manyToMany', 'password', 'relationship', 'smallint.unsigned', 'smallint', 'text', 'timestamp', 'tinyint.unsigned', 'tinyint', 'varchar']\n\nFailed validating 'enum' in schema['properties']['aggregateProperties']['items']['properties']['type']:\n    {'type': 'string',\n     'description': 'The type of property',\n     'enum': ['bigint.unsigned',\n              'bigint',\n              'blob.long',\n              'blob.medium',\n              'blob.tiny',\n              'blob',\n              'boolean',\n              'char',\n              'date',\n              'decimal',\n              'enum',\n              'float',\n              'id',\n              'int.unsigned',\n              'int',\n              'json',\n              'manyToMany',\n              'password',\n              'relationship',\n              'smallint.unsigned',\n  .. (223 more)",
      "data": {
        "version": "0.0.1",
        "boundedContextName": "user-management",
        "moduleName": "user",
        "moduleNames": "users",
        "aggregateName": "User",
        "hasOAuth": true,
        "hasTenant": false,
        "hasAuditing": true,
        "aggregateProperties": [
          {
            "name": "id",
            "type": "id",
            "primaryKey": true,
            "autoIncrement": true
          },
          {
            "name": "email",
            "type": "varchar",
            "length": 255,
            "nullable": false,
            "index": "unique"
          },
          {
            "name": "password",
            "type": "password",
            "length": 255,
            "nullable": false
          },
          {
            "name": "firstName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "lastName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "role",
            "type": "manyToMany",
            "relationship": {
              "type": "many-to-many",
              "singularName": "role",
              "aggregate": "UserRole",
              "modulePath": "user/role",
              "packageName": "@aurora-ts/core",
              "isDenormalized": true,
              "pivot": {
                "aggregate": "UserRoles",
                "modulePath": "user/role",
                "fileName": "users-roles"
              }
            }
          },
          {
            "name": "invalidProperty",
            "type": "invalidType"
          }
        ],
        "aggregateI18nProperties": [
          {
            "name": "description",
            "type": "text",
            "nullable": false
          }
        ],
        "additionalApis": [
          {
            "path": "/users/{id}",
            "resolverType": "query",
            "httpMethod": "get"
          },
          {
            "path": "/users",
            "resolverType": "mutation",
            "httpMethod": "post"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "null is not of types \"boolean\", \"number\", \"string\"",
      "python_error": "None is not of type 'number', 'string', 'boolean'\n\nFailed validating 'type' in schema['properties']['aggregateProperties']['items']['properties']['defaultValue']:\n    {'type': ['number', 'string', 'boolean'],\n     'description': 'Default value for property'}\n\nOn instance['aggregateProperties'][6]['defaultValue']:\n    None",
      "data": {
        "version": "0.0.1",
        "boundedContextName": "user-management",
        "moduleName": "user",
        "moduleNames": "users",
        "aggregateName": "User",
        "hasOAuth": true,
        "hasTenant": false,
        "hasAuditing": true,
        "aggregateProperties": [
          {
            "name": "id",
            "type": "id",
            "primaryKey": true,
            "autoIncrement": true
          },
          {
            "name": "email",
            "type": "varchar",
            "length": 255,
            "nullable": false,
            "index": "unique"
          },
          {
            "name": "password",
            "type": "password",
            "length": 255,
            "nullable": false
          },
          {
            "name": "firstName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "lastName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "role",
            "type": "manyToMany",
            "relationship": {
              "type": "many-to-many",
              "singularName": "role",
              "aggregate": "UserRole",
              "modulePath": "user/role",
              "packageName": "@aurora-ts/core",
              "isDenormalized": true,
              "pivot": {
                "aggregate": "UserRoles",
                "modulePath": "user/role",
                "fileName": "users-roles"
              }
            }
          },
          {
            "name": "defaultValueTest",
            "type": "varchar",
            "defaultValue": null
          }
        ],
        "aggregateI18nProperties": [
          {
            "name": "description",
            "type": "text",
            "nullable": false
          }
        ],
        "additionalApis": [
          {
            "path": "/users/{id}",
            "resolverType": "query",
            "httpMethod": "get"
          },
          {
            "path": "/users",
            "resolverType": "mutation",
            "httpMethod": "post"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword",
      "valid": false,
      "rust_error": "0 is less than the minimum of 1",
      "python_error": "Additional properties are not allowed ('additionalProperties constraint violation', 'minimum length constraint violation' were unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['aggregateProperties']['items']:\n    {'type': 'object',\n     'required': ['name', 'type'],\n     'additionalProperties': False,\n     'properties': {'name': {'type': 'string',\n                             'description': 'The name of property, in '\n                                            'camelCase',\n                             'minLength': 2},\n                    'type': {'type': 'string',\n                             'description': 'The type of property',\n                             'enum': ['bigint.unsigned',\n                                      'bigint',\n                                      'blob.long',\n                                      'blob.medium',\n                                      'blob.tiny',\n                                      'blob',\n                                      'boolean',\n.. (4331 more)",
      "data": {
        "version": "0.0.1",
        "boundedContextName": "user-management",
        "moduleName": "user",
        "moduleNames": "users",
        "aggregateName": "User",
        "hasOAuth": true,
        "hasTenant": false,
        "hasAuditing": true,
        "aggregateProperties": [
          {
            "name": "id",
            "type": "id",
            "primaryKey": true,
            "autoIncrement": true
          },
          {
            "name": "email",
            "type": "varchar",
            "length": 0,
            "minimum length constraint violation": "nullable",
            "additionalProperties constraint violation": false
          },
          {
            "name": "password",
            "type": "password",
            "length": 255,
            "nullable": false
          },
          {
            "name": "firstName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "lastName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "role",
            "type": "manyToMany",
            "relationship": {
              "type": "many-to-many",
              "singularName": "role",
              "aggregate": "UserRole",
              "modulePath": "user/role",
              "packageName": "@aurora-ts/core",
              "isDenormalized": true,
              "pivot": {
                "aggregate": "UserRoles",
                "modulePath": "user/role",
                "fileName": "users-roles"
              }
            }
          }
        ],
        "aggregateI18nProperties": [
          {
            "name": "description",
            "type": "text",
            "nullable": false
          }
        ],
        "additionalApis": [
          {
            "path": "/users/{id}",
            "resolverType": "query",
            "httpMethod": "get"
          },
          {
            "path": "/users",
            "resolverType": "mutation",
            "httpMethod": "post"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"u\" is shorter than 2 characters",
      "python_error": "'u' is too short\n\nFailed validating 'minLength' in schema['properties']['boundedContextName']:\n    {'type': 'string',\n     'description': 'The name of the bounded context, singular in '\n                    'kebab-case',\n     'minLength': 2}\n\nOn instance['boundedContextName']:\n    'u'",
      "data": {
        "version": "0.0.1",
        "boundedContextName": "u",
        "moduleName": "user",
        "moduleNames": "users",
        "aggregateName": "User",
        "hasOAuth": true,
        "hasTenant": false,
        "hasAuditing": true,
        "aggregateProperties": [
          {
            "name": "id",
            "type": "id",
            "primaryKey": true,
            "autoIncrement": true
          },
          {
            "name": "email",
            "type": "varchar",
            "length": 255,
            "nullable": false,
            "index": "unique"
          },
          {
            "name": "password",
            "type": "password",
            "length": 255,
            "nullable": false
          },
          {
            "name": "firstName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "lastName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "role",
            "type": "manyToMany",
            "relationship": {
              "type": "many-to-many",
              "singularName": "role",
              "aggregate": "UserRole",
              "modulePath": "user/role",
              "packageName": "@aurora-ts/core",
              "isDenormalized": true,
              "pivot": {
                "aggregate": "UserRoles",
                "modulePath": "user/role",
                "fileName": "users-roles"
              }
            }
          }
        ],
        "aggregateI18nProperties": [
          {
            "name": "description",
            "type": "text",
            "nullable": false
          }
        ],
        "additionalApis": [
          {
            "path": "/users/{id}",
            "resolverType": "query",
            "httpMethod": "get"
          },
          {
            "path": "/users",
            "resolverType": "mutation",
            "httpMethod": "post"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"u\" is shorter than 2 characters",
      "python_error": "'u' is too short\n\nFailed validating 'minLength' in schema['properties']['boundedContextName']:\n    {'type': 'string',\n     'description': 'The name of the bounded context, singular in '\n                    'kebab-case',\n     'minLength': 2}\n\nOn instance['boundedContextName']:\n    'u'",
      "data": {
        "version": "0.0.1",
        "boundedContextName": "u",
        "moduleName": "user",
        "moduleNames": "users",
        "aggregateName": "User",
        "hasOAuth": true,
        "hasTenant": false,
        "hasAuditing": true,
        "aggregateProperties": [
          {
            "name": "id",
            "type": "id",
            "primaryKey": true,
            "autoIncrement": true
          },
          {
            "name": "email",
            "type": "varchar",
            "length": 255,
            "nullable": false,
            "index": "unique"
          },
          {
            "name": "password",
            "type": "password",
            "length": 255,
            "nullable": false
          },
          {
            "name": "firstName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "lastName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "role",
            "type": "manyToMany",
            "relationship": {
              "type": "many-to-many",
              "singularName": "role",
              "aggregate": "UserRole",
              "modulePath": "user/role",
              "packageName": "@aurora-ts/core",
              "isDenormalized": true,
              "pivot": {
                "aggregate": "UserRoles",
                "modulePath": "user/role",
                "fileName": "users-roles"
              }
            }
          }
        ],
        "aggregateI18nProperties": [
          {
            "name": "d",
            "type": "text",
            "nullable": false
          }
        ],
        "additionalApis": [
          {
            "path": "/users/{id}",
            "resolverType": "query",
            "httpMethod": "get"
          },
          {
            "path": "/users",
            "resolverType": "mutation",
            "httpMethod": "post"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"object\" is not one of [\"bigint.unsigned\",\"bigint\",\"blob.long\",\"blob.medium\",\"blob.tiny\",\"blob\",\"boolean\",\"char\",\"date\",\"decimal\",\"enum\",\"float\",\"id\",\"int.unsigned\",\"int\",\"json\",\"manyToMany\",\"password\",\"relationship\",\"smallint.unsigned\",\"smallint\",\"text\",\"timestamp\",\"tinyint.unsigned\",\"tinyint\",\"varchar\"]",
      "python_error": "'object' is not one of ['bigint.unsigned', 'bigint', 'blob.long', 'blob.medium', 'blob.tiny', 'blob', 'boolean', 'char', 'date', 'decimal', 'enum', 'float', 'id', 'int.unsigned', 'int', 'json', 'manyToMany', 'password', 'relationship', 'smallint.unsigned', 'smallint', 'text', 'timestamp', 'tinyint.unsigned', 'tinyint', 'varchar']\n\nFailed validating 'enum' in schema['properties']['aggregateProperties']['items']['properties']['type']:\n    {'type': 'string',\n     'description': 'The type of property',\n     'enum': ['bigint.unsigned',\n              'bigint',\n              'blob.long',\n              'blob.medium',\n              'blob.tiny',\n              'blob',\n              'boolean',\n              'char',\n              'date',\n              'decimal',\n              'enum',\n              'float',\n              'id',\n              'int.unsigned',\n              'int',\n              'json',\n              'manyToMany',\n              'password',\n              'relationship',\n              'smallint.unsigned',\n       .. (213 more)",
      "data": {
        "version": "0.0.1",
        "boundedContextName": "user-management",
        "moduleName": "user",
        "moduleNames": "users",
        "aggregateName": "User",
        "hasOAuth": true,
        "hasTenant": false,
        "hasAuditing": true,
        "aggregateProperties": [
          {
            "name": "id",
            "type": "id",
            "primaryKey": true,
            "autoIncrement": true
          },
          {
            "name": "email",
            "type": "varchar",
            "length": 255,
            "nullable": false,
            "index": "unique"
          },
          {
            "name": "password",
            "type": "password",
            "length": 255,
            "nullable": false
          },
          {
            "name": "firstName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "lastName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "role",
            "type": "manyToMany",
            "relationship": {
              "type": "many-to-many",
              "singularName": "role",
              "aggregate": "UserRole",
              "modulePath": "user/role",
              "packageName": "@aurora-ts/core",
              "isDenormalized": true,
              "pivot": {
                "aggregate": "UserRoles",
                "modulePath": "user/role",
                "fileName": "users-roles"
              }
            }
          },
          {
            "name": "test",
            "type": "object",
            "defaultValue": "string value",
            "example": 123
          }
        ],
        "aggregateI18nProperties": [
          {
            "name": "description",
            "type": "text",
            "nullable": false
          }
        ],
        "additionalApis": [
          {
            "path": "/users/{id}",
            "resolverType": "query",
            "httpMethod": "get"
          },
          {
            "path": "/users",
            "resolverType": "mutation",
            "httpMethod": "post"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"invalidType\" is not one of [\"bigint.unsigned\",\"bigint\",\"blob.long\",\"blob.medium\",\"blob.tiny\",\"blob\",\"boolean\",\"char\",\"date\",\"decimal\",\"enum\",\"float\",\"id\",\"int.unsigned\",\"int\",\"json\",\"manyToMany\",\"password\",\"relationship\",\"smallint.unsigned\",\"smallint\",\"text\",\"timestamp\",\"tinyint.unsigned\",\"tinyint\",\"varchar\"]",
      "python_error": "'invalidType' is not one of ['bigint.unsigned', 'bigint', 'blob.long', 'blob.medium', 'blob.tiny', 'blob', 'boolean', 'char', 'date', 'decimal', 'enum', 'float', 'id', 'int.unsigned', 'int', 'json', 'manyToMany', 'password', 'relationship', 'smallint.unsigned', 'smallint', 'text', 'timestamp', 'tinyint.unsigned', 'tinyint', 'varchar']\n\nFailed validating 'enum' in schema['properties']['aggregateProperties']['items']['properties']['type']:\n    {'type': 'string',\n     'description': 'The type of property',\n     'enum': ['bigint.unsigned',\n              'bigint',\n              'blob.long',\n              'blob.medium',\n              'blob.tiny',\n              'blob',\n              'boolean',\n              'char',\n              'date',\n              'decimal',\n              'enum',\n              'float',\n              'id',\n              'int.unsigned',\n              'int',\n              'json',\n              'manyToMany',\n              'password',\n              'relationship',\n              'smallint.unsigned',\n  .. (223 more)",
      "data": {
        "version": "0.0.1",
        "boundedContextName": "user-management",
        "moduleName": "user",
        "moduleNames": "users",
        "aggregateName": "User",
        "hasOAuth": true,
        "hasTenant": false,
        "hasAuditing": true,
        "aggregateProperties": [
          {
            "name": "id",
            "type": "id",
            "primaryKey": true,
            "autoIncrement": true
          },
          {
            "name": "email",
            "type": "varchar",
            "length": 255,
            "nullable": false,
            "index": "unique"
          },
          {
            "name": "password",
            "type": "password",
            "length": 255,
            "nullable": false
          },
          {
            "name": "firstName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "lastName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "role",
            "type": "manyToMany",
            "relationship": {
              "type": "many-to-many",
              "singularName": "role",
              "aggregate": "UserRole",
              "modulePath": "user/role",
              "packageName": "@aurora-ts/core",
              "isDenormalized": true,
              "pivot": {
                "aggregate": "UserRoles",
                "modulePath": "user/role",
                "fileName": "users-roles"
              }
            }
          },
          {
            "name": "invalidProperty",
            "type": "invalidType"
          }
        ],
        "aggregateI18nProperties": [
          {
            "name": "description",
            "type": "text",
            "nullable": false
          }
        ],
        "additionalApis": [
          {
            "path": "/users/{id}",
            "resolverType": "query",
            "httpMethod": "get"
          },
          {
            "path": "/users",
            "resolverType": "mutation",
            "httpMethod": "post"
          },
          {
            "path": "/users",
            "resolverType": "invalidResolverType",
            "httpMethod": "post"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('Changed to ro from role to make it invalid' was unexpected)",
      "python_error": "Additional properties are not allowed ('Changed to ro from role to make it invalid' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['aggregateProperties']['items']['properties']['relationship']:\n    {'type': 'object',\n     'additionalProperties': False,\n     'description': 'Relationship definition for this property',\n     'properties': {'type': {'type': 'string',\n                             'description': 'The type of web component',\n                             'enum': ['many-to-many',\n                                      'many-to-one',\n                                      'none',\n                                      'one-to-many',\n                                      'one-to-one']},\n                    'singularName': {'type': 'string',\n                                     'description': 'Singular name of the '\n                                                    'property referred to '\n                                                    'in the relationship, '\n        .. (3346 more)",
      "data": {
        "version": "0.0.1",
        "boundedContextName": "user-management",
        "moduleName": "user",
        "moduleNames": "users",
        "aggregateName": "User",
        "hasOAuth": true,
        "hasTenant": false,
        "hasAuditing": true,
        "aggregateProperties": [
          {
            "name": "id",
            "type": "id",
            "primaryKey": true,
            "autoIncrement": true
          },
          {
            "name": "email",
            "type": "varchar",
            "length": 255,
            "nullable": false,
            "index": "unique"
          },
          {
            "name": "password",
            "type": "password",
            "length": 255,
            "nullable": false
          },
          {
            "name": "firstName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "lastName",
            "type": "varchar",
            "length": 255,
            "nullable": false
          },
          {
            "name": "role",
            "type": "manyToMany",
            "relationship": {
              "type": "many-to-many",
              "singularName": "ro",
              "Changed to ro from role to make it invalid": "UserRole",
              "modulePath": "user/role",
              "packageName": "@aurora-ts/core",
              "isDenormalized": true,
              "pivot": {
                "aggregate": "UserRoles",
                "modulePath": "user/role",
                "fileName": "users-roles"
              }
            }
          }
        ],
        "aggregateI18nProperties": [
          {
            "name": "description",
            "type": "text",
            "nullable": false
          }
        ],
        "additionalApis": [
          {
            "path": "/users/{id}",
            "resolverType": "query",
            "httpMethod": "get"
          },
          {
            "path": "/users",
            "resolverType": "mutation",
            "httpMethod": "post"
          }
        ]
      }
    }
  ]
}