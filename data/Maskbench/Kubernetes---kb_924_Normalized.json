{
  "description": "sample Kubernetes/kb_924_Normalized.json",
  "meta": {
    "full_size": 1035,
    "stripped_size": 244,
    "features": [
      "additionalProperties",
      "additionalProperties:object",
      "format",
      "format:int32"
    ],
    "raw_features": [
      "properties",
      "required",
      "type",
      "type:[]",
      "type:integer",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "description": "represents the current status of a scale subresource.",
    "properties": {
      "replicas": {
        "description": "actual number of observed instances of the scaled object.",
        "format": "int32",
        "type": [
          "integer",
          "null"
        ]
      },
      "selector": {
        "additionalProperties": {
          "type": [
            "string",
            "null"
          ]
        },
        "description": "label query over pods that should match the replicas count. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors",
        "type": [
          "object",
          "null"
        ]
      },
      "targetSelector": {
        "description": "label selector for pods that should match the replicas count. This is a serializated version of both map-based and more expressive set-based selectors. This is done to avoid introspection in the clients. The string will be in the same format as the query-param syntax. If the target type only supports map-based selectors, both this field and map-based selector field are populated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "required": [
      "replicas"
    ],
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "replicas": 5,
        "selector": {
          "app": "my-app",
          "environment": "dev"
        },
        "targetSelector": "app=my-app,environment=dev"
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "123 is not of types \"null\", \"string\"",
      "python_error": "123 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['selector']['additionalProperties']:\n    {'type': ['string', 'null']}\n\nOn instance['selector']['extraProperty']:\n    123",
      "data": {
        "replicas": 5,
        "selector": {
          "app": "my-app",
          "environment": "dev",
          "extraProperty": 123
        },
        "targetSelector": "app=my-app,environment=dev"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"five\" is not of types \"integer\", \"null\"",
      "python_error": "'five' is not of type 'integer', 'null'\n\nFailed validating 'type' in schema['properties']['replicas']:\n    {'description': 'actual number of observed instances of the scaled '\n                    'object.',\n     'format': 'int32',\n     'type': ['integer', 'null']}\n\nOn instance['replicas']:\n    'five'",
      "data": {
        "replicas": "five",
        "selector": {
          "app": "my-app",
          "environment": "dev"
        },
        "targetSelector": "app=my-app,environment=dev"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "true is not of types \"null\", \"string\"",
      "python_error": "True is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['selector']['additionalProperties']:\n    {'type': ['string', 'null']}\n\nOn instance['selector']['environment']:\n    True",
      "data": {
        "replicas": 5,
        "selector": {
          "app": "my-app",
          "environment": true
        },
        "targetSelector": "app=my-app,environment=dev"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "true is not of types \"integer\", \"null\"",
      "python_error": "True is not of type 'integer', 'null'\n\nFailed validating 'type' in schema['properties']['replicas']:\n    {'description': 'actual number of observed instances of the scaled '\n                    'object.',\n     'format': 'int32',\n     'type': ['integer', 'null']}\n\nOn instance['replicas']:\n    True",
      "data": {
        "replicas": true,
        "selector": {
          "app": "my-app",
          "environment": "dev"
        },
        "targetSelector": "app=my-app,environment=dev"
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "123 is not of types \"null\", \"string\"",
      "python_error": "123 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['selector']['additionalProperties']:\n    {'type': ['string', 'null']}\n\nOn instance['selector']['extra']:\n    123",
      "data": {
        "replicas": 5,
        "selector": {
          "app": "my-app",
          "environment": null,
          "extra": 123
        },
        "targetSelector": "app=my-app,environment=dev"
      }
    }
  ]
}