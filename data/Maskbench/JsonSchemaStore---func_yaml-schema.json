{
  "description": "sample JsonSchemaStore/func_yaml-schema.json",
  "meta": {
    "full_size": 4909,
    "stripped_size": 4872,
    "features": [
      "$ref",
      "@minmaxInteger",
      "@minmaxNumber",
      "@siblingKeys",
      "additionalProperties",
      "enum",
      "format",
      "format:date-time",
      "items",
      "oneOf",
      "pattern",
      "patternProperties"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "maximum",
      "minimum",
      "properties",
      "required",
      "type",
      "type:array",
      "type:integer",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/Function",
    "definitions": {
      "BuildSpec": {
        "required": [
          "buildpacks",
          "builder",
          "buildEnvs"
        ],
        "properties": {
          "git": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/Git"
          },
          "builderImages": {
            "patternProperties": {
              ".*": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "buildpacks": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "builder": {
            "enum": [
              "pack",
              "s2i"
            ],
            "type": "string"
          },
          "buildEnvs": {
            "items": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "$ref": "#/definitions/Env"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "DeploySpec": {
        "required": [
          "namespace",
          "annotations",
          "options",
          "labels",
          "healthEndpoints"
        ],
        "properties": {
          "namespace": {
            "type": "string"
          },
          "annotations": {
            "patternProperties": {
              ".*": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "options": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/Options"
          },
          "labels": {
            "items": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "$ref": "#/definitions/Label"
            },
            "type": "array"
          },
          "healthEndpoints": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/HealthEndpoints"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Env": {
        "required": [
          "value"
        ],
        "properties": {
          "name": {
            "pattern": "^[-._a-zA-Z][-._a-zA-Z0-9]*$",
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Function": {
        "required": [
          "specVersion",
          "name",
          "runtime",
          "registry",
          "image",
          "imageDigest",
          "created",
          "build",
          "run",
          "deploy"
        ],
        "properties": {
          "specVersion": {
            "type": "string"
          },
          "name": {
            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
            "type": "string"
          },
          "runtime": {
            "type": "string"
          },
          "registry": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "imageDigest": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "invocation": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/Invocation"
          },
          "build": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/BuildSpec"
          },
          "run": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/RunSpec"
          },
          "deploy": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/DeploySpec"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Git": {
        "properties": {
          "url": {
            "type": "string"
          },
          "revision": {
            "type": "string"
          },
          "contextDir": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "HealthEndpoints": {
        "properties": {
          "liveness": {
            "type": "string"
          },
          "readiness": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Invocation": {
        "properties": {
          "format": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Label": {
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/)?([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$",
            "type": "string"
          },
          "value": {
            "pattern": "^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Options": {
        "properties": {
          "scale": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/ScaleOptions"
          },
          "resources": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/ResourcesOptions"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ResourcesLimitsOptions": {
        "properties": {
          "cpu": {
            "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$",
            "type": "string"
          },
          "memory": {
            "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$",
            "type": "string"
          },
          "concurrency": {
            "type": "integer",
            "minimum": 0
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ResourcesOptions": {
        "properties": {
          "requests": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/ResourcesRequestsOptions"
          },
          "limits": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "$ref": "#/definitions/ResourcesLimitsOptions"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ResourcesRequestsOptions": {
        "properties": {
          "cpu": {
            "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$",
            "type": "string"
          },
          "memory": {
            "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "RunSpec": {
        "required": [
          "volumes",
          "envs"
        ],
        "properties": {
          "volumes": {
            "items": {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "$ref": "#/definitions/Volume"
            },
            "type": "array"
          },
          "envs": {
            "items": {
              "$ref": "#/definitions/Env"
            },
            "type": "array"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "ScaleOptions": {
        "properties": {
          "min": {
            "type": "integer",
            "minimum": 0
          },
          "max": {
            "type": "integer",
            "minimum": 0
          },
          "metric": {
            "enum": [
              "concurrency",
              "rps"
            ],
            "type": "string"
          },
          "target": {
            "type": "number",
            "minimum": 0
          },
          "utilization": {
            "maximum": 100,
            "minimum": 1,
            "type": "number"
          }
        },
        "additionalProperties": false,
        "type": "object"
      },
      "Volume": {
        "required": [
          "path"
        ],
        "properties": {
          "secret": {
            "type": "string"
          },
          "configMap": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "oneOf": [
          {
            "required": [
              "secret"
            ],
            "title": "secret"
          },
          {
            "required": [
              "configMap"
            ],
            "title": "configmap"
          }
        ]
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "specVersion": "1.0.0",
        "name": "example-function",
        "runtime": "nodejs14",
        "registry": "docker.io",
        "image": "example-function:latest",
        "imageDigest": "sha256:1234567890abcdef",
        "created": "2022-01-01T12:00:00Z",
        "build": {
          "buildpacks": [
            "gcr.io/paketo-buildpacks/nodejs:latest"
          ],
          "builder": "pack",
          "buildEnvs": [
            {
              "name": "NODE_ENV",
              "value": "production"
            }
          ],
          "git": {
            "url": "https://github.com/example/function.git",
            "revision": "main",
            "contextDir": "."
          }
        },
        "run": {
          "volumes": [
            {
              "secret": "example-secret",
              "path": "/mnt/secret"
            },
            {
              "configMap": "example-configmap",
              "path": "/mnt/configmap"
            }
          ],
          "envs": [
            {
              "name": "EXAMPLE_VAR",
              "value": "example-value"
            }
          ]
        },
        "deploy": {
          "namespace": "example-namespace",
          "annotations": {
            "example-annotation": "example-value"
          },
          "options": {
            "scale": {
              "min": 1,
              "max": 10,
              "metric": "concurrency",
              "target": 50,
              "utilization": 50
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "128Mi"
              },
              "limits": {
                "cpu": "200m",
                "memory": "256Mi",
                "concurrency": 10
              }
            }
          },
          "labels": [
            {
              "key": "example-label",
              "value": "example-value"
            }
          ],
          "healthEndpoints": {
            "liveness": "/healthz",
            "readiness": "/readyz"
          }
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "specVersion": "1.0.0",
        "name": "example-function",
        "runtime": "nodejs14",
        "registry": "docker.io",
        "image": "example-function-image",
        "imageDigest": "sha256:example-function-image-digest",
        "created": "2022-01-01T12:00:00Z",
        "build": {
          "buildpacks": [
            "gcr.io/paketo-buildpacks/nodejs:0.0.1"
          ],
          "builder": "pack",
          "buildEnvs": [
            {
              "name": "NODE_ENV",
              "value": "production"
            }
          ],
          "git": {
            "url": "https://github.com/example-function.git",
            "revision": "main",
            "contextDir": "."
          }
        },
        "run": {
          "volumes": [
            {
              "secret": "example-secret",
              "path": "/mnt/secret"
            },
            {
              "configMap": "example-configmap",
              "path": "/mnt/configmap"
            }
          ],
          "envs": [
            {
              "name": "EXAMPLE_ENV",
              "value": "example-value"
            }
          ]
        },
        "deploy": {
          "namespace": "example-namespace",
          "annotations": {
            "example-annotation": "example-value"
          },
          "options": {
            "scale": {
              "min": 1,
              "max": 10,
              "metric": "concurrency",
              "target": 50,
              "utilization": 50
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "128Mi"
              },
              "limits": {
                "cpu": "200m",
                "memory": "256Mi",
                "concurrency": 10
              }
            }
          },
          "labels": [
            {
              "key": "example-label",
              "value": "example-value"
            }
          ],
          "healthEndpoints": {
            "liveness": "/health/liveness",
            "readiness": "/health/readiness"
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"EXAMPLE ENV\" does not match \"^[-._a-zA-Z][-._a-zA-Z0-9]*$\"",
      "python_error": "'EXAMPLE ENV' does not match '^[-._a-zA-Z][-._a-zA-Z0-9]*$'\n\nFailed validating 'pattern' in schema['properties']['run']['properties']['envs']['items']['properties']['name']:\n    {'pattern': '^[-._a-zA-Z][-._a-zA-Z0-9]*$', 'type': 'string'}\n\nOn instance['run']['envs'][0]['name']:\n    'EXAMPLE ENV'",
      "data": {
        "specVersion": "1.0.0",
        "name": "example-function",
        "runtime": "nodejs14",
        "registry": "docker.io",
        "image": "example-function-image",
        "imageDigest": "sha256:example-function-image-digest",
        "created": "2022-01-01T12:00:00Z",
        "build": {
          "buildpacks": [
            "gcr.io/paketo-buildpacks/nodejs:0.0.1"
          ],
          "builder": "pack",
          "buildEnvs": [
            {
              "name": "NODE-ENV",
              "value": "production"
            }
          ],
          "git": {
            "url": "https://github.com/example-function.git",
            "revision": "main",
            "contextDir": "."
          }
        },
        "run": {
          "volumes": [
            {
              "secret": "example-secret",
              "path": "/mnt/secret"
            },
            {
              "configMap": "example-configmap",
              "path": "/mnt/configmap"
            }
          ],
          "envs": [
            {
              "name": "EXAMPLE ENV",
              "value": "example-value"
            }
          ]
        },
        "deploy": {
          "namespace": "example-namespace",
          "annotations": {
            "example-annotation": "example-value"
          },
          "options": {
            "scale": {
              "min": 1,
              "max": 10,
              "metric": "concurrency",
              "target": 50,
              "utilization": 50
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "128Mi"
              },
              "limits": {
                "cpu": "200m",
                "memory": "256Mi",
                "concurrency": 10
              }
            }
          },
          "labels": [
            {
              "key": "example-label",
              "value": "example-value"
            }
          ],
          "healthEndpoints": {
            "liveness": "/health/liveness",
            "readiness": "/health/readiness"
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "{\"secret\":\"example-secret\",\"configMap\":\"example-configmap\",\"path\":\"/mnt/secret\"} is valid under more than one of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'secret': 'example-secret', 'configMap': 'example-configmap', 'path': '/mnt/secret'} is valid under each of {'required': ['configMap'], 'title': 'configmap'}, {'required': ['secret'], 'title': 'secret'}\n\nFailed validating 'oneOf' in schema['properties']['run']['properties']['volumes']['items']:\n    {'required': ['path'],\n     'properties': {'secret': {'type': 'string'},\n                    'configMap': {'type': 'string'},\n                    'path': {'type': 'string'}},\n     'additionalProperties': False,\n     'type': 'object',\n     'oneOf': [{'required': ['secret'], 'title': 'secret'},\n               {'required': ['configMap'], 'title': 'configmap'}]}\n\nOn instance['run']['volumes'][0]:\n    {'secret': 'example-secret',\n     'configMap': 'example-configmap',\n     'path': '/mnt/secret'}",
      "data": {
        "specVersion": "1.0.0",
        "name": "example-function",
        "runtime": "nodejs14",
        "registry": "docker.io",
        "image": "example-function-image",
        "imageDigest": "sha256:example-function-image-digest",
        "created": "2022-01-01T12:00:00Z",
        "build": {
          "buildpacks": [
            "gcr.io/paketo-buildpacks/nodejs:0.0.1"
          ],
          "builder": "pack",
          "buildEnvs": [
            {
              "name": "NODE_ENV",
              "value": "production"
            }
          ],
          "git": {
            "url": "https://github.com/example-function.git",
            "revision": "main",
            "contextDir": "."
          }
        },
        "run": {
          "volumes": [
            {
              "secret": "example-secret",
              "configMap": "example-configmap",
              "path": "/mnt/secret"
            }
          ],
          "envs": [
            {
              "name": "EXAMPLE_ENV",
              "value": "example-value"
            }
          ]
        },
        "deploy": {
          "namespace": "example-namespace",
          "annotations": {
            "example-annotation": "example-value"
          },
          "options": {
            "scale": {
              "min": 1,
              "max": 10,
              "metric": "concurrency",
              "target": 50,
              "utilization": 50
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "128Mi"
              },
              "limits": {
                "cpu": "200m",
                "memory": "256Mi",
                "concurrency": 10
              }
            }
          },
          "labels": [
            {
              "key": "example-label",
              "value": "example-value"
            }
          ],
          "healthEndpoints": {
            "liveness": "/health/liveness",
            "readiness": "/health/readiness"
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword or maximum keyword",
      "valid": false,
      "rust_error": "-1 is less than the minimum of 0",
      "python_error": "-1 is less than the minimum of 0\n\nFailed validating 'minimum' in schema['properties']['deploy']['properties']['options']['properties']['scale']['properties']['min']:\n    {'type': 'integer', 'minimum': 0}\n\nOn instance['deploy']['options']['scale']['min']:\n    -1",
      "data": {
        "specVersion": "1.0.0",
        "name": "example-function",
        "runtime": "nodejs14",
        "registry": "docker.io",
        "image": "example-function-image",
        "imageDigest": "sha256:example-function-image-digest",
        "created": "2022-01-01T12:00:00Z",
        "build": {
          "buildpacks": [
            "gcr.io/paketo-buildpacks/nodejs:0.0.1"
          ],
          "builder": "pack",
          "buildEnvs": [
            {
              "name": "NODE_ENV",
              "value": "production"
            }
          ],
          "git": {
            "url": "https://github.com/example-function.git",
            "revision": "main",
            "contextDir": "."
          }
        },
        "run": {
          "volumes": [
            {
              "secret": "example-secret",
              "path": "/mnt/secret"
            },
            {
              "configMap": "example-configmap",
              "path": "/mnt/configmap"
            }
          ],
          "envs": [
            {
              "name": "EXAMPLE_ENV",
              "value": "example-value"
            }
          ]
        },
        "deploy": {
          "namespace": "example-namespace",
          "annotations": {
            "example-annotation": "example-value"
          },
          "options": {
            "scale": {
              "min": -1,
              "max": 10,
              "metric": "concurrency",
              "target": 50,
              "utilization": 50
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "128Mi"
              },
              "limits": {
                "cpu": "200m",
                "memory": "256Mi",
                "concurrency": 10
              }
            }
          },
          "labels": [
            {
              "key": "example-label",
              "value": "example-value"
            }
          ],
          "healthEndpoints": {
            "liveness": "/health/liveness",
            "readiness": "/health/readiness"
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on patternProperties keyword",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('extraProperty' was unexpected)",
      "python_error": "Additional properties are not allowed ('extraProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['build']['properties']['git']:\n    {'properties': {'url': {'type': 'string'},\n                    'revision': {'type': 'string'},\n                    'contextDir': {'type': 'string'}},\n     'additionalProperties': False,\n     'type': 'object'}\n\nOn instance['build']['git']:\n    {'url': 'https://github.com/example-function.git',\n     'revision': 'main',\n     'contextDir': '.',\n     'extraProperty': 'extraValue'}",
      "data": {
        "specVersion": "1.0.0",
        "name": "example-function",
        "runtime": "nodejs14",
        "registry": "docker.io",
        "image": "example-function-image",
        "imageDigest": "sha256:example-function-image-digest",
        "created": "2022-01-01T12:00:00Z",
        "build": {
          "buildpacks": [
            "gcr.io/paketo-buildpacks/nodejs:0.0.1"
          ],
          "builder": "pack",
          "buildEnvs": [
            {
              "name": "NODE_ENV",
              "value": "production"
            }
          ],
          "git": {
            "url": "https://github.com/example-function.git",
            "revision": "main",
            "contextDir": ".",
            "extraProperty": "extraValue"
          }
        },
        "run": {
          "volumes": [
            {
              "secret": "example-secret",
              "path": "/mnt/secret"
            },
            {
              "configMap": "example-configmap",
              "path": "/mnt/configmap"
            }
          ],
          "envs": [
            {
              "name": "EXAMPLE_ENV",
              "value": "example-value"
            }
          ]
        },
        "deploy": {
          "namespace": "example-namespace",
          "annotations": {
            "example-annotation": 12345
          },
          "options": {
            "scale": {
              "min": 1,
              "max": 10,
              "metric": "concurrency",
              "target": 50,
              "utilization": 50
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "128Mi"
              },
              "limits": {
                "cpu": "200m",
                "memory": "256Mi",
                "concurrency": 10
              }
            }
          },
          "labels": [
            {
              "key": "example-label",
              "value": "example-value"
            }
          ],
          "healthEndpoints": {
            "liveness": "/health/liveness",
            "readiness": "/health/readiness"
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on format keyword",
      "valid": false,
      "rust_error": "\"build\" is a required property",
      "python_error": "'build' is a required property\n\nFailed validating 'required' in schema:\n    {'required': ['specVersion',\n                  'name',\n                  'runtime',\n                  'registry',\n                  'image',\n                  'imageDigest',\n                  'created',\n                  'build',\n                  'run',\n                  'deploy'],\n     'properties': {'specVersion': {'type': 'string'},\n                    'name': {'pattern': '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$',\n                             'type': 'string'},\n                    'runtime': {'type': 'string'},\n                    'registry': {'type': 'string'},\n                    'image': {'type': 'string'},\n                    'imageDigest': {'type': 'string'},\n                    'created': {'type': 'string', 'format': 'date-time'},\n                    'invocation': {'$schema': 'http://json-schema.org/draft-04/schema#',\n                                   '$ref': '#/definitions/Invocation'},\n                    'build': {'$schema': 'ht.. (2132 more)",
      "data": {
        "specVersion": "1.0.0",
        "name": "example-function",
        "runtime": "nodejs14",
        "registry": "docker.io",
        "image": "example-function-image",
        "imageDigest": "sha256:example-function-image-digest",
        "created": "2022-01-01T12:00:00",
        " <--- Invalid date-time format. Should be ISO 8601 format (e.g., 2022-01-01T12:00:00Z)": "build",
        "run": {
          "volumes": [
            {
              "secret": "example-secret",
              "path": "/mnt/secret"
            },
            {
              "configMap": "example-configmap",
              "path": "/mnt/configmap"
            }
          ],
          "envs": [
            {
              "name": "EXAMPLE_ENV",
              "value": "example-value"
            }
          ]
        },
        "deploy": {
          "namespace": "example-namespace",
          "annotations": {
            "example-annotation": "example-value"
          },
          "options": {
            "scale": {
              "min": 1,
              "max": 10,
              "metric": "concurrency",
              "target": 50,
              "utilization": 50
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "128Mi"
              },
              "limits": {
                "cpu": "200m",
                "memory": "256Mi",
                "concurrency": 10
              }
            }
          },
          "labels": [
            {
              "key": "example-label",
              "value": "example-value"
            }
          ],
          "healthEndpoints": {
            "liveness": "/health/liveness",
            "readiness": "/health/readiness"
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"buildEnvs\" is a required property",
      "python_error": "Additional properties are not allowed ('\\n\\nmodified', \"'concurrency' in deploy spec 'limits' should be in range from 0 to infinity\", \"'key' in labels should match the pattern ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\\\/)?([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$\", \"'utilization' in deploy spec 'scale' options should be in range from 1 to 100\", \"'value' in labels should match the pattern ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$\", \"One of 'requests' or 'limits' is required in 'resources' in deploy spec but not provided\", \"One of 'secret' or 'configMap' is required in 'volumes' in run spec but not provided\", 'modified utilization to be more than 100', 'removed buildEnvs property in build spec', 'removed resources property in deploy spec' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'required': ['specVersion',\n                  'name',\n                  'runtime',\n                  'registry',\n                  'image',\n                  'imageDigest',\n.. (4537 more)",
      "data": {
        "specVersion": "1.0.0",
        "name": "example-function",
        "runtime": "nodejs14",
        "registry": "docker.io",
        "image": "example-function-image",
        "imageDigest": "sha256:example-function-image-digest",
        "created": "2022-01-01T12:00:00Z",
        "build": {
          "buildpacks": [
            "gcr.io/paketo-buildpacks/nodejs:0.0.1"
          ],
          "builder": "custom",
          "modified from 'pack' to 'custom', allowed values are ['pack', 's2i']": "buildEnvs",
          "replaced buildEnvs with invalid property": [
            {
              "name": "NODE_ENV",
              "value": "production"
            }
          ],
          "git": {
            "url": "https://github.com/example-function.git",
            "revision": "main",
            "contextDir": "."
          }
        },
        "run": {
          "volumes": [
            {
              "secret": "example-secret",
              "path": "/mnt/secret"
            },
            {
              "configMap": "example-configmap",
              "path": "/mnt/configmap"
            }
          ],
          "envs": [
            {
              "name": "EXAMPLE_ENV",
              "value": "example-value"
            }
          ]
        },
        "deploy": {
          "namespace": "example-namespace",
          "annotations": {
            "example-annotation": "example-value"
          },
          "options": {
            "scale": {
              "min": 1,
              "max": 10,
              "metric": "concurrency",
              "target": 50,
              "utilization": 150,
              "modified utilization to be more than 100": "resources",
              "replaced resources with invalid property": {
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi"
                },
                "limits": {
                  "cpu": "200m",
                  "memory": "256Mi",
                  "concurrency": 10
                }
              }
            },
            "labels": [
              {
                "key": "example-label",
                "value": "example-value"
              }
            ],
            "healthEndpoints": {
              "liveness": "/health/liveness",
              "readiness": "/health/readiness"
            }
          }
        },
        "\n\nmodified": "builder' in build spec",
        "One of 'secret' or 'configMap' is required in 'volumes' in run spec but not provided": "",
        "'utilization' in deploy spec 'scale' options should be in range from 1 to 100": "",
        "One of 'requests' or 'limits' is required in 'resources' in deploy spec but not provided": "",
        "'concurrency' in deploy spec 'limits' should be in range from 0 to infinity": "",
        "'key' in labels should match the pattern ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*\\/)?([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$": "",
        "'value' in labels should match the pattern ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$": "",
        "removed buildEnvs property in build spec": "",
        "removed resources property in deploy spec": "",
        "modified utilization to be more than 100": ""
      }
    }
  ]
}