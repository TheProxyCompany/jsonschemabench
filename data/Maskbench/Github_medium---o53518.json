{
  "description": "sample Github_medium/o53518.json",
  "meta": {
    "full_size": 1430,
    "stripped_size": 563,
    "features": [
      "@minmaxInteger",
      "@minmaxLength",
      "@minmaxNumber",
      "additionalProperties",
      "enum",
      "pattern"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "maxLength",
      "maximum",
      "minLength",
      "minimum",
      "properties",
      "required",
      "type",
      "type:boolean",
      "type:integer",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "nbgrader cell metadata schema",
    "type": "object",
    "properties": {
      "schema_version": {
        "description": "the version of the cell metadata schema",
        "type": "integer",
        "minimum": 3,
        "maximum": 3
      },
      "grade": {
        "description": "whether this cell should be graded",
        "type": "boolean",
        "default": false
      },
      "locked": {
        "description": "whether the cell should be editable",
        "type": "boolean",
        "default": false
      },
      "solution": {
        "description": "whether this cell contains a solution",
        "type": "boolean",
        "default": false
      },
      "task": {
        "description": "whether this cell contains a task",
        "type": "boolean",
        "default": false
      },
      "grade_id": {
        "description": "the nbgrader id of the cell, only present if one or more of grade/locked/solution is true",
        "type": "string",
        "pattern": "^[a-zA-Z0-9_\\-]*$"
      },
      "points": {
        "description": "the number of points this cell is worth; only present if grade is true",
        "type": "number",
        "minimum": 0
      },
      "checksum": {
        "description": "a checksum of the cell contents; generally only present in the student version of an assignment",
        "type": "string",
        "minLength": 32,
        "maxLength": 32
      },
      "cell_type": {
        "description": "the type the cell was when nbgrader generate_assignment was run; used for checking if the cell type has changed and should only be present in the student version of an assignment",
        "type": "string",
        "enum": [
          "raw",
          "code",
          "markdown"
        ]
      }
    },
    "required": [
      "schema_version",
      "grade",
      "locked",
      "solution"
    ],
    "additionalProperties": false
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "schema_version": 3,
        "grade": true,
        "locked": false,
        "solution": false,
        "task": false,
        "grade_id": "example_grade_id",
        "points": 10,
        "checksum": "0123456789abcdef0123456789abcdef",
        "cell_type": "code"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword or maxLength keyword",
      "valid": false,
      "rust_error": "\"0123456789abcdef0123456789abcde\" is shorter than 32 characters",
      "python_error": "'0123456789abcdef0123456789abcde' is too short\n\nFailed validating 'minLength' in schema['properties']['checksum']:\n    {'description': 'a checksum of the cell contents; generally only '\n                    'present in the student version of an assignment',\n     'type': 'string',\n     'minLength': 32,\n     'maxLength': 32}\n\nOn instance['checksum']:\n    '0123456789abcdef0123456789abcde'",
      "data": {
        "schema_version": 3,
        "grade": true,
        "locked": false,
        "solution": false,
        "task": false,
        "grade_id": "example_grade_id",
        "points": 10,
        "checksum": "0123456789abcdef0123456789abcde",
        "cell_type": "code"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword or maximum keyword",
      "valid": false,
      "rust_error": "2 is less than the minimum of 3",
      "python_error": "2 is less than the minimum of 3\n\nFailed validating 'minimum' in schema['properties']['schema_version']:\n    {'description': 'the version of the cell metadata schema',\n     'type': 'integer',\n     'minimum': 3,\n     'maximum': 3}\n\nOn instance['schema_version']:\n    2",
      "data": {
        "schema_version": 2,
        "grade": true,
        "locked": false,
        "solution": false,
        "task": false,
        "grade_id": "example_grade_id",
        "points": -1,
        "checksum": "0123456789abcdef0123456789abcdef",
        "cell_type": "code"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword or maximum keyword",
      "valid": false,
      "rust_error": "4 is greater than the maximum of 3",
      "python_error": "4 is greater than the maximum of 3\n\nFailed validating 'maximum' in schema['properties']['schema_version']:\n    {'description': 'the version of the cell metadata schema',\n     'type': 'integer',\n     'minimum': 3,\n     'maximum': 3}\n\nOn instance['schema_version']:\n    4",
      "data": {
        "schema_version": 4,
        "grade": true,
        "locked": false,
        "solution": false,
        "task": false,
        "grade_id": "example_grade_id",
        "points": 10,
        "checksum": "0123456789abcdef0123456789abcdef",
        "cell_type": "code"
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"example_grade_id!\" does not match \"^[a-zA-Z0-9_\\-]*$\"",
      "python_error": "'example_grade_id!' does not match '^[a-zA-Z0-9_\\\\-]*$'\n\nFailed validating 'pattern' in schema['properties']['grade_id']:\n    {'description': 'the nbgrader id of the cell, only present if one or '\n                    'more of grade/locked/solution is true',\n     'type': 'string',\n     'pattern': '^[a-zA-Z0-9_\\\\-]*$'}\n\nOn instance['grade_id']:\n    'example_grade_id!'",
      "data": {
        "schema_version": 3,
        "grade": true,
        "locked": false,
        "solution": false,
        "task": false,
        "grade_id": "example_grade_id!",
        "points": 10,
        "checksum": "0123456789abcdef0123456789abcdef",
        "cell_type": "code"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword or maxLength keyword",
      "valid": false,
      "rust_error": "\"0123456789abcdef0123456789abcdef0123456789abcdef\" is longer than 32 characters",
      "python_error": "'0123456789abcdef0123456789abcdef0123456789abcdef' is too long\n\nFailed validating 'maxLength' in schema['properties']['checksum']:\n    {'description': 'a checksum of the cell contents; generally only '\n                    'present in the student version of an assignment',\n     'type': 'string',\n     'minLength': 32,\n     'maxLength': 32}\n\nOn instance['checksum']:\n    '0123456789abcdef0123456789abcdef0123456789abcdef'",
      "data": {
        "schema_version": 3,
        "grade": true,
        "locked": false,
        "solution": false,
        "task": false,
        "grade_id": "example_grade_id",
        "points": 10,
        "checksum": "0123456789abcdef0123456789abcdef0123456789abcdef",
        "cell_type": "code"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword or maxLength keyword",
      "valid": false,
      "rust_error": "\"0123456789abcdef0123456789abcdef0\" is longer than 32 characters",
      "python_error": "'0123456789abcdef0123456789abcdef0' is too long\n\nFailed validating 'maxLength' in schema['properties']['checksum']:\n    {'description': 'a checksum of the cell contents; generally only '\n                    'present in the student version of an assignment',\n     'type': 'string',\n     'minLength': 32,\n     'maxLength': 32}\n\nOn instance['checksum']:\n    '0123456789abcdef0123456789abcdef0'",
      "data": {
        "schema_version": 3,
        "grade": true,
        "locked": false,
        "solution": false,
        "task": false,
        "grade_id": "example_grade_id",
        "points": 10,
        "checksum": "0123456789abcdef0123456789abcdef0",
        "cell_type": "code"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"0123456789abcdef0123456789abcde\" is shorter than 32 characters",
      "python_error": "Additional properties are not allowed ('invalid_property' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'http://json-schema.org/draft-04/schema#',\n     'title': 'nbgrader cell metadata schema',\n     'type': 'object',\n     'properties': {'schema_version': {'description': 'the version of the '\n                                                      'cell metadata '\n                                                      'schema',\n                                       'type': 'integer',\n                                       'minimum': 3,\n                                       'maximum': 3},\n                    'grade': {'description': 'whether this cell should be '\n                                             'graded',\n                              'type': 'boolean',\n                              'default': False},\n                    'locked': {'description': 'whether the cell should be '\n                                              'editable',\n                             .. (2936 more)",
      "data": {
        "schema_version": 3,
        "grade": true,
        "locked": false,
        "solution": false,
        "task": false,
        "grade_id": "example_grade_id",
        "points": 10,
        "checksum": "0123456789abcdef0123456789abcde",
        "cell_type": "code",
        "invalid_property": "hello"
      }
    }
  ]
}