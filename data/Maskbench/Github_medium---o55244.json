{
  "description": "sample Github_medium/o55244.json",
  "meta": {
    "full_size": 3730,
    "stripped_size": 1576,
    "features": [
      "$ref",
      "@minmaxItems",
      "@minmaxProperties",
      "@siblingKeys",
      "additionalProperties",
      "dependencies",
      "items",
      "oneOf",
      "pattern"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "maxProperties",
      "minItems",
      "properties",
      "required",
      "type",
      "type:array",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$ref": "#/definitions/canonicalData",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "comments": [
      " This is a JSON Schema for 'canonical-data.json' files.     ",
      "                                                            ",
      " It enforces just a general structure for all exercises,    ",
      " without specifying how the test data should be organized   ",
      " for each type of test. We do this to keep generality and   ",
      " allow support for tests the do not fit well in the         ",
      " 'function (input) == output' structure, like property      ",
      " tests.                                                     ",
      "                                                            ",
      " The only thing enforced regarding how test data should be  ",
      " structured is the error encoding, because it was agreed    ",
      " and it doesn't restrict flexibility in a significant way.  ",
      "                                                            ",
      " Standardized property names may help when automatically    ",
      " deriving JSON parsers in some languages, so we followed    ",
      " a few conventions from the 'Google JSON Style Guide'.      ",
      "                                                            ",
      " Additionally, this schema strictly enforces letters, in    ",
      " lowerCamelCase, for naming the 'property' being tested. We ",
      " expect this regularity will allow an easier automatic      ",
      " generation of function's names in test generators,         ",
      " slightly reducing the amount of manually generated code.   "
    ],
    "definitions": {
      "canonicalData": {
        "additionalProperties": false,
        "description": "This is the top-level file structure",
        "properties": {
          "cases": {
            "$ref": "#/definitions/testGroup"
          },
          "comments": {
            "$ref": "#/definitions/comments"
          },
          "exercise": {
            "$ref": "#/definitions/exercise"
          },
          "version": {
            "$ref": "#/definitions/version"
          }
        },
        "required": [
          "exercise",
          "version",
          "cases"
        ],
        "type": "object"
      },
      "comments": {
        "description": "An array of strings to fake multi-line comments",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "type": "array"
      },
      "description": {
        "description": "A short, clear, one-line description",
        "type": "string"
      },
      "error": {
        "description": "A message describing an error condition",
        "type": "string"
      },
      "exercise": {
        "description": "Exercise's slug (kebab-case)",
        "pattern": "^[a-z]+(-[a-z]+)*$",
        "type": "string"
      },
      "expected": {
        "dependencies": {
          "error": {
            "maxProperties": 1
          }
        },
        "description": "The expected return value of a test case",
        "properties": {
          "error": {
            "$ref": "#/definitions/error"
          }
        }
      },
      "labeledTest": {
        "description": "A single test with a description",
        "properties": {
          "comments": {
            "$ref": "#/definitions/comments"
          },
          "description": {
            "$ref": "#/definitions/description"
          },
          "expected": {
            "$ref": "#/definitions/expected"
          },
          "property": {
            "$ref": "#/definitions/property"
          }
        },
        "required": [
          "description",
          "property"
        ],
        "type": "object"
      },
      "labeledTestGroup": {
        "additionalProperties": false,
        "description": "A group of tests with a description",
        "properties": {
          "cases": {
            "$ref": "#/definitions/testGroup"
          },
          "comments": {
            "$ref": "#/definitions/comments"
          },
          "description": {
            "$ref": "#/definitions/description"
          }
        },
        "required": [
          "description",
          "cases"
        ],
        "type": "object"
      },
      "labeledTestItem": {
        "description": "A single test or group of tests with a description",
        "oneOf": [
          {
            "$ref": "#/definitions/labeledTest"
          },
          {
            "$ref": "#/definitions/labeledTestGroup"
          }
        ]
      },
      "property": {
        "description": "A letters-only, lowerCamelCase property name",
        "pattern": "^[a-z]+([A-Z][a-z]+)*[A-Z]?$",
        "type": "string"
      },
      "testGroup": {
        "description": "An array of labeled test items",
        "items": {
          "$ref": "#/definitions/labeledTestItem"
        },
        "minItems": 1,
        "type": "array"
      },
      "version": {
        "description": "Semantic versioning: MAJOR.MINOR.PATCH",
        "pattern": "^(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*)){2}$",
        "type": "string"
      }
    },
    "self": {
      "format": "jsonschema",
      "name": "canonical-data",
      "vendor": "io.exercism",
      "version": "1-0-0"
    }
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "exercise": "hello-world",
        "version": "1.2.3",
        "cases": [
          {
            "description": "A simple test case",
            "property": "helloWorld",
            "expected": {}
          },
          {
            "description": "A test case with an error",
            "property": "helloWorld",
            "expected": {
              "error": "Invalid input"
            }
          },
          {
            "description": "A test group",
            "cases": [
              {
                "description": "A test case in the group",
                "property": "helloWorld",
                "expected": {}
              },
              {
                "description": "Another test case in the group",
                "property": "helloWorld",
                "expected": {
                  "error": "Invalid input"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "exercise": "hello-world",
        "version": "1.0.0",
        "cases": [
          {
            "description": "returns hello world",
            "property": "helloWorld",
            "expected": {}
          },
          {
            "description": "returns hello world with a name",
            "property": "helloWorldWithName",
            "expected": {}
          },
          {
            "description": "returns an error for invalid input",
            "property": "helloWorldWithError",
            "expected": {
              "error": "Invalid input"
            }
          },
          {
            "description": "returns hello world with multiple names",
            "property": "helloWorldWithMultipleNames",
            "expected": {}
          },
          {
            "description": "returns an error for invalid input with multiple names",
            "property": "helloWorldWithErrorAndMultipleNames",
            "expected": {
              "error": "Invalid input"
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"hello-world-123\" does not match \"^[a-z]+(-[a-z]+)*$\"",
      "python_error": "'hello-world-123' does not match '^[a-z]+(-[a-z]+)*$'\n\nFailed validating 'pattern' in schema['properties']['exercise']:\n    {'description': \"Exercise's slug (kebab-case)\",\n     'pattern': '^[a-z]+(-[a-z]+)*$',\n     'type': 'string'}\n\nOn instance['exercise']:\n    'hello-world-123'",
      "data": {
        "exercise": "hello-world-123",
        "version": "1.0.0",
        "cases": [
          {
            "description": "returns hello world",
            "property": "helloWorld",
            "expected": {}
          },
          {
            "description": "returns hello world with a name",
            "property": "helloWorldWithName",
            "expected": {}
          },
          {
            "description": "returns an error for invalid input",
            "property": "helloWorldWithError",
            "expected": {
              "error": "Invalid input"
            }
          },
          {
            "description": "returns hello world with multiple names",
            "property": "helloWorldWithMultipleNames",
            "expected": {}
          },
          {
            "description": "returns an error for invalid input with multiple names",
            "property": "helloWorldWithErrorAndMultipleNames",
            "expected": {
              "error": "Invalid input"
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on maxProperties keyword",
      "valid": false,
      "rust_error": "{\"description\":\"returns hello world\",\"property\":\"helloWorld\",\"expected\":{\"error\":\"Invalid input\",\"additionalProperty\":\"Invalid input\"}} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'error': 'Invalid input', 'additionalProperty': 'Invalid input'} has too many properties\n\nFailed validating 'maxProperties' in schema[0]['properties']['expected']['dependencies']['error']:\n    {'maxProperties': 1}\n\nOn instance['expected']:\n    {'error': 'Invalid input', 'additionalProperty': 'Invalid input'}",
      "data": {
        "exercise": "hello-world",
        "version": "1.0.0",
        "cases": [
          {
            "description": "returns hello world",
            "property": "helloWorld",
            "expected": {
              "error": "Invalid input",
              "additionalProperty": "Invalid input"
            }
          },
          {
            "description": "returns hello world with a name",
            "property": "helloWorldWithName",
            "expected": {}
          },
          {
            "description": "returns an error for invalid input",
            "property": "helloWorldWithError",
            "expected": {
              "error": "Invalid input"
            }
          },
          {
            "description": "returns hello world with multiple names",
            "property": "helloWorldWithMultipleNames",
            "expected": {}
          },
          {
            "description": "returns an error for invalid input with multiple names",
            "property": "helloWorldWithErrorAndMultipleNames",
            "expected": {
              "error": "Invalid input",
              "additionalProperty": "Invalid input"
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minItems keyword",
      "valid": false,
      "rust_error": "[] has less than 1 item",
      "python_error": "[] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['cases']:\n    {'description': 'An array of labeled test items',\n     'items': {'$ref': '#/definitions/labeledTestItem'},\n     'minItems': 1,\n     'type': 'array'}\n\nOn instance['cases']:\n    []",
      "data": {
        "exercise": "hello-world",
        "version": "1.0.0",
        "cases": []
      }
    },
    {
      "description": "llama-70b generated negative; focus on dependencies keyword",
      "valid": false,
      "rust_error": "{\"description\":\"returns hello world\",\"property\":\"helloWorld\",\"expected\":{\"error\":\"Invalid input\",\"anotherProperty\":\"someValue\"}} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'error': 'Invalid input', 'anotherProperty': 'someValue'} has too many properties\n\nFailed validating 'maxProperties' in schema[0]['properties']['expected']['dependencies']['error']:\n    {'maxProperties': 1}\n\nOn instance['expected']:\n    {'error': 'Invalid input', 'anotherProperty': 'someValue'}",
      "data": {
        "exercise": "hello-world",
        "version": "1.0.0",
        "cases": [
          {
            "description": "returns hello world",
            "property": "helloWorld",
            "expected": {
              "error": "Invalid input",
              "anotherProperty": "someValue"
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"Hello-World\" does not match \"^[a-z]+(-[a-z]+)*$\"",
      "python_error": "'Hello-World' does not match '^[a-z]+(-[a-z]+)*$'\n\nFailed validating 'pattern' in schema['properties']['exercise']:\n    {'description': \"Exercise's slug (kebab-case)\",\n     'pattern': '^[a-z]+(-[a-z]+)*$',\n     'type': 'string'}\n\nOn instance['exercise']:\n    'Hello-World'",
      "data": {
        "exercise": "Hello-World",
        "version": "1.0.0",
        "cases": [
          {
            "description": "returns hello world",
            "property": "helloWorld",
            "expected": {}
          },
          {
            "description": "returns hello world with a name",
            "property": "helloWorldWithName",
            "expected": {}
          },
          {
            "description": "returns an error for invalid input",
            "property": "helloWorldWithError",
            "expected": {
              "error": "Invalid input"
            }
          },
          {
            "description": "returns hello world with multiple names",
            "property": "helloWorldWithMultipleNames",
            "expected": {}
          },
          {
            "description": "returns an error for invalid input with multiple names",
            "property": "helloWorldWithErrorAndMultipleNames",
            "expected": {
              "error": "Invalid input"
            }
          }
        ]
      }
    }
  ]
}