{
  "description": "sample Github_medium/o83131.json",
  "meta": {
    "full_size": 2228,
    "stripped_size": 1583,
    "features": [
      "$ref",
      "additionalProperties",
      "additionalProperties:object",
      "enum"
    ],
    "raw_features": [
      "$schema",
      "definitions",
      "id",
      "properties",
      "required",
      "type",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "id": "https://github.com/tsqllint/tsqllint/master/schema.json",
    "title": "Configuration for TSQLLint tool",
    "type": "object",
    "definitions": {
      "rule": {
        "type": "string",
        "enum": [
          "off",
          "warning",
          "error"
        ],
        "default": "off"
      }
    },
    "properties": {
      "rules": {
        "type": "object",
        "properties": {
          "conditional-begin-end": {
            "$ref": "#/definitions/rule",
            "description": "Enforce use of BEGIN and END symbols inside condition statements"
          },
          "cross-database-transaction": {
            "$ref": "#/definitions/rule",
            "description": "Discourages inserts or updates that create transactions in more than one database"
          },
          "data-compression": {
            "$ref": "#/definitions/rule",
            "description": "Requires use of compression option during table creation"
          },
          "data-type-length": {
            "$ref": "#/definitions/rule",
            "description": "Requires use of length when declaring data types with variable length"
          },
          "disallow-cursors": {
            "$ref": "#/definitions/rule",
            "description": "Disallows use of cursors"
          },
          "full-text": {
            "$ref": "#/definitions/rule",
            "description": "Disallows use of Full Text"
          },
          "information-schema": {
            "$ref": "#/definitions/rule",
            "description": "Disallows use of INFORMATION_SCHEMA views"
          },
          "keyword-capitalization": {
            "$ref": "#/definitions/rule",
            "description": "Requires use of capitalized keywords"
          },
          "linked-server": {
            "$ref": "#/definitions/rule",
            "description": "Disallows user of linked server calls"
          },
          "multi-table-alias": {
            "$ref": "#/definitions/rule"
          },
          "named-constraint": {
            "$ref": "#/definitions/rule"
          },
          "non-sargable": {
            "$ref": "#/definitions/rule"
          },
          "object-property": {
            "$ref": "#/definitions/rule"
          },
          "print-statement": {
            "$ref": "#/definitions/rule"
          },
          "schema-qualify": {
            "$ref": "#/definitions/rule"
          },
          "select-star": {
            "$ref": "#/definitions/rule"
          },
          "semicolon-termination": {
            "$ref": "#/definitions/rule"
          },
          "set-ansi": {
            "$ref": "#/definitions/rule"
          },
          "set-nocount": {
            "$ref": "#/definitions/rule"
          },
          "set-quoted-identifier": {
            "$ref": "#/definitions/rule"
          },
          "set-transaction-isolation-level": {
            "$ref": "#/definitions/rule"
          },
          "set-variable": {
            "$ref": "#/definitions/rule"
          },
          "upper-lower": {
            "$ref": "#/definitions/rule"
          },
          "unicode-string": {
            "$ref": "#/definitions/rule"
          }
        },
        "additionalProperties": {
          "$ref": "#/definitions/rule"
        }
      },
      "plugins": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "required": [
      "rules"
    ]
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "rules": {
          "conditional-begin-end": "error",
          "cross-database-transaction": "warning",
          "data-compression": "off",
          "data-type-length": "error",
          "disallow-cursors": "warning",
          "full-text": "off",
          "information-schema": "error",
          "keyword-capitalization": "warning",
          "linked-server": "off",
          "multi-table-alias": "error",
          "named-constraint": "warning",
          "non-sargable": "off",
          "object-property": "error",
          "print-statement": "warning",
          "schema-qualify": "off",
          "select-star": "error",
          "semicolon-termination": "warning",
          "set-ansi": "off",
          "set-nocount": "error",
          "set-quoted-identifier": "warning",
          "set-transaction-isolation-level": "off",
          "set-variable": "error",
          "upper-lower": "warning",
          "unicode-string": "off"
        },
        "plugins": {
          "plugin1": "path/to/plugin1",
          "plugin2": "path/to/plugin2"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['rules']['additionalProperties']:\n    {'type': 'string',\n     'enum': ['off', 'warning', 'error'],\n     'default': 'off'}\n\nOn instance['rules']['unknown-rule']:\n    123",
      "data": {
        "rules": {
          "conditional-begin-end": "error",
          "cross-database-transaction": "warning",
          "data-compression": "off",
          "data-type-length": "error",
          "disallow-cursors": "warning",
          "full-text": "off",
          "information-schema": "error",
          "keyword-capitalization": "warning",
          "linked-server": "off",
          "multi-table-alias": "error",
          "named-constraint": "warning",
          "non-sargable": "off",
          "object-property": "error",
          "print-statement": "warning",
          "schema-qualify": "off",
          "select-star": "error",
          "semicolon-termination": "warning",
          "set-ansi": "off",
          "set-nocount": "error",
          "set-quoted-identifier": "warning",
          "set-transaction-isolation-level": "off",
          "set-variable": "error",
          "upper-lower": "warning",
          "unicode-string": "off",
          "unknown-rule": 123
        },
        "plugins": {
          "plugin1": "path/to/plugin1",
          "plugin2": "path/to/plugin2"
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"invalid\" is not one of [\"off\",\"warning\",\"error\"]",
      "python_error": "'invalid' is not one of ['off', 'warning', 'error']\n\nFailed validating 'enum' in schema['properties']['rules']['additionalProperties']:\n    {'type': 'string',\n     'enum': ['off', 'warning', 'error'],\n     'default': 'off'}\n\nOn instance['rules']['invalid-rule']:\n    'invalid'",
      "data": {
        "rules": {
          "conditional-begin-end": "error",
          "cross-database-transaction": "warning",
          "data-compression": "off",
          "data-type-length": "error",
          "disallow-cursors": "warning",
          "full-text": "off",
          "information-schema": "error",
          "keyword-capitalization": "warning",
          "linked-server": "off",
          "multi-table-alias": "error",
          "named-constraint": "warning",
          "non-sargable": "off",
          "object-property": "error",
          "print-statement": "warning",
          "schema-qualify": "off",
          "select-star": "error",
          "semicolon-termination": "warning",
          "set-ansi": "off",
          "set-nocount": "error",
          "set-quoted-identifier": "warning",
          "set-transaction-isolation-level": "off",
          "set-variable": "error",
          "upper-lower": "warning",
          "unicode-string": "off",
          "invalid-rule": "invalid"
        },
        "plugins": {
          "plugin1": "path/to/plugin1",
          "plugin2": "path/to/plugin2"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "{\"nested-key\":\"nested-value\"} is not of type \"string\"",
      "python_error": "{'nested-key': 'nested-value'} is not of type 'string'\n\nFailed validating 'type' in schema['properties']['rules']['additionalProperties']:\n    {'type': 'string',\n     'enum': ['off', 'warning', 'error'],\n     'default': 'off'}\n\nOn instance['rules']['invalid-rule']:\n    {'nested-key': 'nested-value'}",
      "data": {
        "rules": {
          "conditional-begin-end": "error",
          "cross-database-transaction": "warning",
          "data-compression": "off",
          "data-type-length": "error",
          "disallow-cursors": "warning",
          "full-text": "off",
          "information-schema": "error",
          "keyword-capitalization": "warning",
          "linked-server": "off",
          "multi-table-alias": "error",
          "named-constraint": "warning",
          "non-sargable": "off",
          "object-property": "error",
          "print-statement": "warning",
          "schema-qualify": "off",
          "select-star": "error",
          "semicolon-termination": "warning",
          "set-ansi": "off",
          "set-nocount": "error",
          "set-quoted-identifier": "warning",
          "set-transaction-isolation-level": "off",
          "set-variable": "error",
          "upper-lower": "warning",
          "unicode-string": "off",
          "invalid-rule": {
            "nested-key": "nested-value"
          }
        },
        "plugins": {
          "plugin1": "path/to/plugin1",
          "plugin2": "path/to/plugin2"
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "rules": {
          "conditional-begin-end": "error",
          "cross-database-transaction": "warning",
          "data-compression": "off",
          "data-type-length": "error",
          "disallow-cursors": "error",
          "full-text": "off",
          "information-schema": "warning",
          "keyword-capitalization": "error",
          "linked-server": "error",
          "multi-table-alias": "off",
          "named-constraint": "off",
          "non-sargable": "off",
          "object-property": "off",
          "print-statement": "off",
          "schema-qualify": "off",
          "select-star": "off",
          "semicolon-termination": "off",
          "set-ansi": "off",
          "set-nocount": "off",
          "set-quoted-identifier": "off",
          "set-transaction-isolation-level": "off",
          "set-variable": "off",
          "upper-lower": "off",
          "unicode-string": "off"
        },
        "plugins": {
          "plugin1": "path/to/plugin1",
          "plugin2": "path/to/plugin2"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "{\"foo\":\"bar\"} is not of type \"string\"",
      "python_error": "{'foo': 'bar'} is not of type 'string'\n\nFailed validating 'type' in schema['properties']['rules']['additionalProperties']:\n    {'type': 'string',\n     'enum': ['off', 'warning', 'error'],\n     'default': 'off'}\n\nOn instance['rules']['some-new-rule']:\n    {'foo': 'bar'}",
      "data": {
        "rules": {
          "conditional-begin-end": "error",
          "cross-database-transaction": "warning",
          "data-compression": "off",
          "data-type-length": "error",
          "disallow-cursors": "error",
          "full-text": "off",
          "information-schema": "warning",
          "keyword-capitalization": "error",
          "linked-server": "error",
          "multi-table-alias": "off",
          "named-constraint": "off",
          "non-sargable": "off",
          "object-property": "off",
          "print-statement": "off",
          "schema-qualify": "off",
          "select-star": "off",
          "semicolon-termination": "off",
          "set-ansi": "off",
          "set-nocount": "off",
          "set-quoted-identifier": "off",
          "set-transaction-isolation-level": "off",
          "set-variable": "off",
          "upper-lower": "off",
          "unicode-string": "off",
          "some-new-rule": {
            "foo": "bar"
          }
        },
        "plugins": {
          "plugin1": "path/to/plugin1",
          "plugin2": "path/to/plugin2"
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"info\" is not one of [\"off\",\"warning\",\"error\"]",
      "python_error": "'info' is not one of ['off', 'warning', 'error']\n\nFailed validating 'enum' in schema['properties']['rules']['additionalProperties']:\n    {'type': 'string',\n     'enum': ['off', 'warning', 'error'],\n     'default': 'off'}\n\nOn instance['rules']['unknown-rule']:\n    'info'",
      "data": {
        "rules": {
          "conditional-begin-end": "error",
          "cross-database-transaction": "warning",
          "data-compression": "off",
          "data-type-length": "error",
          "disallow-cursors": "error",
          "full-text": "off",
          "information-schema": "warning",
          "keyword-capitalization": "error",
          "linked-server": "error",
          "multi-table-alias": "off",
          "named-constraint": "off",
          "non-sargable": "off",
          "object-property": "off",
          "print-statement": "off",
          "schema-qualify": "off",
          "select-star": "off",
          "semicolon-termination": "off",
          "set-ansi": "off",
          "set-nocount": "off",
          "set-quoted-identifier": "off",
          "set-transaction-isolation-level": "off",
          "set-variable": "off",
          "upper-lower": "off",
          "unicode-string": "off",
          "unknown-rule": "info"
        },
        "plugins": {
          "plugin1": "path/to/plugin1",
          "plugin2": "path/to/plugin2",
          "plugin3": 123
        }
      }
    }
  ]
}