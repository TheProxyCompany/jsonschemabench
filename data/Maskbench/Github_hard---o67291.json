{
  "description": "sample Github_hard/o67291.json",
  "meta": {
    "full_size": 5823,
    "stripped_size": 5753,
    "features": [
      "$ref",
      "@siblingKeys",
      "additionalProperties",
      "anyOf",
      "enum",
      "items"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
      "MyGame_OtherNameSpace_FromInclude": {
        "type": "string",
        "enum": [
          "IncludeVal"
        ]
      },
      "MyGame_Example_Color": {
        "type": "string",
        "enum": [
          "Red",
          "Green",
          "Blue"
        ]
      },
      "MyGame_Example_Race": {
        "type": "string",
        "enum": [
          "None",
          "Human",
          "Dwarf",
          "Elf"
        ]
      },
      "MyGame_Example_Any": {
        "type": "string",
        "enum": [
          "NONE",
          "Monster",
          "TestSimpleTableWithEnum",
          "MyGame_Example2_Monster"
        ]
      },
      "MyGame_Example_AnyUniqueAliases": {
        "type": "string",
        "enum": [
          "NONE",
          "M",
          "TS",
          "M2"
        ]
      },
      "MyGame_Example_AnyAmbiguousAliases": {
        "type": "string",
        "enum": [
          "NONE",
          "M1",
          "M2",
          "M3"
        ]
      },
      "MyGame_OtherNameSpace_Unused": {
        "type": "object",
        "properties": {
          "a": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "MyGame_OtherNameSpace_TableB": {
        "type": "object",
        "properties": {
          "a": {
            "$ref": "#/definitions/TableA"
          }
        },
        "additionalProperties": false
      },
      "TableA": {
        "type": "object",
        "properties": {
          "b": {
            "$ref": "#/definitions/MyGame_OtherNameSpace_TableB"
          }
        },
        "additionalProperties": false
      },
      "MyGame_InParentNamespace": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "MyGame_Example2_Monster": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "MyGame_Example_Test": {
        "type": "object",
        "properties": {
          "a": {
            "type": "number"
          },
          "b": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "MyGame_Example_TestSimpleTableWithEnum": {
        "type": "object",
        "properties": {
          "color": {
            "$ref": "#/definitions/MyGame_Example_Color"
          }
        },
        "additionalProperties": false
      },
      "MyGame_Example_Vec3": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          },
          "test1": {
            "type": "number"
          },
          "test2": {
            "$ref": "#/definitions/MyGame_Example_Color"
          },
          "test3": {
            "$ref": "#/definitions/MyGame_Example_Test"
          }
        },
        "additionalProperties": false
      },
      "MyGame_Example_Ability": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "distance": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "MyGame_Example_Stat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "val": {
            "type": "number"
          },
          "count": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "MyGame_Example_Referrable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          }
        },
        "additionalProperties": false
      },
      "MyGame_Example_Monster": {
        "type": "object",
        "description": " an example documentation comment: \"monster object\"",
        "properties": {
          "pos": {
            "$ref": "#/definitions/MyGame_Example_Vec3"
          },
          "mana": {
            "type": "number"
          },
          "hp": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "friendly": {
            "type": "boolean"
          },
          "inventory": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "color": {
            "$ref": "#/definitions/MyGame_Example_Color"
          },
          "test_type": {
            "$ref": "#/definitions/MyGame_Example_Any"
          },
          "test": {
            "anyOf": [
              {
                "$ref": "#/definitions/MyGame_Example_Monster"
              },
              {
                "$ref": "#/definitions/MyGame_Example_TestSimpleTableWithEnum"
              },
              {
                "$ref": "#/definitions/MyGame_Example2_Monster"
              }
            ]
          },
          "test4": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MyGame_Example_Test"
            }
          },
          "testarrayofstring": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "testarrayoftables": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MyGame_Example_Monster"
            }
          },
          "enemy": {
            "$ref": "#/definitions/MyGame_Example_Monster"
          },
          "testnestedflatbuffer": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "testempty": {
            "$ref": "#/definitions/MyGame_Example_Stat"
          },
          "testbool": {
            "type": "boolean"
          },
          "testhashs32_fnv1": {
            "type": "number"
          },
          "testhashu32_fnv1": {
            "type": "number"
          },
          "testhashs64_fnv1": {
            "type": "number"
          },
          "testhashu64_fnv1": {
            "type": "number"
          },
          "testhashs32_fnv1a": {
            "type": "number"
          },
          "testhashu32_fnv1a": {
            "type": "number"
          },
          "testhashs64_fnv1a": {
            "type": "number"
          },
          "testhashu64_fnv1a": {
            "type": "number"
          },
          "testarrayofbools": {
            "type": "array",
            "items": {
              "type": "boolean"
            }
          },
          "testf": {
            "type": "number"
          },
          "testf2": {
            "type": "number"
          },
          "testf3": {
            "type": "number"
          },
          "testarrayofstring2": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "testarrayofsortedstruct": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MyGame_Example_Ability"
            }
          },
          "flex": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "test5": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MyGame_Example_Test"
            }
          },
          "vector_of_longs": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "vector_of_doubles": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "parent_namespace_test": {
            "$ref": "#/definitions/MyGame_InParentNamespace"
          },
          "vector_of_referrables": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MyGame_Example_Referrable"
            }
          },
          "single_weak_reference": {
            "type": "number"
          },
          "vector_of_weak_references": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "vector_of_strong_referrables": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MyGame_Example_Referrable"
            }
          },
          "co_owning_reference": {
            "type": "number"
          },
          "vector_of_co_owning_references": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "non_owning_reference": {
            "type": "number"
          },
          "vector_of_non_owning_references": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "any_unique_type": {
            "$ref": "#/definitions/MyGame_Example_AnyUniqueAliases"
          },
          "any_unique": {
            "anyOf": [
              {
                "$ref": "#/definitions/MyGame_Example_Monster"
              },
              {
                "$ref": "#/definitions/MyGame_Example_TestSimpleTableWithEnum"
              },
              {
                "$ref": "#/definitions/MyGame_Example2_Monster"
              }
            ]
          },
          "any_ambiguous_type": {
            "$ref": "#/definitions/MyGame_Example_AnyAmbiguousAliases"
          },
          "any_ambiguous": {
            "anyOf": [
              {
                "$ref": "#/definitions/MyGame_Example_Monster"
              },
              {
                "$ref": "#/definitions/MyGame_Example_Monster"
              },
              {
                "$ref": "#/definitions/MyGame_Example_Monster"
              }
            ]
          },
          "vector_of_enums": {
            "$ref": "#/definitions/MyGame_Example_Color"
          },
          "signed_enum": {
            "$ref": "#/definitions/MyGame_Example_Race"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "MyGame_Example_TypeAliases": {
        "type": "object",
        "properties": {
          "i8": {
            "type": "number"
          },
          "u8": {
            "type": "number"
          },
          "i16": {
            "type": "number"
          },
          "u16": {
            "type": "number"
          },
          "i32": {
            "type": "number"
          },
          "u32": {
            "type": "number"
          },
          "i64": {
            "type": "number"
          },
          "u64": {
            "type": "number"
          },
          "f32": {
            "type": "number"
          },
          "f64": {
            "type": "number"
          },
          "v8": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "vf64": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "additionalProperties": false
      }
    },
    "$ref": "#/definitions/MyGame_Example_Monster"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "name": "Monster1",
        "friendly": true,
        "color": "Red",
        "test_type": "Monster",
        "test": {
          "name": "Monster2",
          "friendly": false,
          "color": "Green",
          "test_type": "TestSimpleTableWithEnum",
          "test": {
            "color": "Blue"
          }
        },
        "test4": [
          {
            "a": 1,
            "b": 2
          },
          {
            "a": 3,
            "b": 4
          }
        ],
        "testarrayofstring": [
          "string1",
          "string2"
        ],
        "testarrayoftables": [
          {
            "name": "Monster3",
            "friendly": true,
            "color": "Red"
          },
          {
            "name": "Monster4",
            "friendly": false,
            "color": "Green"
          }
        ],
        "enemy": {
          "name": "Monster5",
          "friendly": true,
          "color": "Blue"
        },
        "testnestedflatbuffer": [
          1,
          2,
          3
        ],
        "testempty": {
          "id": "id1",
          "val": 1,
          "count": 1
        },
        "testbool": true,
        "testhashs32_fnv1": 1,
        "testhashu32_fnv1": 1,
        "testhashs64_fnv1": 1,
        "testhashu64_fnv1": 1,
        "testhashs32_fnv1a": 1,
        "testhashu32_fnv1a": 1,
        "testhashs64_fnv1a": 1,
        "testhashu64_fnv1a": 1,
        "testarrayofbools": [
          true,
          false
        ],
        "testf": 1.0,
        "testf2": 2.0,
        "testf3": 3.0,
        "testarrayofsortedstruct": [
          {
            "id": 1,
            "distance": 1
          },
          {
            "id": 2,
            "distance": 2
          }
        ],
        "flex": [
          1,
          2,
          3
        ],
        "test5": [
          {
            "a": 1,
            "b": 2
          },
          {
            "a": 3,
            "b": 4
          }
        ],
        "vector_of_longs": [
          1,
          2,
          3
        ],
        "vector_of_doubles": [
          1.0,
          2.0,
          3.0
        ],
        "parent_namespace_test": {},
        "vector_of_referrables": [
          {
            "id": 1
          },
          {
            "id": 2
          }
        ],
        "single_weak_reference": 1,
        "vector_of_weak_references": [
          1,
          2
        ],
        "vector_of_strong_referrables": [
          {
            "id": 1
          },
          {
            "id": 2
          }
        ],
        "co_owning_reference": 1,
        "vector_of_co_owning_references": [
          1,
          2
        ],
        "non_owning_reference": 1,
        "vector_of_non_owning_references": [
          1,
          2
        ],
        "any_unique_type": "NONE",
        "any_unique": {
          "name": "Monster6",
          "friendly": true,
          "color": "Red"
        },
        "any_ambiguous_type": "NONE",
        "any_ambiguous": {
          "name": "Monster7",
          "friendly": false,
          "color": "Green"
        },
        "vector_of_enums": "Red",
        "signed_enum": "Human"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"Yellow\" is not one of [\"Red\",\"Green\",\"Blue\"]",
      "python_error": "Additional properties are not allowed (\"Invalid color, should be one of 'Red', 'Green', 'Blue'\" was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'type': 'object',\n     'description': ' an example documentation comment: \"monster object\"',\n     'properties': {'pos': {'$ref': '#/definitions/MyGame_Example_Vec3'},\n                    'mana': {'type': 'number'},\n                    'hp': {'type': 'number'},\n                    'name': {'type': 'string'},\n                    'friendly': {'type': 'boolean'},\n                    'inventory': {'type': 'array',\n                                  'items': {'type': 'number'}},\n                    'color': {'$ref': '#/definitions/MyGame_Example_Color'},\n                    'test_type': {'$ref': '#/definitions/MyGame_Example_Any'},\n                    'test': {'anyOf': [{'$ref': '#/definitions/MyGame_Example_Monster'},\n                                       {'$ref': '#/definitions/MyGame_Example_TestSimpleTableWithEnum'},\n                           .. (6762 more)",
      "data": {
        "name": "Monster1",
        "friendly": true,
        "color": "Yellow",
        "Invalid color, should be one of 'Red', 'Green', 'Blue'": "test_type",
        "test": {
          "name": "Monster2",
          "friendly": false,
          "color": "Green",
          "test_type": "TestSimpleTableWithEnum",
          "test": {
            "color": "Blue"
          }
        },
        "test4": [
          {
            "a": 1,
            "b": 2
          },
          {
            "a": 3,
            "b": 4
          }
        ],
        "testarrayofstring": [
          "string1",
          "string2"
        ],
        "testarrayoftables": [
          {
            "name": "Monster3",
            "friendly": true,
            "color": "Red"
          },
          {
            "name": "Monster4",
            "friendly": false,
            "color": "Green"
          }
        ],
        "enemy": {
          "name": "Monster5",
          "friendly": true,
          "color": "Blue"
        },
        "testnestedflatbuffer": [
          1,
          2,
          3
        ],
        "testempty": {
          "id": "id1",
          "val": 1,
          "count": 1
        },
        "testbool": true,
        "testhashs32_fnv1": 1,
        "testhashu32_fnv1": 1,
        "testhashs64_fnv1": 1,
        "testhashu64_fnv1": 1,
        "testhashs32_fnv1a": 1,
        "testhashu32_fnv1a": 1,
        "testhashs64_fnv1a": 1,
        "testhashu64_fnv1a": 1,
        "testarrayofbools": [
          true,
          false
        ],
        "testf": 1.0,
        "testf2": 2.0,
        "testf3": 3.0,
        "testarrayofsortedstruct": [
          {
            "id": 1,
            "distance": 1
          },
          {
            "id": 2,
            "distance": 2
          }
        ],
        "flex": [
          1,
          2,
          3
        ],
        "test5": [
          {
            "a": 1,
            "b": 2
          },
          {
            "a": 3,
            "b": 4
          }
        ],
        "vector_of_longs": [
          1,
          2,
          3
        ],
        "vector_of_doubles": [
          1.0,
          2.0,
          3.0
        ],
        "parent_namespace_test": {},
        "vector_of_referrables": [
          {
            "id": 1
          },
          {
            "id": 2
          }
        ],
        "single_weak_reference": 1,
        "vector_of_weak_references": [
          1,
          2
        ],
        "vector_of_strong_referrables": [
          {
            "id": 1
          },
          {
            "id": 2
          }
        ],
        "co_owning_reference": 1,
        "vector_of_co_owning_references": [
          1,
          2
        ],
        "non_owning_reference": 1,
        "vector_of_non_owning_references": [
          1,
          2
        ],
        "any_unique_type": "NONE",
        "any_unique": {
          "name": "Monster6",
          "friendly": true,
          "color": "Red"
        },
        "any_ambiguous_type": "NONE",
        "any_ambiguous": {
          "name": "Monster7",
          "friendly": false,
          "color": "Green"
        },
        "vector_of_enums": "Red",
        "signed_enum": "Human"
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "{\"name\":\"Monster2\",\"friendly\":false,\"color\":\"Green\",\"test_type\":\"TestSimpleTableWithEnum\",\"test\":{\"color\":\"Blue\"},\"extra_property\":\"extra_value\"} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{'name': 'Monster2', 'friendly': False, 'color': 'Green', 'test_type': 'TestSimpleTableWithEnum', 'test': {'color': 'Blue'}, 'extra_property': 'extra_value'} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema['properties']['test']:\n    {'anyOf': [{'$ref': '#/definitions/MyGame_Example_Monster'},\n               {'$ref': '#/definitions/MyGame_Example_TestSimpleTableWithEnum'},\n               {'$ref': '#/definitions/MyGame_Example2_Monster'}]}\n\nOn instance['test']:\n    {'name': 'Monster2',\n     'friendly': False,\n     'color': 'Green',\n     'test_type': 'TestSimpleTableWithEnum',\n     'test': {'color': 'Blue'},\n     'extra_property': 'extra_value'}",
      "data": {
        "name": "Monster1",
        "friendly": true,
        "color": "Red",
        "test_type": "Monster",
        "test": {
          "name": "Monster2",
          "friendly": false,
          "color": "Green",
          "test_type": "TestSimpleTableWithEnum",
          "test": {
            "color": "Blue"
          },
          "extra_property": "extra_value"
        },
        "test4": [
          {
            "a": 1,
            "b": 2
          },
          {
            "a": 3,
            "b": 4
          }
        ],
        "testarrayofstring": [
          "string1",
          "string2"
        ],
        "testarrayoftables": [
          {
            "name": "Monster3",
            "friendly": true,
            "color": "Red"
          },
          {
            "name": "Monster4",
            "friendly": false,
            "color": "Green"
          }
        ],
        "enemy": {
          "name": "Monster5",
          "friendly": true,
          "color": "Blue"
        },
        "testnestedflatbuffer": [
          1,
          2,
          3
        ],
        "testempty": {
          "id": "id1",
          "val": 1,
          "count": 1
        },
        "testbool": true,
        "testhashs32_fnv1": 1,
        "testhashu32_fnv1": 1,
        "testhashs64_fnv1": 1,
        "testhashu64_fnv1": 1,
        "testhashs32_fnv1a": 1,
        "testhashu32_fnv1a": 1,
        "testhashs64_fnv1a": 1,
        "testhashu64_fnv1a": 1,
        "testarrayofbools": [
          true,
          false
        ],
        "testf": 1.0,
        "testf2": 2.0,
        "testf3": 3.0,
        "testarrayofsortedstruct": [
          {
            "id": 1,
            "distance": 1
          },
          {
            "id": 2,
            "distance": 2
          }
        ],
        "flex": [
          1,
          2,
          3
        ],
        "test5": [
          {
            "a": 1,
            "b": 2
          },
          {
            "a": 3,
            "b": 4
          }
        ],
        "vector_of_longs": [
          1,
          2,
          3
        ],
        "vector_of_doubles": [
          1.0,
          2.0,
          3.0
        ],
        "parent_namespace_test": {},
        "vector_of_referrables": [
          {
            "id": 1
          },
          {
            "id": 2
          }
        ],
        "single_weak_reference": 1,
        "vector_of_weak_references": [
          1,
          2
        ],
        "vector_of_strong_referrables": [
          {
            "id": 1
          },
          {
            "id": 2
          }
        ],
        "co_owning_reference": 1,
        "vector_of_co_owning_references": [
          1,
          2
        ],
        "non_owning_reference": 1,
        "vector_of_non_owning_references": [
          1,
          2
        ],
        "any_unique_type": "NONE",
        "any_unique": {
          "name": "Monster6",
          "friendly": true,
          "color": "Red",
          "extra_property": "extra_value"
        },
        "any_ambiguous_type": "NONE",
        "any_ambiguous": {
          "name": "Monster7",
          "friendly": false,
          "color": "Green",
          "extra_property": "extra_value"
        },
        "vector_of_enums": "Red",
        "signed_enum": "Human"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"Yellow\" is not one of [\"Red\",\"Green\",\"Blue\"]",
      "python_error": "'Yellow' is not one of ['Red', 'Green', 'Blue']\n\nFailed validating 'enum' in schema['properties']['color']:\n    {'type': 'string', 'enum': ['Red', 'Green', 'Blue']}\n\nOn instance['color']:\n    'Yellow'",
      "data": {
        "name": "Monster1",
        "friendly": true,
        "color": "Yellow",
        "test_type": "Monster",
        "test": {
          "name": "Monster2",
          "friendly": false,
          "color": "Green",
          "test_type": "TestSimpleTableWithEnum",
          "test": {
            "color": "Blue"
          }
        },
        "test4": [
          {
            "a": 1,
            "b": 2
          },
          {
            "a": 3,
            "b": 4
          }
        ],
        "testarrayofstring": [
          "string1",
          "string2"
        ],
        "testarrayoftables": [
          {
            "name": "Monster3",
            "friendly": true,
            "color": "Red"
          },
          {
            "name": "Monster4",
            "friendly": false,
            "color": "Green"
          }
        ],
        "enemy": {
          "name": "Monster5",
          "friendly": true,
          "color": "Blue"
        },
        "testnestedflatbuffer": [
          1,
          2,
          3
        ],
        "testempty": {
          "id": "id1",
          "val": 1,
          "count": 1
        },
        "testbool": true,
        "testhashs32_fnv1": 1,
        "testhashu32_fnv1": 1,
        "testhashs64_fnv1": 1,
        "testhashu64_fnv1": 1,
        "testhashs32_fnv1a": 1,
        "testhashu32_fnv1a": 1,
        "testhashs64_fnv1a": 1,
        "testhashu64_fnv1a": 1,
        "testarrayofbools": [
          true,
          false
        ],
        "testf": 1.0,
        "testf2": 2.0,
        "testf3": 3.0,
        "testarrayofsortedstruct": [
          {
            "id": 1,
            "distance": 1
          },
          {
            "id": 2,
            "distance": 2
          }
        ],
        "flex": [
          1,
          2,
          3
        ],
        "test5": [
          {
            "a": 1,
            "b": 2
          },
          {
            "a": 3,
            "b": 4
          }
        ],
        "vector_of_longs": [
          1,
          2,
          3
        ],
        "vector_of_doubles": [
          1.0,
          2.0,
          3.0
        ],
        "parent_namespace_test": {},
        "vector_of_referrables": [
          {
            "id": 1
          },
          {
            "id": 2
          }
        ],
        "single_weak_reference": 1,
        "vector_of_weak_references": [
          1,
          2
        ],
        "vector_of_strong_referrables": [
          {
            "id": 1
          },
          {
            "id": 2
          }
        ],
        "co_owning_reference": 1,
        "vector_of_co_owning_references": [
          1,
          2
        ],
        "non_owning_reference": 1,
        "vector_of_non_owning_references": [
          1,
          2
        ],
        "any_unique_type": "NONE",
        "any_unique": {
          "name": "Monster6",
          "friendly": true,
          "color": "Red"
        },
        "any_ambiguous_type": "NONE",
        "any_ambiguous": {
          "name": "Monster7",
          "friendly": false,
          "color": "Green"
        },
        "vector_of_enums": "Red",
        "signed_enum": "Human"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "name": "Monster",
        "pos": {
          "x": 10.0,
          "y": 20.0,
          "z": 30.0,
          "test1": 40,
          "test2": "Red",
          "test3": {
            "a": 50,
            "b": 60
          }
        },
        "mana": 100,
        "hp": 200,
        "friendly": false,
        "inventory": [
          1,
          2,
          3
        ],
        "color": "Green",
        "test_type": "Monster",
        "test": {
          "name": "SubMonster",
          "pos": {
            "x": 10.0,
            "y": 20.0,
            "z": 30.0,
            "test1": 40,
            "test2": "Blue",
            "test3": {
              "a": 50,
              "b": 60
            }
          },
          "mana": 100,
          "hp": 200,
          "friendly": false,
          "inventory": [
            1,
            2,
            3
          ],
          "color": "Red",
          "test_type": "Monster",
          "test": {
            "color": "Green"
          },
          "test4": [
            {
              "a": 50,
              "b": 60
            },
            {
              "a": 70,
              "b": 80
            }
          ],
          "testarrayofstring": [
            "a",
            "b",
            "c"
          ],
          "testarrayoftables": [
            {
              "name": "SubMonster2",
              "pos": {
                "x": 10.0,
                "y": 20.0,
                "z": 30.0,
                "test1": 40,
                "test2": "Blue",
                "test3": {
                  "a": 50,
                  "b": 60
                }
              },
              "mana": 100,
              "hp": 200,
              "friendly": false,
              "inventory": [
                1,
                2,
                3
              ],
              "color": "Red",
              "test_type": "Monster"
            }
          ],
          "enemy": {
            "name": "Enemy",
            "pos": {
              "x": 10.0,
              "y": 20.0,
              "z": 30.0,
              "test1": 40,
              "test2": "Blue",
              "test3": {
                "a": 50,
                "b": 60
              }
            },
            "mana": 100,
            "hp": 200,
            "friendly": false,
            "inventory": [
              1,
              2,
              3
            ],
            "color": "Red",
            "test_type": "Monster"
          },
          "testnestedflatbuffer": [
            1,
            2,
            3
          ],
          "testempty": {
            "id": "empty",
            "val": 0,
            "count": 0
          },
          "testbool": true,
          "testhashs32_fnv1": 123,
          "testhashu32_fnv1": 456,
          "testhashs64_fnv1": 789,
          "testhashu64_fnv1": 1011,
          "testhashs32_fnv1a": 123,
          "testhashu32_fnv1a": 456,
          "testhashs64_fnv1a": 789,
          "testhashu64_fnv1a": 1011,
          "testarrayofbools": [
            true,
            false,
            true
          ],
          "testf": 1.0,
          "testf2": 2.0,
          "testf3": 3.0,
          "testarrayofstring2": [
            "a",
            "b",
            "c"
          ],
          "testarrayofsortedstruct": [
            {
              "id": 1,
              "distance": 10
            },
            {
              "id": 2,
              "distance": 20
            }
          ],
          "flex": [
            1,
            2,
            3
          ],
          "test5": [
            {
              "a": 50,
              "b": 60
            },
            {
              "a": 70,
              "b": 80
            }
          ],
          "vector_of_longs": [
            1,
            2,
            3
          ],
          "vector_of_doubles": [
            1.0,
            2.0,
            3.0
          ],
          "parent_namespace_test": {},
          "vector_of_referrables": [
            {
              "id": 1
            },
            {
              "id": 2
            }
          ],
          "single_weak_reference": 1,
          "vector_of_weak_references": [
            1,
            2,
            3
          ],
          "vector_of_strong_referrables": [
            {
              "id": 1
            },
            {
              "id": 2
            }
          ],
          "co_owning_reference": 1,
          "vector_of_co_owning_references": [
            1,
            2,
            3
          ],
          "non_owning_reference": 1,
          "vector_of_non_owning_references": [
            1,
            2,
            3
          ],
          "any_unique_type": "NONE",
          "any_unique": {
            "name": "SubMonster3",
            "pos": {
              "x": 10.0,
              "y": 20.0,
              "z": 30.0,
              "test1": 40,
              "test2": "Blue",
              "test3": {
                "a": 50,
                "b": 60
              }
            },
            "mana": 100,
            "hp": 200,
            "friendly": false,
            "inventory": [
              1,
              2,
              3
            ],
            "color": "Red",
            "test_type": "Monster"
          },
          "any_ambiguous_type": "NONE",
          "any_ambiguous": {
            "name": "SubMonster4",
            "pos": {
              "x": 10.0,
              "y": 20.0,
              "z": 30.0,
              "test1": 40,
              "test2": "Blue",
              "test3": {
                "a": 50,
                "b": 60
              }
            },
            "mana": 100,
            "hp": 200,
            "friendly": false,
            "inventory": [
              1,
              2,
              3
            ],
            "color": "Red",
            "test_type": "Monster"
          },
          "vector_of_enums": "Green",
          "signed_enum": "Human"
        },
        "test4": [
          {
            "a": 50,
            "b": 60
          },
          {
            "a": 70,
            "b": 80
          }
        ],
        "testarrayofstring": [
          "a",
          "b",
          "c"
        ],
        "testarrayoftables": [
          {
            "name": "SubMonster5",
            "pos": {
              "x": 10.0,
              "y": 20.0,
              "z": 30.0,
              "test1": 40,
              "test2": "Blue",
              "test3": {
                "a": 50,
                "b": 60
              }
            },
            "mana": 100,
            "hp": 200,
            "friendly": false,
            "inventory": [
              1,
              2,
              3
            ],
            "color": "Red",
            "test_type": "Monster"
          }
        ],
        "enemy": {
          "name": "Enemy2",
          "pos": {
            "x": 10.0,
            "y": 20.0,
            "z": 30.0,
            "test1": 40,
            "test2": "Blue",
            "test3": {
              "a": 50,
              "b": 60
            }
          },
          "mana": 100,
          "hp": 200,
          "friendly": false,
          "inventory": [
            1,
            2,
            3
          ],
          "color": "Red",
          "test_type": "Monster"
        },
        "testnestedflatbuffer": [
          1,
          2,
          3
        ],
        "testempty": {
          "id": "empty",
          "val": 0,
          "count": 0
        },
        "testbool": true,
        "testhashs32_fnv1": 123,
        "testhashu32_fnv1": 456,
        "testhashs64_fnv1": 789,
        "testhashu64_fnv1": 1011,
        "testhashs32_fnv1a": 123,
        "testhashu32_fnv1a": 456,
        "testhashs64_fnv1a": 789,
        "testhashu64_fnv1a": 1011,
        "testarrayofbools": [
          true,
          false,
          true
        ],
        "testf": 1.0,
        "testf2": 2.0,
        "testf3": 3.0,
        "testarrayofstring2": [
          "a",
          "b",
          "c"
        ],
        "testarrayofsortedstruct": [
          {
            "id": 1,
            "distance": 10
          },
          {
            "id": 2,
            "distance": 20
          }
        ],
        "flex": [
          1,
          2,
          3
        ],
        "test5": [
          {
            "a": 50,
            "b": 60
          },
          {
            "a": 70,
            "b": 80
          }
        ],
        "vector_of_longs": [
          1,
          2,
          3
        ],
        "vector_of_doubles": [
          1.0,
          2.0,
          3.0
        ],
        "parent_namespace_test": {},
        "vector_of_referrables": [
          {
            "id": 1
          },
          {
            "id": 2
          }
        ],
        "single_weak_reference": 1,
        "vector_of_weak_references": [
          1,
          2,
          3
        ],
        "vector_of_strong_referrables": [
          {
            "id": 1
          },
          {
            "id": 2
          }
        ],
        "co_owning_reference": 1,
        "vector_of_co_owning_references": [
          1,
          2,
          3
        ],
        "non_owning_reference": 1,
        "vector_of_non_owning_references": [
          1,
          2,
          3
        ],
        "any_unique_type": "NONE",
        "any_unique": {
          "name": "SubMonster6",
          "pos": {
            "x": 10.0,
            "y": 20.0,
            "z": 30.0,
            "test1": 40,
            "test2": "Blue",
            "test3": {
              "a": 50,
              "b": 60
            }
          },
          "mana": 100,
          "hp": 200,
          "friendly": false,
          "inventory": [
            1,
            2,
            3
          ],
          "color": "Red",
          "test_type": "Monster"
        },
        "any_ambiguous_type": "NONE",
        "any_ambiguous": {
          "name": "SubMonster7",
          "pos": {
            "x": 10.0,
            "y": 20.0,
            "z": 30.0,
            "test1": 40,
            "test2": "Blue",
            "test3": {
              "a": 50,
              "b": 60
            }
          },
          "mana": 100,
          "hp": 200,
          "friendly": false,
          "inventory": [
            1,
            2,
            3
          ],
          "color": "Red",
          "test_type": "Monster"
        },
        "vector_of_enums": "Green",
        "signed_enum": "Human"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"Yellow\" is not one of [\"Red\",\"Green\",\"Blue\"]",
      "python_error": "Additional properties are not allowed (\"<--- INVALID: 'MyGame_Example_AnyAmbiguousAliases' does not have a value 'abc'\", \"<--- INVALID: 'MyGame_Example_AnyUniqueAliases' does not have a value 'abc'\", \"<--- INVALID: 'MyGame_Example_Color' does not have a value 'abc'\", \"<--- INVALID: 'MyGame_Example_Race' does not have a value 'abc'\", '<--- SYNTAX ERROR: : is not a valid key-value separator in json' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'type': 'object',\n     'description': ' an example documentation comment: \"monster object\"',\n     'properties': {'pos': {'$ref': '#/definitions/MyGame_Example_Vec3'},\n                    'mana': {'type': 'number'},\n                    'hp': {'type': 'number'},\n                    'name': {'type': 'string'},\n                    'friendly': {'type': 'boolean'},\n                    'inventory': {'type': 'array',\n                                  'items': {'type': 'number'}},\n                    'color': {'$ref': '#/definitions/MyGame_Example_Col.. (14374 more)",
      "data": {
        "name": "Monster",
        "pos": {
          "x": 10.0,
          "y": 20.0,
          "z": 30.0,
          "test1": 40,
          "test2": "Yellow",
          "<--- INVALID: 'Yellow' is not in the enum list for 'MyGame_Example_Color'": "test3",
          "a": 50,
          "b": 60
        },
        "mana": 100,
        "hp": 200,
        "friendly": false,
        "inventory": [
          1,
          "a",
          "<--- INVALID: Inventory can only contain numbers",
          3
        ],
        "color": "Green",
        "test_type": "Monster",
        "test": {
          "name": "SubMonster",
          "pos": {
            "x": 10.0,
            "y": 20.0,
            "z": 30.0,
            "test1": 40,
            "test2": "Blue",
            "test3": {
              "a": 50,
              "b": 60
            }
          },
          "mana": 100,
          "hp": 200,
          "friendly": false,
          "inventory": [
            1,
            2,
            3
          ],
          "color": "Red",
          "test_type": "Monster",
          "testarrayofstring": [
            1,
            "<--- INVALID: 'testarrayofstring' can only contain strings",
            "b",
            "c"
          ]
        },
        "test4": [
          {
            "a": 50,
            "b": 60,
            "c": 70,
            "<--- INVALID: 'MyGame_Example_Test' does not have a property 'c'": "b",
            "<--- SYNTAX ERROR: : is not a valid key-value separator in json": 60
          },
          {
            "a": 70,
            "b": 80
          }
        ],
        "testarrayofstring": [
          "a",
          "b",
          3,
          "<--- INVALID: 'testarrayofstring' can only contain strings"
        ],
        "testarrayoftables": [
          {
            "name": "SubMonster2",
            "pos": {
              "x": 10.0,
              "y": 20.0,
              "z": 30.0,
              "test1": 40,
              "test2": "Blue",
              "test3": {
                "a": 50,
                "b": 60
              }
            },
            "mana": 100,
            "hp": 200,
            "friendly": true,
            "inventory": [
              1,
              2,
              3
            ],
            "color": "Red",
            "test_type": "Monster",
            "abc": 123,
            "<--- INVALID: 'MyGame_Example_Monster' does not have a property 'abc'": "xyz",
            "<--- SYNTAX ERROR: : is not a valid key-value separator in json": 123
          },
          {
            "name": "SubMonster3",
            "pos": {
              "x": 10.0,
              "y": 20.0,
              "z": 30.0,
              "test1": 40,
              "test2": "Blue",
              "test3": {
                "a": 50,
                "b": 60
              }
            },
            "mana": 100,
            "hp": 200,
            "friendly": false,
            "inventory": [
              1,
              2,
              3
            ],
            "color": "Red",
            "test_type": "Monster"
          }
        ],
        "enemy": {
          "name": "Enemy",
          "pos": {
            "x": 10.0,
            "y": 20.0,
            "z": 30.0,
            "test1": 40,
            "test2": "Blue",
            "test3": {
              "a": 50,
              "b": 60
            }
          },
          "mana": 100,
          "hp": 200,
          "friendly": false,
          "inventory": [
            1,
            2,
            3
          ],
          "color": "Red",
          "test_type": "Monster"
        },
        "testnestedflatbuffer": [
          1,
          "a",
          "<--- INVALID: 'testnestedflatbuffer' can only contain numbers",
          3
        ],
        "testempty": {
          "id": "empty",
          "val": 0,
          "count": 0
        },
        "testbool": true,
        "testhashs32_fnv1": 123,
        "testhashu32_fnv1": 456,
        "testhashs64_fnv1": 789,
        "testhashu64_fnv1": 1011,
        "testhashs32_fnv1a": 123,
        "testhashu32_fnv1a": 456,
        "testhashs64_fnv1a": 789,
        "testhashu64_fnv1a": 1011,
        "testarrayofbools": [
          true,
          "a",
          "<--- INVALID: 'testarrayofbools' can only contain booleans",
          true
        ],
        "testf": 1.0,
        "testf2": 2.0,
        "testf3": 3.0,
        "testarrayofstring2": [
          "a",
          "b",
          3,
          "<--- INVALID: 'testarrayofstring2' can only contain strings"
        ],
        "testarrayofsortedstruct": [
          {
            "id": 1,
            "distance": 10
          },
          {
            "id": 2,
            "distance": 20,
            "abc": 123,
            "<--- INVALID: 'MyGame_Example_Ability' does not have a property 'abc'": "xyz",
            "<--- SYNTAX ERROR: : is not a valid key-value separator in json": 123
          },
          {
            "id": 3,
            "distance": 30
          }
        ],
        "flex": [
          1,
          2,
          "a",
          "<--- INVALID: 'flex' can only contain numbers"
        ],
        "test5": [
          {
            "a": 50,
            "b": 60
          },
          {
            "a": 70,
            "b": 80,
            "c": 90,
            "<--- INVALID: 'MyGame_Example_Test' does not have a property 'c'": "d",
            "<--- SYNTAX ERROR: : is not a valid key-value separator in json": 90
          }
        ],
        "vector_of_longs": [
          1,
          2,
          3.0,
          "<--- INVALID: 'vector_of_longs' can only contain integers"
        ],
        "vector_of_doubles": [
          1.0,
          2.0,
          "a",
          "<--- INVALID: 'vector_of_doubles' can only contain numbers"
        ],
        "parent_namespace_test": {},
        "vector_of_referrables": [
          {
            "id": 1
          },
          {
            "id": 2,
            "abc": 123,
            "<--- INVALID: 'MyGame_Example_Referrable' does not have a property 'abc'": "xyz",
            "<--- SYNTAX ERROR: : is not a valid key-value separator in json": 123
          }
        ],
        "single_weak_reference": 1,
        "vector_of_weak_references": [
          1,
          2,
          "a",
          "<--- INVALID: 'vector_of_weak_references' can only contain numbers"
        ],
        "vector_of_strong_referrables": [
          {
            "id": 1
          },
          {
            "id": 2,
            "abc": 123,
            "<--- INVALID: 'MyGame_Example_Referrable' does not have a property 'abc'": "xyz",
            "<--- SYNTAX ERROR: : is not a valid key-value separator in json": 123
          }
        ],
        "co_owning_reference": 1,
        "vector_of_co_owning_references": [
          1,
          2,
          "a",
          "<--- INVALID: 'vector_of_co_owning_references' can only contain numbers"
        ],
        "non_owning_reference": 1,
        "vector_of_non_owning_references": [
          1,
          2,
          "a",
          "<--- INVALID: 'vector_of_non_owning_references' can only contain numbers"
        ],
        "any_unique_type": "abc",
        "<--- INVALID: 'MyGame_Example_AnyUniqueAliases' does not have a value 'abc'": "xyz",
        "<--- SYNTAX ERROR: : is not a valid key-value separator in json": "abc",
        "any_unique": {
          "name": "SubMonster6",
          "pos": {
            "x": 10.0,
            "y": 20.0,
            "z": 30.0,
            "test1": 40,
            "test2": "Blue",
            "test3": {
              "a": 50,
              "b": 60
            }
          },
          "mana": 100,
          "hp": 200,
          "friendly": false,
          "inventory": [
            1,
            2,
            3
          ],
          "color": "Red",
          "test_type": "Monster"
        },
        "any_ambiguous_type": "abc",
        "<--- INVALID: 'MyGame_Example_AnyAmbiguousAliases' does not have a value 'abc'": "xyz",
        "any_ambiguous": {
          "name": "SubMonster7",
          "pos": {
            "x": 10.0,
            "y": 20.0,
            "z": 30.0,
            "test1": 40,
            "test2": "Blue",
            "test3": {
              "a": 50,
              "b": 60
            }
          },
          "mana": 100,
          "hp": 200,
          "friendly": false,
          "inventory": [
            1,
            2,
            3
          ],
          "color": "Red",
          "test_type": "Monster"
        },
        "vector_of_enums": "abc",
        "<--- INVALID: 'MyGame_Example_Color' does not have a value 'abc'": "xyz",
        "signed_enum": "abc",
        "<--- INVALID: 'MyGame_Example_Race' does not have a value 'abc'": "xyz"
      }
    }
  ]
}