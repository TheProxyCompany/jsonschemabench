{
  "description": "sample Kubernetes/kb_687_Normalized.json",
  "meta": {
    "full_size": 3247,
    "stripped_size": 1028,
    "features": [
      "$ref",
      "additionalProperties",
      "additionalProperties:object",
      "items"
    ],
    "raw_features": [
      "definitions",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "definitions": {
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelector": {
        "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
        "properties": {
          "matchExpressions": {
            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
            "items": {
              "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelectorRequirement"
            },
            "type": "array"
          },
          "matchLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelectorRequirement": {
        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
        "properties": {
          "key": {
            "description": "key is the label key that the selector applies to.",
            "type": "string",
            "x-kubernetes-patch-merge-key": "key",
            "x-kubernetes-patch-strategy": "merge"
          },
          "operator": {
            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
            "type": "string"
          },
          "values": {
            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "key",
          "operator"
        ],
        "type": "object"
      }
    },
    "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
    "properties": {
      "labelSelector": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_apis_meta_v1_LabelSelector",
        "description": "A label query over a set of resources, in this case pods."
      },
      "namespaces": {
        "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
        "items": {
          "type": [
            "string",
            "null"
          ]
        },
        "type": [
          "array",
          "null"
        ]
      },
      "topologyKey": {
        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "required": [
      "topologyKey"
    ],
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "labelSelector": {
          "matchLabels": {
            "app": "my-app",
            "environment": "dev"
          },
          "matchExpressions ": [
            {
              "key": "tier",
              "operator": "In",
              "values": [
                "frontend",
                "backend"
              ]
            }
          ]
        },
        "namespaces": [
          "default",
          "dev"
        ],
        "topologyKey": "kubernetes.io/hostname"
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['labelSelector']['properties']['matchLabels']['additionalProperties']:\n    {'type': 'string'}\n\nOn instance['labelSelector']['matchLabels']['environment']:\n    123",
      "data": {
        "labelSelector": {
          "matchLabels": {
            "app": "my-app",
            "environment": 123,
            "extraProperty": "extraValue"
          },
          "matchExpressions": [
            {
              "key": "tier",
              "operator": "In",
              "values": [
                "frontend",
                "backend"
              ]
            }
          ]
        },
        "namespaces": [
          "default",
          "dev"
        ],
        "topologyKey": "kubernetes.io/hostname"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"null\", \"string\"",
      "python_error": "123 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['namespaces']['items']:\n    {'type': ['string', 'null']}\n\nOn instance['namespaces'][0]:\n    123",
      "data": {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "tier",
              "operator": "In",
              "values": [
                "frontend",
                "backend"
              ]
            }
          ],
          "matchLabels": {
            "app": "my-app",
            "environment": "dev"
          }
        },
        "namespaces": [
          123,
          "dev"
        ],
        "topologyKey": "kubernetes.io/hostname"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "True is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['topologyKey']:\n    {'description': 'This pod should be co-located (affinity) or not '\n                    'co-located (anti-affinity) with the pods matching the '\n                    'labelSelector in the specified namespaces, where '\n                    'co-located is defined as running on a node whose '\n                    'value of the label with key topologyKey matches that '\n                    'of any node on which any of the selected pods is '\n                    'running. Empty topologyKey is not allowed.',\n     'type': ['string', 'null']}\n\nOn instance['topologyKey']:\n    True",
      "data": {
        "labelSelector": {
          "matchLabels": {
            "app": "my-app",
            "environment": "dev"
          },
          "matchExpressions": [
            {
              "key": "tier",
              "operator": "In",
              "values": [
                "frontend",
                "backend",
                123
              ]
            }
          ]
        },
        "namespaces": [
          "default",
          "dev",
          123
        ],
        "topologyKey": true
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['labelSelector']['properties']['matchLabels']['additionalProperties']:\n    {'type': 'string'}\n\nOn instance['labelSelector']['matchLabels']['extra']:\n    123",
      "data": {
        "labelSelector": {
          "matchLabels": {
            "app": "my-app",
            "environment": "dev",
            "extra": 123
          },
          "matchExpressions": [
            {
              "key": "tier",
              "operator": "In",
              "values": [
                "frontend",
                "backend"
              ]
            }
          ]
        },
        "namespaces": [
          "default",
          "dev"
        ],
        "topologyKey": "kubernetes.io/hostname"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "app",
              "operator": "In",
              "values": [
                "web",
                "database"
              ]
            },
            {
              "key": "environment",
              "operator": "NotIn",
              "values": [
                "dev",
                "test"
              ]
            }
          ],
          "matchLabels": {
            "tier": "backend"
          }
        },
        "namespaces": [
          "default",
          "production"
        ],
        "topologyKey": "kubernetes.io/hostname"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "1 is not of types \"null\", \"string\"",
      "python_error": "1 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['namespaces']['items']:\n    {'type': ['string', 'null']}\n\nOn instance['namespaces'][0]:\n    1",
      "data": {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "app",
              "operator": "In",
              "values": [
                "web",
                "database"
              ]
            },
            {
              "key": "environment",
              "operator": "NotIn",
              "values": [
                "dev",
                "test"
              ]
            }
          ],
          "matchLabels": {
            "tier": "backend"
          }
        },
        "namespaces": [
          1,
          "production"
        ],
        "topologyKey": "kubernetes.io/hostname"
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['labelSelector']['properties']['matchLabels']['additionalProperties']:\n    {'type': 'string'}\n\nOn instance['labelSelector']['matchLabels']['extra']:\n    123",
      "data": {
        "labelSelector": {
          "matchExpressions": [
            {
              "key": "app",
              "operator": "In",
              "values": [
                "web",
                "database"
              ]
            },
            {
              "key": "environment",
              "operator": "NotIn",
              "values": [
                "dev",
                "test"
              ]
            }
          ],
          "matchLabels": {
            "tier": "backend",
            "extra": 123
          }
        },
        "namespaces": [
          "default",
          "production"
        ],
        "topologyKey": "kubernetes.io/hostname"
      }
    }
  ]
}