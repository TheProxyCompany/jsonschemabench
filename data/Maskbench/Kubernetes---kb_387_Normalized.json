{
  "description": "sample Kubernetes/kb_387_Normalized.json",
  "meta": {
    "full_size": 3582,
    "stripped_size": 1761,
    "features": [
      "$ref",
      "items",
      "oneOf"
    ],
    "raw_features": [
      "definitions",
      "properties",
      "required",
      "type",
      "type:array",
      "type:integer",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "definitions": {
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ExecAction": {
        "description": "ExecAction describes a \"run in container\" action.",
        "properties": {
          "command": {
            "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_HTTPGetAction": {
        "description": "HTTPGetAction describes an action based on HTTP Get requests.",
        "properties": {
          "host": {
            "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
            "type": "string"
          },
          "httpHeaders": {
            "description": "Custom headers to set in the request. HTTP allows repeated headers.",
            "items": {
              "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_HTTPHeader"
            },
            "type": "array"
          },
          "path": {
            "description": "Path to access on the HTTP server.",
            "type": "string"
          },
          "port": {
            "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_util_intstr_IntOrString",
            "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
          },
          "scheme": {
            "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
            "type": "string"
          }
        },
        "required": [
          "port"
        ],
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_HTTPHeader": {
        "description": "HTTPHeader describes a custom header to be used in HTTP probes",
        "properties": {
          "name": {
            "description": "The header field name",
            "type": "string"
          },
          "value": {
            "description": "The header field value",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_TCPSocketAction": {
        "description": "TCPSocketAction describes an action based on opening a socket",
        "properties": {
          "host": {
            "description": "Optional: Host name to connect to, defaults to the pod IP.",
            "type": "string"
          },
          "port": {
            "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_util_intstr_IntOrString",
            "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
          }
        },
        "required": [
          "port"
        ],
        "type": "object"
      },
      "https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_apimachinery_pkg_util_intstr_IntOrString": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ]
      }
    },
    "description": "Handler defines a specific action that should be taken",
    "properties": {
      "exec": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_ExecAction",
        "description": "One and only one of the following should be specified. Exec specifies the action to take."
      },
      "httpGet": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_HTTPGetAction",
        "description": "HTTPGet specifies the http request to perform."
      },
      "tcpSocket": {
        "$ref": "#/definitions/https:__kubernetesjsonschema_dev_master__defs_json_defs_io_k8s_api_core_v1_TCPSocketAction",
        "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported"
      }
    },
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "exec": {
          "command": [
            "/bin/sh",
            "-c",
            "echo Hello World!"
          ]
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "exec": {
          "command": [
            "/bin/sh",
            "-c",
            "echo 'Hello, World!'"
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "null is not of type \"string\"",
      "python_error": "None is not of type 'string'\n\nFailed validating 'type' in schema['properties']['exec']['properties']['command']['items']:\n    {'type': 'string'}\n\nOn instance['exec']['command'][2]:\n    None",
      "data": {
        "exec": {
          "command": [
            "/bin/sh",
            "-c",
            null,
            "echo 'Hello, World!'"
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "123 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['exec']['properties']['command']['items']:\n    {'type': 'string'}\n\nOn instance['exec']['command'][0]:\n    123",
      "data": {
        "exec": {
          "command": [
            123,
            "-c",
            "echo 'Hello, World!'"
          ]
        }
      }
    }
  ]
}