{
  "description": "sample Github_medium/o6213.json",
  "meta": {
    "full_size": 1067,
    "stripped_size": 1067,
    "features": [
      "@minmaxLength",
      "additionalProperties",
      "items",
      "pattern"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "maxLength",
      "minLength",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "description": {
        "type": "string",
        "maxLength": 32767
      },
      "enabled": {
        "type": "boolean"
      },
      "triggers": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "config": {
              "type": "object"
            },
            "meta": {
              "type": "object"
            },
            "outputIds": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false,
          "required": [
            "type"
          ]
        }
      },
      "nodes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "config": {
              "type": "object"
            },
            "meta": {
              "type": "object"
            },
            "outputIds": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false,
          "required": [
            "id",
            "type"
          ]
        }
      },
      "globals": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "pattern": "^[0-9a-zA-Z_-]{1,255}$"
            },
            "json": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": false,
          "required": [
            "key",
            "json"
          ]
        }
      }
    },
    "additionalProperties": false
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "name": "Example Workflow",
        "description": "This is an example workflow.",
        "enabled": true,
        "triggers": [
          {
            "type": "http",
            "config": {
              "method": "GET",
              "path": "/example"
            },
            "meta": {
              "description": "Example HTTP trigger"
            },
            "outputIds": [
              [
                "node1"
              ]
            ]
          }
        ],
        "nodes": [
          {
            "id": "node1",
            "type": "function",
            "config": {
              "code": "console.log('Hello World');"
            },
            "meta": {
              "description": "Example function node"
            },
            "outputIds": [
              [
                "node2"
              ]
            ]
          },
          {
            "id": "node2",
            "type": "http",
            "config": {
              "method": "POST",
              "path": "/example"
            },
            "meta": {
              "description": "Example HTTP node"
            },
            "outputIds": []
          }
        ],
        "globals": [
          {
            "key": "example-global",
            "json": "{\"key\":\"value\"}"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword or maxLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['name']:\n    {'type': 'string', 'minLength': 1, 'maxLength': 255}\n\nOn instance['name']:\n    ''",
      "data": {
        "name": "",
        "description": "This is an example workflow.",
        "enabled": true,
        "triggers": [
          {
            "type": "http",
            "config": {
              "method": "GET",
              "path": "/example"
            },
            "meta": {
              "description": "Example HTTP trigger"
            },
            "outputIds": [
              [
                "node1"
              ]
            ]
          }
        ],
        "nodes": [
          {
            "id": "node1",
            "type": "function",
            "config": {
              "code": "console.log('Hello World');"
            },
            "meta": {
              "description": "Example function node"
            },
            "outputIds": [
              [
                "node2"
              ]
            ]
          },
          {
            "id": "node2",
            "type": "http",
            "config": {
              "method": "POST",
              "path": "/example"
            },
            "meta": {
              "description": "Example HTTP node"
            },
            "outputIds": []
          }
        ],
        "globals": [
          {
            "key": "example-global",
            "json": ""
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"example-global!\" does not match \"^[0-9a-zA-Z_-]{1,255}$\"",
      "python_error": "'example-global!' does not match '^[0-9a-zA-Z_-]{1,255}$'\n\nFailed validating 'pattern' in schema['properties']['globals']['items']['properties']['key']:\n    {'type': 'string', 'pattern': '^[0-9a-zA-Z_-]{1,255}$'}\n\nOn instance['globals'][0]['key']:\n    'example-global!'",
      "data": {
        "name": "Example Workflow",
        "description": "This is an example workflow.",
        "enabled": true,
        "triggers": [
          {
            "type": "http",
            "config": {
              "method": "GET",
              "path": "/example"
            },
            "meta": {
              "description": "Example HTTP trigger"
            },
            "outputIds": [
              [
                "node1"
              ]
            ]
          }
        ],
        "nodes": [
          {
            "id": "node1",
            "type": "function",
            "config": {
              "code": "console.log('Hello World');"
            },
            "meta": {
              "description": "Example function node"
            },
            "outputIds": [
              [
                "node2"
              ]
            ]
          },
          {
            "id": "node2",
            "type": "http",
            "config": {
              "method": "POST",
              "path": "/example"
            },
            "meta": {
              "description": "Example HTTP node"
            },
            "outputIds": []
          }
        ],
        "globals": [
          {
            "key": "example-global!",
            "json": "{\"key\":\"value\"}"
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "name": "Example Workflow",
        "description": "This is an example workflow.",
        "enabled": true,
        "triggers": [
          {
            "type": "http",
            "config": {
              "method": "GET",
              "url": "https://example.com/api/endpoint"
            },
            "meta": {
              "description": "Trigger on HTTP request"
            },
            "outputIds": [
              [
                "node1"
              ]
            ]
          }
        ],
        "nodes": [
          {
            "id": "node1",
            "type": "function",
            "config": {
              "code": "console.log('Hello World');"
            },
            "meta": {
              "description": "Example function node"
            },
            "outputIds": [
              [
                "node2"
              ]
            ]
          },
          {
            "id": "node2",
            "type": "http",
            "config": {
              "method": "POST",
              "url": "https://example.com/api/endpoint"
            },
            "meta": {
              "description": "Send HTTP request"
            },
            "outputIds": []
          }
        ],
        "globals": [
          {
            "key": "example-global",
            "json": "{\"key\":\"value\"}"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"!@#$%^&*()_+-={}:<>?,./\" does not match \"^[0-9a-zA-Z_-]{1,255}$\"",
      "python_error": "'!@#$%^&*()_+-={}:<>?,./' does not match '^[0-9a-zA-Z_-]{1,255}$'\n\nFailed validating 'pattern' in schema['properties']['globals']['items']['properties']['key']:\n    {'type': 'string', 'pattern': '^[0-9a-zA-Z_-]{1,255}$'}\n\nOn instance['globals'][0]['key']:\n    '!@#$%^&*()_+-={}:<>?,./'",
      "data": {
        "name": "Example Workflow",
        "description": "This is an example workflow.",
        "enabled": true,
        "triggers": [
          {
            "type": "http",
            "config": {
              "method": "GET",
              "url": "https://example.com/api/endpoint"
            },
            "meta": {
              "description": "Trigger on HTTP request"
            },
            "outputIds": [
              [
                "node1"
              ]
            ]
          }
        ],
        "nodes": [
          {
            "id": "node1",
            "type": "function",
            "config": {
              "code": "console.log('Hello World');"
            },
            "meta": {
              "description": "Example function node"
            },
            "outputIds": [
              [
                "node2"
              ]
            ]
          },
          {
            "id": "node2",
            "type": "http",
            "config": {
              "method": "POST",
              "url": "https://example.com/api/endpoint"
            },
            "meta": {
              "description": "Send HTTP request"
            },
            "outputIds": []
          }
        ],
        "globals": [
          {
            "key": "!@#$%^&*()_+-={}:<>?,./",
            "json": "{\"key\":\"value\"}"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword or maxLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['name']:\n    {'type': 'string', 'minLength': 1, 'maxLength': 255}\n\nOn instance['name']:\n    ''",
      "data": {
        "name": "",
        "description": "This is an example workflow.",
        "enabled": true,
        "triggers": [
          {
            "type": "http",
            "config": {
              "method": "GET",
              "url": "https://example.com/api/endpoint"
            },
            "meta": {
              "description": "Trigger on HTTP request"
            },
            "outputIds": [
              [
                "node1"
              ]
            ]
          }
        ],
        "nodes": [
          {
            "id": "node1",
            "type": "function",
            "config": {
              "code": "console.log('Hello World');"
            },
            "meta": {
              "description": "Example function node"
            },
            "outputIds": [
              [
                "node2"
              ]
            ]
          },
          {
            "id": "node2",
            "type": "http",
            "config": {
              "method": "POST",
              "url": "https://example.com/api/endpoint"
            },
            "meta": {
              "description": "Send HTTP request"
            },
            "outputIds": []
          }
        ],
        "globals": [
          {
            "key": "example-global",
            "json": ""
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['name']:\n    {'type': 'string', 'minLength': 1, 'maxLength': 255}\n\nOn instance['name']:\n    ''",
      "data": {
        "name": "",
        "description": "This is an example workflow.",
        "enabled": true,
        "triggers": [
          {
            "type": "http",
            "config": {
              "method": "GET",
              "url": "https://example.com/api/endpoint"
            },
            "meta": {
              "description": "Trigger on HTTP request"
            },
            "outputIds": [
              [
                "node1"
              ]
            ]
          }
        ],
        "nodes": [
          {
            "id": "node1",
            "type": "function",
            "config": {
              "code": "console.log('Hello World');"
            },
            "meta": {
              "description": "Example function node"
            },
            "outputIds": [
              [
                "node2"
              ]
            ]
          },
          {
            "id": "node2",
            "type": "http",
            "config": {
              "method": "POST",
              "url": "https://example.com/api/endpoint"
            },
            "meta": {
              "description": "Send HTTP request"
            },
            "outputIds": []
          }
        ],
        "globals": [
          {
            "key": "example-global",
            "json": ""
          }
        ]
      }
    }
  ]
}