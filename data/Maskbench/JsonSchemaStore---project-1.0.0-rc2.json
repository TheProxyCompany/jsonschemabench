{
  "description": "sample JsonSchemaStore/project-1.0.0-rc2.json",
  "meta": {
    "full_size": 19739,
    "stripped_size": 8521,
    "features": [
      "$ref",
      "@minmaxInteger",
      "@minmaxLength",
      "additionalProperties",
      "additionalProperties:object",
      "allOf",
      "enum",
      "format",
      "format:uri",
      "items",
      "oneOf",
      "uniqueItems"
    ],
    "raw_features": [
      "$schema",
      "definitions",
      "id",
      "minLength",
      "minimum",
      "properties",
      "type",
      "type:[]",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
      "compilationOptions": {
        "description": "[Deprecated] Options that are passed to the compiler. Use 'buildOptions' instead.",
        "type": "object",
        "properties": {
          "define": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "nowarn": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "warningsAsErrors": {
            "type": "boolean",
            "default": false
          },
          "allowUnsafe": {
            "type": "boolean",
            "default": false
          },
          "emitEntryPoint": {
            "type": "boolean",
            "default": false
          },
          "optimize": {
            "type": "boolean",
            "default": false
          },
          "platform": {
            "type": "string",
            "enum": [
              "anycpu",
              "anycpu32bitpreferred",
              "ARM",
              "x86",
              "x64",
              "Itanium"
            ]
          },
          "languageVersion": {
            "type": "string",
            "enum": [
              "csharp1",
              "csharp2",
              "csharp3",
              "csharp4",
              "csharp5",
              "csharp6",
              "experimental"
            ]
          },
          "keyFile": {
            "type": "string"
          },
          "delaySign": {
            "type": "boolean",
            "default": false
          },
          "publicSign": {
            "type": "boolean",
            "default": false
          },
          "debugType": {
            "type": "string",
            "enum": [
              "portable",
              "full",
              "none"
            ]
          },
          "preserveCompilationContext": {
            "type": "boolean",
            "description": "Set this option to preserve reference assemblies and other context data to allow for runtime compilation"
          },
          "outputName": {
            "type": "string"
          }
        }
      },
      "buildOptions": {
        "description": "Options that are passed to the compiler.",
        "type": "object",
        "properties": {
          "define": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "nowarn": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "warningsAsErrors": {
            "type": "boolean",
            "default": false
          },
          "allowUnsafe": {
            "type": "boolean",
            "default": false
          },
          "emitEntryPoint": {
            "type": "boolean",
            "default": false
          },
          "optimize": {
            "type": "boolean",
            "default": false
          },
          "platform": {
            "type": "string",
            "enum": [
              "anycpu",
              "anycpu32bitpreferred",
              "ARM",
              "x86",
              "x64",
              "Itanium"
            ]
          },
          "languageVersion": {
            "type": "string",
            "enum": [
              "csharp1",
              "csharp2",
              "csharp3",
              "csharp4",
              "csharp5",
              "csharp6",
              "experimental"
            ]
          },
          "keyFile": {
            "type": "string"
          },
          "delaySign": {
            "type": "boolean",
            "default": false
          },
          "publicSign": {
            "type": "boolean",
            "default": false
          },
          "debugType": {
            "type": "string",
            "enum": [
              "portable",
              "full",
              "none"
            ]
          },
          "preserveCompilationContext": {
            "type": "boolean",
            "description": "Set this option to preserve reference assemblies and other context data to allow for runtime compilation."
          },
          "outputName": {
            "type": "string"
          },
          "compilerName": {
            "type": "string",
            "default": "csc"
          },
          "compile": {
            "description": "Defines glob patterns and file path to include for compilation.",
            "type": [
              "string",
              "array",
              "object"
            ],
            "items": {
              "type": "string"
            },
            "properties": {
              "include": {
                "type": [
                  "string",
                  "array"
                ],
                "items": {
                  "type": "string"
                },
                "description": "List of file globbing patterns to be included."
              },
              "exclude": {
                "type": [
                  "string",
                  "array"
                ],
                "items": {
                  "type": "string"
                },
                "description": "List of file globbing patterns to be excluded."
              },
              "includeFiles": {
                "type": [
                  "string",
                  "array"
                ],
                "items": {
                  "type": "string"
                },
                "description": "List of file paths to be included."
              },
              "excludeFiles": {
                "type": [
                  "string",
                  "array"
                ],
                "items": {
                  "type": "string"
                },
                "description": "List of file paths to be excluded."
              },
              "builtIns": {
                "type": [
                  "string",
                  "array",
                  "object"
                ],
                "items": {
                  "type": "string"
                },
                "properties": {
                  "include": {
                    "type": [
                      "string",
                      "array"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "description": "List of file globbing patterns to be included."
                  },
                  "exclude": {
                    "type": [
                      "string",
                      "array"
                    ],
                    "items": {
                      "type": "string"
                    },
                    "description": "List of file globbing patterns to be included."
                  }
                }
              },
              "mappings": {
                "type": "object",
                "description": "Pairs of destination folders and glob patterns specifying additional files to include/exclude."
              }
            }
          },
          "embed": {
            "allOf": [
              {
                "$ref": "#/definitions/buildOptions/properties/compile"
              },
              {
                "description": "Defines glob patterns and file paths of resource files to include for compilation."
              }
            ]
          },
          "copyToOutput": {
            "allOf": [
              {
                "$ref": "#/definitions/buildOptions/properties/compile"
              },
              {
                "description": "Defines glob patterns and file paths to include for copying to build output."
              }
            ]
          },
          "xmlDoc": {
            "type": "boolean"
          },
          "additionalArguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "runtimeOptions": {
        "type": "object",
        "properties": {
          "configProperties": {
            "type": "object",
            "properties": {
              "System.GC.Server": {
                "type": "boolean",
                "description": "Enables/disables server garbage collection.",
                "default": false
              },
              "System.GC.Concurrent": {
                "type": "boolean",
                "description": "Enables/disables concurrent garbage collection.",
                "default": true
              },
              "System.GC.HeapCount": {
                "type": "integer",
                "minimum": 0,
                "description": "Limits the number of heaps created by the garbage collector."
              },
              "System.GC.HeapAffinitizeMask": {
                "type": "integer",
                "minimum": 0,
                "description": "Specifies the exact processors that garbage collector threads should use."
              },
              "System.GC.GCHeapAffinitizeRanges": {
                "type": "string",
                "minLength": 1,
                "description": "Specifies the list of processors to use for garbage collector threads."
              },
              "System.GC.NoAffinitize": {
                "type": "boolean",
                "description": "Specifies whether to affinitize garbage collection threads with processors. To affinitize a GC thread means that it can only run on its specific CPU. A heap is created for each GC thread.",
                "default": false
              },
              "System.GC.HeapHardLimit": {
                "type": "string",
                "description": "Specifies the maximum commit size, in bytes, for the GC heap and GC bookkeeping."
              },
              "System.GC.HeapHardLimitPercent": {
                "type": "number",
                "description": "Specifies the GC heap usage as a percentage of the total memory."
              },
              "System.GC.RetainVM": {
                "type": "boolean",
                "description": "Configures whether segments that should be deleted are put on a standby list for future use or are released back to the operating system (OS).",
                "default": false
              },
              "System.GC.LOHThreshold": {
                "type": "integer",
                "description": "Specifies the threshold size, in bytes, that causes objects to go on the large object heap (LOH).",
                "default": 85000
              },
              "System.Threading.ThreadPool.MinThreads": {
                "type": "integer",
                "minimum": 1,
                "description": "Sets the minimum number of threads for the thread pool."
              },
              "System.Threading.ThreadPool.MaxThreads": {
                "type": "integer",
                "minimum": 1,
                "description": "Sets the maximum number of threads for the thread pool."
              }
            }
          }
        }
      },
      "packOptions": {
        "description": "Defines options pertaining to the packaging of the project output into a NuGet package.",
        "type": "object",
        "properties": {
          "summary": {
            "description": "A short description of the package.",
            "type": "string"
          },
          "tags": {
            "description": "A space-delimited list of tags and keywords that describe the package.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "owners": {
            "description": "List of owners of the package.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "releaseNotes": {
            "description": "A description of the changes made in each release of the package.",
            "type": "string"
          },
          "iconUrl": {
            "description": "A URL for the image to use as the icon for the package. This should be a 32x32-pixel .png file that has a transparent background.",
            "type": "string"
          },
          "licenseUrl": {
            "description": "A link to the license for the package.",
            "type": "string"
          },
          "requireLicenseAcceptance": {
            "description": "A Boolean value that specifies whether the client needs to ensure that the package license (described by licenseUrl) is accepted before the package is installed.",
            "type": "boolean",
            "default": false
          },
          "repository": {
            "type": "object",
            "description": "Contains information about the repository where the project is stored.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "git"
                ],
                "default": "git"
              },
              "url": {
                "type": "string",
                "format": "uri"
              }
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "files": {
            "allOf": [
              {
                "$ref": "#/definitions/buildOptions/properties/compile"
              },
              {
                "description": "Defines glob patterns and file paths to include in the generated NuGet package."
              }
            ]
          }
        }
      },
      "publishOptions": {
        "allOf": [
          {
            "$ref": "#/definitions/buildOptions/properties/compile"
          },
          {
            "description": "Defines glob patterns and file paths to include in publish output."
          }
        ]
      },
      "configType": {
        "type": "object",
        "properties": {
          "dependencies": {
            "$ref": "#/definitions/dependencies"
          },
          "compilationOptions": {
            "$ref": "#/definitions/compilationOptions"
          },
          "buildOptions": {
            "$ref": "#/definitions/buildOptions"
          },
          "frameworkAssemblies": {
            "$ref": "#/definitions/dependencies"
          },
          "imports": {
            "type": [
              "string",
              "array"
            ],
            "description": "Allow packages supporting these frameworks to be installed in this target, regardless of the compatibility rules.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "libraryIncludeFlag": {
        "type": "string",
        "enum": [
          "all",
          "runtime",
          "compile",
          "build",
          "contentFiles",
          "native",
          "analyzers",
          "none"
        ]
      },
      "libraryIncludeFlags": {
        "oneOf": [
          {
            "$ref": "#/definitions/libraryIncludeFlag"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/libraryIncludeFlag"
            }
          }
        ]
      },
      "dependencies": {
        "type": "object",
        "additionalProperties": {
          "type": [
            "string",
            "object"
          ],
          "properties": {
            "version": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "default": "default",
              "enum": [
                "default",
                "build",
                "platform"
              ]
            },
            "target": {
              "type": "string",
              "description": "Restrict this dependency to matching only a Project or a Package.",
              "enum": [
                "project",
                "package"
              ]
            },
            "include": {
              "$ref": "#/definitions/libraryIncludeFlags"
            },
            "exclude": {
              "$ref": "#/definitions/libraryIncludeFlags"
            },
            "suppressParent": {
              "$ref": "#/definitions/libraryIncludeFlags"
            }
          }
        },
        "description": "Each dependency is defined by a name and a version. Dependencies are resolved from NuGet feeds defined by your package sources and projects located in the directories specified by the 'global.json' file."
      },
      "script": {
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        },
        "description": "A command line script or scripts.\r\rAvailable variables:\r%project:Directory% - The project directory\r%project:Name% - The project name\r%project:Version% - The project version"
      }
    },
    "id": "https://json.schemastore.org/project-1.0.0-rc2.json",
    "properties": {
      "authors": {
        "description": "The author of the application.",
        "type": "array",
        "uniqueItems": true,
        "items": {
          "type": "string"
        }
      },
      "packInclude": {
        "description": "[Deprecated] Pairs of destination folders and glob patterns specifying additional files to include in the output NuGet package. (data type: JSON map). Example: { \"tools/\": \"tools/**/*.*\" }. Use 'files' in 'packOptions' instead.",
        "type": "object"
      },
      "publishExclude": {
        "description": "[Deprecated] Glob pattern to specify files to exclude from publish output. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'publishOptions' instead.",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        },
        "default": [
          "obj/**/*.*",
          "bin/**/*.*",
          "**/.*/**"
        ]
      },
      "compile": {
        "description": "[Deprecated] Glob pattern to specify files to compile. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'compile' in 'buildOptions' instead.",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        },
        "default": "**/*.cs"
      },
      "compileExclude": {
        "description": "[Deprecated] Glob pattern to specify files to exclude from compilation. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'compile' in 'buildOptions' instead.",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        }
      },
      "compileFiles": {
        "description": "[Deprecated] Files to include in compilation (overrides 'compileExclude'). (data type: string or array). Example: [ \"Folder1/File1.ext\", \"Folder2/File2.ext\" ]. Use 'compile' in 'buildOptions' instead.",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        }
      },
      "content": {
        "description": "[Deprecated] Glob pattern to specify files to include as content. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'publishOptions' to publish or 'copyToOutput' in 'buildOptions' to copy to build output instead.",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        },
        "default": "**/*"
      },
      "contentExclude": {
        "description": "[Deprecated] Glob pattern to specify files to exclude from the content list. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'publishOptions' to publish or 'copyToOutput' in 'buildOptions' to copy to build output instead.",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        }
      },
      "contentFiles": {
        "description": "[Deprecated] Files to include as content (overrides 'contentExclude'). (data type: string or array). Example: [ \"Folder1/File1.ext\", \"Folder2/File2.ext\" ]. Use 'publishOptions' to publish or 'copyToOutput' in 'buildOptions' to copy to build output instead.",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        }
      },
      "preprocess": {
        "description": "Glob pattern to specify files to use for preprocessing. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        },
        "default": "compiler/preprocess/**/*.cs"
      },
      "preprocessExclude": {
        "description": "Glob pattern to specify files to exclude from use for preprocessing. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        }
      },
      "preprocessFiles": {
        "description": "Files to include to use for preprocessing (overrides 'preprocessExclude'). (data type: string or array). Example: [ \"Folder1/File1.ext\", \"Folder2/File2.ext\" ]",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        }
      },
      "resource": {
        "description": "[Deprecated] Glob pattern to specify files to include as resources. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'embed' in 'buildOptions' instead.",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        },
        "default": [
          "compiler/resources/**/*",
          "**/*.resx"
        ]
      },
      "resourceExclude": {
        "description": "[Deprecated] Glob pattern to specify files to exclude from the resources list. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'embed' in 'buildOptions' instead.",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        }
      },
      "resourceFiles": {
        "description": "[Deprecated] Files to include as resources (overrides 'resourceExclude'). (data type: string or array). Example: [ \"Folder1/File1.ext\", \"Folder2/File2.ext\" ]. Use 'embed' in 'buildOptions' instead.",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        }
      },
      "shared": {
        "description": "Glob pattern to specify files to share with dependent projects. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        },
        "default": "compiler/shared/**/*.cs"
      },
      "sharedExclude": {
        "description": "Glob pattern to specify files to exclude from sharing with dependent projects. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        }
      },
      "sharedFiles": {
        "description": "Files to include for sharing with dependent projects (overrides 'sharedExclude'). (data type: string or array). Example: [ \"Folder1/File1.ext\", \"Folder2/File2.ext\" ]",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        }
      },
      "exclude": {
        "description": "[Deprecated] Glob pattern to indicate files to exclude from other glob patterns, in addition to the default patterns specified in 'excludeBuiltIn'. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'exclude' within 'compile' or 'embed' instead.",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        }
      },
      "excludeBuiltIn": {
        "description": "[Deprecated] Default glob pattern to indicate files to exclude from other glob patterns. (data type: string or array with glob pattern(s)). Example: [ \"Folder1/*.ext\", \"Folder2/*.ext\" ]. Use 'exclude' within 'compile' or 'embed' instead.",
        "type": [
          "string",
          "array"
        ],
        "items": {
          "type": "string"
        },
        "default": [
          "bin/**",
          "obj/**",
          "**/*.xproj"
        ]
      },
      "testRunner": {
        "description": "The name of the test runner to use with this project",
        "type": "string"
      },
      "commands": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "compilationOptions": {
        "$ref": "#/definitions/compilationOptions"
      },
      "buildOptions": {
        "$ref": "#/definitions/buildOptions"
      },
      "packOptions": {
        "$ref": "#/definitions/packOptions"
      },
      "runtimeOptions": {
        "$ref": "#/definitions/runtimeOptions"
      },
      "publishOptions": {
        "$ref": "#/definitions/publishOptions"
      },
      "configurations": {
        "type": "object",
        "description": "Configurations are named groups of compilation settings. There are two defaults built into the runtime: 'Debug' and 'Release'.",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "compilationOptions": {
              "$ref": "#/definitions/compilationOptions"
            },
            "buildOptions": {
              "$ref": "#/definitions/buildOptions"
            }
          }
        }
      },
      "dependencies": {
        "$ref": "#/definitions/dependencies"
      },
      "copyright": {
        "description": "Copyright details for the package.",
        "type": "string"
      },
      "iconUrl": {
        "description": "[Deprecated] A URL for the image to use as the icon for the package. This should be a 32x32-pixel .png file that has a transparent background. Use this in 'packOptions' instead.",
        "type": "string"
      },
      "licenseUrl": {
        "description": "[Deprecated] A link to the license for the package. Use this in 'packOptions' instead.",
        "type": "string"
      },
      "requireLicenseAcceptance": {
        "description": "[Deprecated] A Boolean value that specifies whether the client needs to ensure that the package license (described by licenseUrl) is accepted before the package is installed. Use this in 'packOptions' instead.",
        "type": "boolean",
        "default": false
      },
      "owners": {
        "description": "[Deprecated] List of owners of the package. Use this in 'packOptions' instead.",
        "type": "array",
        "uniqueItems": true,
        "items": {
          "type": "string"
        }
      },
      "projectUrl": {
        "description": "A URL for the home page of the package.",
        "type": "string"
      },
      "summary": {
        "description": "[Deprecated] A short description of the package. Use this in 'packOptions' instead.",
        "type": "string"
      },
      "tags": {
        "description": "[Deprecated] A space-delimited list of tags and keywords that describe the package. Use this in 'packOptions' instead.",
        "type": "array",
        "uniqueItems": true,
        "items": {
          "type": "string"
        }
      },
      "title": {
        "description": "The human-friendly title of the package",
        "type": "string"
      },
      "releaseNotes": {
        "description": "[Deprecated] A description of the changes made in each release of the package. Use this in 'packOptions' instead.",
        "type": "string"
      },
      "language": {
        "description": "The locale ID for the package, such as en-us.",
        "type": "string"
      },
      "description": {
        "description": "The description of the project/package.",
        "type": "string"
      },
      "frameworks": {
        "description": "Target frameworks that will be built, and dependencies that are specific to the build of this project for that framework.",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/definitions/configType"
        }
      },
      "namedResource": {
        "type": "object",
        "description": "Overrides the generated resource names with custom ones.",
        "additionalProperties": {
          "type": "string"
        }
      },
      "repository": {
        "type": "object",
        "description": "[Deprecated] Contains information about the repository where the project is stored. Use this in 'packOptions' instead.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "git"
            ],
            "default": "git"
          },
          "url": {
            "type": "string",
            "format": "uri"
          }
        },
        "additionalProperties": {
          "type": "string"
        }
      },
      "scripts": {
        "type": "object",
        "description": "Scripts to execute during the various stages.",
        "properties": {
          "precompile": {
            "$ref": "#/definitions/script"
          },
          "postcompile": {
            "$ref": "#/definitions/script"
          },
          "prepack": {
            "$ref": "#/definitions/script"
          },
          "postpack": {
            "$ref": "#/definitions/script"
          },
          "prepublish": {
            "$ref": "#/definitions/script"
          },
          "postpublish": {
            "$ref": "#/definitions/script"
          },
          "prerestore": {
            "$ref": "#/definitions/script"
          },
          "postrestore": {
            "$ref": "#/definitions/script"
          },
          "prepare": {
            "$ref": "#/definitions/script"
          }
        }
      },
      "version": {
        "description": "The version of the project/package. Examples: 1.2.3, 1.2.3-beta, 1.2.3-*",
        "type": "string"
      },
      "tools": {
        "description": "Project-specific command line tools accessible when in the project.json directory.",
        "type": "object",
        "additionalProperties": {
          "type": [
            "string",
            "object"
          ],
          "properties": {
            "version": {
              "type": "string"
            }
          }
        }
      },
      "runtimes": {
        "description": "List of runtime identifiers supported by this project (used when building standalone applications).",
        "type": "object"
      }
    },
    "title": "JSON schema for .NET Core project.json files",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "version": "1.0.0",
        "title": "My Project",
        "description": "This is my project.",
        "authors": [
          "John Doe"
        ],
        "copyright": "Copyright 2023 John Doe",
        "language": "en-us",
        "projectUrl": "https://example.com",
        "compilationOptions": {
          "define": [
            "DEBUG",
            "TRACE"
          ],
          "nowarn": [
            "CS0168",
            "CS0219"
          ],
          "warningsAsErrors": true,
          "allowUnsafe": false,
          "emitEntryPoint": true,
          "optimize": true,
          "platform": "anycpu",
          "languageVersion": "csharp6",
          "keyFile": "mykey.snk",
          "delaySign": false,
          "publicSign": false,
          "debugType": "full",
          "preserveCompilationContext": false,
          "outputName": "MyProject"
        },
        "buildOptions": {
          "define": [
            "DEBUG",
            "TRACE"
          ],
          "nowarn": [
            "CS0168",
            "CS0219"
          ],
          "warningsAsErrors": true,
          "allowUnsafe": false,
          "emitEntryPoint": true,
          "optimize": true,
          "platform": "anycpu",
          "languageVersion": "csharp6",
          "keyFile": "mykey.snk",
          "delaySign": false,
          "publicSign": false,
          "debugType": "full",
          "preserveCompilationContext": false,
          "outputName": "MyProject",
          "compilerName": "csc",
          "compile": {
            "include": [
              "**/*.cs"
            ],
            "exclude": [
              "**/*.csproj"
            ],
            "includeFiles": [
              "MyFile.cs"
            ],
            "excludeFiles": [
              "MyOtherFile.cs"
            ],
            "builtIns": {
              "include": [
                "**/*.cs"
              ],
              "exclude": [
                "**/*.csproj"
              ]
            },
            "mappings": {
              "tools/": "tools/**/*.*"
            }
          },
          "embed": {
            "include": [
              "**/*.resx"
            ],
            "exclude": [
              "**/*.csproj"
            ],
            "includeFiles": [
              "MyResource.resx"
            ],
            "excludeFiles": [
              "MyOtherResource.resx"
            ],
            "builtIns": {
              "include": [
                "**/*.resx"
              ],
              "exclude": [
                "**/*.csproj"
              ]
            },
            "mappings": {
              "tools/": "tools/**/*.*"
            }
          },
          "copyToOutput": {
            "include": [
              "**/*.txt"
            ],
            "exclude": [
              "**/*.csproj"
            ],
            "includeFiles": [
              "MyFile.txt"
            ],
            "excludeFiles": [
              "MyOtherFile.txt"
            ],
            "builtIns": {
              "include": [
                "**/*.txt"
              ],
              "exclude": [
                "**/*.csproj"
              ]
            },
            "mappings": {
              "tools/": "tools/**/*.*"
            }
          },
          "xmlDoc": true,
          "additionalArguments": [
            "-arg1",
            "-arg2"
          ]
        },
        "packOptions": {
          "summary": "This is my project.",
          "tags": [
            "tag1",
            "tag2"
          ],
          "owners": [
            "John Doe"
          ],
          "releaseNotes": "Release notes for my project.",
          "iconUrl": "https://example.com/icon.png",
          "licenseUrl": "https://example.com/license",
          "requireLicenseAcceptance": true,
          "repository": {
            "type": "git",
            "url": "https://example.com/repo"
          },
          "files": {
            "include": [
              "**/*.cs"
            ],
            "exclude": [
              "**/*.csproj"
            ],
            "includeFiles": [
              "MyFile.cs"
            ],
            "excludeFiles": [
              "MyOtherFile.cs"
            ],
            "builtIns": {
              "include": [
                "**/*.cs"
              ],
              "exclude": [
                "**/*.csproj"
              ]
            },
            "mappings": {
              "tools/": "tools/**/*.*"
            }
          }
        },
        "publishOptions": {
          "include": [
            "**/*.cs"
          ],
          "exclude": [
            "**/*.csproj"
          ],
          "includeFiles": [
            "MyFile.cs"
          ],
          "excludeFiles": [
            "MyOtherFile.cs"
          ],
          "builtIns": {
            "include": [
              "**/*.cs"
            ],
            "exclude": [
              "**/*.csproj"
            ]
          },
          "mappings": {
            "tools/": "tools/**/*.*"
          }
        },
        "runtimeOptions": {
          "configProperties": {
            "System.GC.Server": true,
            "System.GC.Concurrent": true,
            "System.GC.HeapCount": 2,
            "System.GC.HeapAffinitizeMask": 1,
            "System.GC.GCHeapAffinitizeRanges": "1-2",
            "System.GC.NoAffinitize": false,
            "System.GC.HeapHardLimit": "100MB",
            "System.GC.HeapHardLimitPercent": 50,
            "System.GC.RetainVM": true,
            "System.GC.LOHThreshold": 100000,
            "System.Threading.ThreadPool.MinThreads": 2,
            "System.Threading.ThreadPool.MaxThreads": 10
          }
        },
        "configurations": {
          "Debug": {
            "compilationOptions": {
              "define": [
                "DEBUG",
                "TRACE"
              ],
              "nowarn": [
                "CS0168",
                "CS0219"
              ],
              "warningsAsErrors": true,
              "allowUnsafe": false,
              "emitEntryPoint": true,
              "optimize": true,
              "platform": "anycpu",
              "languageVersion": "csharp6",
              "keyFile": "mykey.snk",
              "delaySign": false,
              "publicSign": false,
              "debugType": "full",
              "preserveCompilationContext": false,
              "outputName": "MyProject"
            },
            "buildOptions": {
              "define": [
                "DEBUG",
                "TRACE"
              ],
              "nowarn": [
                "CS0168",
                "CS0219"
              ],
              "warningsAsErrors": true,
              "allowUnsafe": false,
              "emitEntryPoint": true,
              "optimize": true,
              "platform": "anycpu",
              "languageVersion": "csharp6",
              "keyFile": "mykey.snk",
              "delaySign": false,
              "publicSign": false,
              "debugType": "full",
              "preserveCompilationContext": false,
              "outputName": "MyProject",
              "compilerName": "csc",
              "compile": {
                "include": [
                  "**/*.cs"
                ],
                "exclude": [
                  "**/*.csproj"
                ],
                "includeFiles": [
                  "MyFile.cs"
                ],
                "excludeFiles": [
                  "MyOtherFile.cs"
                ],
                "builtIns": {
                  "include": [
                    "**/*.cs"
                  ],
                  "exclude": [
                    "**/*.csproj"
                  ]
                },
                "mappings": {
                  "tools/": "tools/**/*.*"
                }
              },
              "embed": {
                "include": [
                  "**/*.resx"
                ],
                "exclude": [
                  "**/*.csproj"
                ],
                "includeFiles": [
                  "MyResource.resx"
                ],
                "excludeFiles": [
                  "MyOtherResource.resx"
                ],
                "builtIns": {
                  "include": [
                    "**/*.resx"
                  ],
                  "exclude": [
                    "**/*.csproj"
                  ]
                },
                "mappings": {
                  "tools/": "tools/**/*.*"
                }
              },
              "copyToOutput": {
                "include": [
                  "**/*.txt"
                ],
                "exclude": [
                  "**/*.csproj"
                ],
                "includeFiles": [
                  "MyFile.txt"
                ],
                "excludeFiles": [
                  "MyOtherFile.txt"
                ],
                "builtIns": {
                  "include": [
                    "**/*.txt"
                  ],
                  "exclude": [
                    "**/*.csproj"
                  ]
                },
                "mappings": {
                  "tools/": "tools/**/*.*"
                }
              },
              "xmlDoc": true,
              "additionalArguments": [
                "-arg1",
                "-arg2"
              ]
            }
          },
          "Release": {
            "compilationOptions": {
              "define": [
                "RELEASE",
                "TRACE"
              ],
              "nowarn": [
                "CS0168",
                "CS0219"
              ],
              "warningsAsErrors": true,
              "allowUnsafe": false,
              "emitEntryPoint": true,
              "optimize": true,
              "platform": "anycpu",
              "languageVersion": "csharp6",
              "keyFile": "mykey.snk",
              "delaySign": false,
              "publicSign": false,
              "debugType": "none",
              "preserveCompilationContext": false,
              "outputName": "MyProject"
            },
            "buildOptions": {
              "define": [
                "RELEASE",
                "TRACE"
              ],
              "nowarn": [
                "CS0168",
                "CS0219"
              ],
              "warningsAsErrors": true,
              "allowUnsafe": false,
              "emitEntryPoint": true,
              "optimize": true,
              "platform": "anycpu",
              "languageVersion": "csharp6",
              "keyFile": "mykey.snk",
              "delaySign": false,
              "publicSign": false,
              "debugType": "none",
              "preserveCompilationContext": false,
              "outputName": "MyProject",
              "compilerName": "csc",
              "compile": {
                "include": [
                  "**/*.cs"
                ],
                "exclude": [
                  "**/*.csproj"
                ],
                "includeFiles": [
                  "MyFile.cs"
                ],
                "excludeFiles": [
                  "MyOtherFile.cs"
                ],
                "builtIns": {
                  "include": [
                    "**/*.cs"
                  ],
                  "exclude": [
                    "**/*.csproj"
                  ]
                },
                "mappings": {
                  "tools/": "tools/**/*.*"
                }
              },
              "embed": {
                "include": [
                  "**/*.resx"
                ],
                "exclude": [
                  "**/*.csproj"
                ],
                "includeFiles": [
                  "MyResource.resx"
                ],
                "excludeFiles": [
                  "MyOtherResource.resx"
                ],
                "builtIns": {
                  "include": [
                    "**/*.resx"
                  ],
                  "exclude": [
                    "**/*.csproj"
                  ]
                },
                "mappings": {
                  "tools/": "tools/**/*.*"
                }
              },
              "copyToOutput": {
                "include": [
                  "**/*.txt"
                ],
                "exclude": [
                  "**/*.csproj"
                ],
                "includeFiles": [
                  "MyFile.txt"
                ],
                "excludeFiles": [
                  "MyOtherFile.txt"
                ],
                "builtIns": {
                  "include": [
                    "**/*.txt"
                  ],
                  "exclude": [
                    "**/*.csproj"
                  ]
                },
                "mappings": {
                  "tools/": "tools/**/*.*"
                }
              },
              "xmlDoc": true,
              "additionalArguments": [
                "-arg1",
                "-arg2"
              ]
            }
          }
        },
        "dependencies": {
          "System": "4.0.0",
          "System.Core": "4.0.0",
          "System.Data": "4.0.0",
          "System.Xml": "4.0.0",
          "System.Xml.Linq": "4.0.0",
          "System.ComponentModel.DataAnnotations": "4.0.0"
        },
        "frameworks": {
          "netcoreapp1.0": {
            "dependencies": {
              "System": "4.0.0",
              "System.Core": "4.0.0",
              "System.Data": "4.0.0",
              "System.Xml": "4.0.0",
              "System.Xml.Linq": "4.0.0",
              "System.ComponentModel.DataAnnotations": "4.0.0"
            }
          }
        },
        "runtimes": {
          "win10-x64": {},
          "osx.10.11-x64": {},
          "ubuntu.16.04-x64": {}
        },
        "scripts": {
          "precompile": [
            "echo Precompiling..."
          ],
          "postcompile": [
            "echo Postcompiling..."
          ],
          "prepack": [
            "echo Prepacking..."
          ],
          "postpack": [
            "echo Postpacking..."
          ],
          "prepublish": [
            "echo Prepublishing..."
          ],
          "postpublish": [
            "echo Postpublishing..."
          ],
          "prerestore": [
            "echo Prerestoring..."
          ],
          "postrestore": [
            "echo Postrestoring..."
          ],
          "prepare": [
            "echo Preparing..."
          ]
        },
        "tools": {
          "dotnet-ef": "1.0.0-preview2-final"
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "version": "1.0.0",
        "title": "My Project",
        "description": "This is my project.",
        "authors": [
          "John Doe"
        ],
        "copyright": "Copyright 2023 John Doe",
        "language": "en-us",
        "projectUrl": "https://example.com",
        "dependencies": {
          "System.Runtime": "4.0.0",
          "System.Linq": "4.0.0"
        },
        "frameworks": {
          "netcoreapp1.0": {
            "dependencies": {
              "Microsoft.NETCore.App": "1.0.0"
            }
          }
        },
        "buildOptions": {
          "emitEntryPoint": true,
          "optimize": true,
          "outputName": "MyProject",
          "warningsAsErrors": true,
          "allowUnsafe": false,
          "debugType": "full",
          "preserveCompilationContext": false,
          "xmlDoc": true,
          "additionalArguments": [
            "/nowarn:CS0169"
          ],
          "compile": {
            "include": [
              "**/*.cs"
            ],
            "exclude": [
              "bin/**",
              "obj/**"
            ]
          },
          "embed": {
            "include": [
              "**/*.resx"
            ]
          },
          "copyToOutput": {
            "include": [
              "**/*.config"
            ]
          }
        },
        "packOptions": {
          "summary": "My project summary",
          "tags": [
            "my-tag"
          ],
          "owners": [
            "John Doe"
          ],
          "releaseNotes": "My project release notes",
          "iconUrl": "https://example.com/icon.png",
          "licenseUrl": "https://example.com/license",
          "requireLicenseAcceptance": false,
          "repository": {
            "type": "git",
            "url": "https://example.com/repo"
          },
          "files": {
            "include": [
              "**/*.dll"
            ]
          }
        },
        "runtimeOptions": {
          "configProperties": {
            "System.GC.Server": true,
            "System.GC.Concurrent": true,
            "System.GC.HeapCount": 2,
            "System.GC.HeapAffinitizeMask": 1,
            "System.GC.GCHeapAffinitizeRanges": "0-1",
            "System.GC.NoAffinitize": false,
            "System.GC.HeapHardLimit": "100MB",
            "System.GC.HeapHardLimitPercent": 50,
            "System.GC.RetainVM": false,
            "System.GC.LOHThreshold": 100000,
            "System.Threading.ThreadPool.MinThreads": 2,
            "System.Threading.ThreadPool.MaxThreads": 10
          }
        },
        "publishOptions": {
          "include": [
            "**/*.dll"
          ]
        },
        "scripts": {
          "precompile": [
            "echo Precompiling..."
          ],
          "postcompile": [
            "echo Postcompiling..."
          ],
          "prepack": [
            "echo Prepacking..."
          ],
          "postpack": [
            "echo Postpacking..."
          ],
          "prepublish": [
            "echo Prepublishing..."
          ],
          "postpublish": [
            "echo Postpublishing..."
          ],
          "prerestore": [
            "echo Prerestoring..."
          ],
          "postrestore": [
            "echo Postrestoring..."
          ],
          "prepare": [
            "echo Preparing..."
          ]
        },
        "runtimes": {
          "win10-x64": {},
          "osx.10.11-x64": {}
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on uniqueItems keyword",
      "valid": false,
      "rust_error": "[\"John Doe\",\"John Doe\"] has non-unique elements",
      "python_error": "['John Doe', 'John Doe'] has non-unique elements\n\nFailed validating 'uniqueItems' in schema['properties']['authors']:\n    {'description': 'The author of the application.',\n     'type': 'array',\n     'uniqueItems': True,\n     'items': {'type': 'string'}}\n\nOn instance['authors']:\n    ['John Doe', 'John Doe']",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "version": "1.0.0",
        "title": "My Project",
        "description": "This is my project.",
        "authors": [
          "John Doe",
          "John Doe"
        ],
        "copyright": "Copyright 2023 John Doe",
        "language": "en-us",
        "projectUrl": "https://example.com",
        "dependencies": {
          "System.Runtime": "4.0.0",
          "System.Linq": "4.0.0"
        },
        "frameworks": {
          "netcoreapp1.0": {
            "dependencies": {
              "Microsoft.NETCore.App": "1.0.0"
            }
          }
        },
        "buildOptions": {
          "emitEntryPoint": true,
          "optimize": true,
          "outputName": "MyProject",
          "warningsAsErrors": true,
          "allowUnsafe": false,
          "debugType": "full",
          "preserveCompilationContext": false,
          "xmlDoc": true,
          "additionalArguments": [
            "/nowarn:CS0169"
          ],
          "compile": {
            "include": [
              "**/*.cs"
            ],
            "exclude": [
              "bin/**",
              "obj/**"
            ]
          },
          "embed": {
            "include": [
              "**/*.resx"
            ]
          },
          "copyToOutput": {
            "include": [
              "**/*.config"
            ]
          }
        },
        "packOptions": {
          "summary": "My project summary",
          "tags": [
            "my-tag",
            "my-tag"
          ],
          "owners": [
            "John Doe"
          ],
          "releaseNotes": "My project release notes",
          "iconUrl": "https://example.com/icon.png",
          "licenseUrl": "https://example.com/license",
          "requireLicenseAcceptance": false,
          "repository": {
            "type": "git",
            "url": "https://example.com/repo"
          },
          "files": {
            "include": [
              "**/*.dll"
            ]
          }
        },
        "runtimeOptions": {
          "configProperties": {
            "System.GC.Server": true,
            "System.GC.Concurrent": true,
            "System.GC.HeapCount": 2,
            "System.GC.HeapAffinitizeMask": 1,
            "System.GC.GCHeapAffinitizeRanges": "0-1",
            "System.GC.NoAffinitize": false,
            "System.GC.HeapHardLimit": "100MB",
            "System.GC.HeapHardLimitPercent": 50,
            "System.GC.RetainVM": false,
            "System.GC.LOHThreshold": 100000,
            "System.Threading.ThreadPool.MinThreads": 2,
            "System.Threading.ThreadPool.MaxThreads": 10
          }
        },
        "publishOptions": {
          "include": [
            "**/*.dll"
          ]
        },
        "scripts": {
          "precompile": [
            "echo Precompiling..."
          ],
          "postcompile": [
            "echo Postcompiling..."
          ],
          "prepack": [
            "echo Prepacking..."
          ],
          "postpack": [
            "echo Postpacking..."
          ],
          "prepublish": [
            "echo Prepublishing..."
          ],
          "postpublish": [
            "echo Postpublishing..."
          ],
          "prerestore": [
            "echo Prerestoring..."
          ],
          "postrestore": [
            "echo Postrestoring..."
          ],
          "prepare": [
            "echo Preparing..."
          ]
        },
        "runtimes": {
          "win10-x64": {},
          "osx.10.11-x64": {}
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword",
      "valid": false,
      "rust_error": "-1 is less than the minimum of 0",
      "python_error": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['runtimeOptions']['properties']['configProperties']['properties']['System.Threading.ThreadPool.MinThreads']:\n    {'type': 'integer',\n     'minimum': 1,\n     'description': 'Sets the minimum number of threads for the thread '\n                    'pool.'}\n\nOn instance['runtimeOptions']['configProperties']['System.Threading.ThreadPool.MinThreads']:\n    0",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "version": "1.0.0",
        "title": "My Project",
        "description": "This is my project.",
        "authors": [
          "John Doe"
        ],
        "copyright": "Copyright 2023 John Doe",
        "language": "en-us",
        "projectUrl": "https://example.com",
        "dependencies": {
          "System.Runtime": "4.0.0",
          "System.Linq": "4.0.0"
        },
        "frameworks": {
          "netcoreapp1.0": {
            "dependencies": {
              "Microsoft.NETCore.App": "1.0.0"
            }
          }
        },
        "buildOptions": {
          "emitEntryPoint": true,
          "optimize": true,
          "outputName": "MyProject",
          "warningsAsErrors": true,
          "allowUnsafe": false,
          "debugType": "full",
          "preserveCompilationContext": false,
          "xmlDoc": true,
          "additionalArguments": [
            "/nowarn:CS0169"
          ],
          "compile": {
            "include": [
              "**/*.cs"
            ],
            "exclude": [
              "bin/**",
              "obj/**"
            ]
          },
          "embed": {
            "include": [
              "**/*.resx"
            ]
          },
          "copyToOutput": {
            "include": [
              "**/*.config"
            ]
          }
        },
        "packOptions": {
          "summary": "My project summary",
          "tags": [
            "my-tag"
          ],
          "owners": [
            "John Doe"
          ],
          "releaseNotes": "My project release notes",
          "iconUrl": "https://example.com/icon.png",
          "licenseUrl": "https://example.com/license",
          "requireLicenseAcceptance": false,
          "repository": {
            "type": "git",
            "url": "https://example.com/repo"
          },
          "files": {
            "include": [
              "**/*.dll"
            ]
          }
        },
        "runtimeOptions": {
          "configProperties": {
            "System.GC.Server": true,
            "System.GC.Concurrent": true,
            "System.GC.HeapCount": -1,
            "System.GC.HeapAffinitizeMask": 1,
            "System.GC.GCHeapAffinitizeRanges": "0-1",
            "System.GC.NoAffinitize": false,
            "System.GC.HeapHardLimit": "100MB",
            "System.GC.HeapHardLimitPercent": 50,
            "System.GC.RetainVM": false,
            "System.GC.LOHThreshold": 100000,
            "System.Threading.ThreadPool.MinThreads": 0,
            "System.Threading.ThreadPool.MaxThreads": 10
          }
        },
        "publishOptions": {
          "include": [
            "**/*.dll"
          ]
        },
        "scripts": {
          "precompile": [
            "echo Precompiling..."
          ],
          "postcompile": [
            "echo Postcompiling..."
          ],
          "prepack": [
            "echo Prepacking..."
          ],
          "postpack": [
            "echo Postpacking..."
          ],
          "prepublish": [
            "echo Prepublishing..."
          ],
          "postpublish": [
            "echo Postpublishing..."
          ],
          "prerestore": [
            "echo Prerestoring..."
          ],
          "postrestore": [
            "echo Postrestoring..."
          ],
          "prepare": [
            "echo Preparing..."
          ]
        },
        "runtimes": {
          "win10-x64": {},
          "osx.10.11-x64": {}
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on format keyword",
      "valid": false,
      "rust_error": "\" invalid url \" is not a \"uri\"",
      "python_error": "' invalid url ' is not a 'uri'\n\nFailed validating 'format' in schema['properties']['packOptions']['properties']['repository']['properties']['url']:\n    {'type': 'string', 'format': 'uri'}\n\nOn instance['packOptions']['repository']['url']:\n    ' invalid url '",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "version": "1.0.0",
        "title": "My Project",
        "description": "This is my project.",
        "authors": [
          "John Doe"
        ],
        "copyright": "Copyright 2023 John Doe",
        "language": "en-us",
        "projectUrl": "https://example.com",
        "dependencies": {
          "System.Runtime": "4.0.0",
          "System.Linq": "4.0.0"
        },
        "frameworks": {
          "netcoreapp1.0": {
            "dependencies": {
              "Microsoft.NETCore.App": "1.0.0"
            }
          }
        },
        "buildOptions": {
          "emitEntryPoint": true,
          "optimize": true,
          "outputName": "MyProject",
          "warningsAsErrors": true,
          "allowUnsafe": false,
          "debugType": "full",
          "preserveCompilationContext": false,
          "xmlDoc": true,
          "additionalArguments": [
            "/nowarn:CS0169"
          ],
          "compile": {
            "include": [
              "**/*.cs"
            ],
            "exclude": [
              "bin/**",
              "obj/**"
            ]
          },
          "embed": {
            "include": [
              "**/*.resx"
            ]
          },
          "copyToOutput": {
            "include": [
              "**/*.config"
            ]
          }
        },
        "packOptions": {
          "summary": "My project summary",
          "tags": [
            "my-tag"
          ],
          "owners": [
            "John Doe"
          ],
          "releaseNotes": "My project release notes",
          "iconUrl": " invalid url ",
          "licenseUrl": " invalid url ",
          "requireLicenseAcceptance": false,
          "repository": {
            "type": "git",
            "url": " invalid url "
          },
          "files": {
            "include": [
              "**/*.dll"
            ]
          }
        },
        "runtimeOptions": {
          "configProperties": {
            "System.GC.Server": true,
            "System.GC.Concurrent": true,
            "System.GC.HeapCount": 2,
            "System.GC.HeapAffinitizeMask": 1,
            "System.GC.GCHeapAffinitizeRanges": "0-1",
            "System.GC.NoAffinitize": false,
            "System.GC.HeapHardLimit": "100MB",
            "System.GC.HeapHardLimitPercent": 50,
            "System.GC.RetainVM": false,
            "System.GC.LOHThreshold": 100000,
            "System.Threading.ThreadPool.MinThreads": 2,
            "System.Threading.ThreadPool.MaxThreads": 10
          }
        },
        "publishOptions": {
          "include": [
            "**/*.dll"
          ]
        },
        "scripts": {
          "precompile": [
            "echo Precompiling..."
          ],
          "postcompile": [
            "echo Postcompiling..."
          ],
          "prepack": [
            "echo Prepacking..."
          ],
          "postpack": [
            "echo Postpacking..."
          ],
          "prepublish": [
            "echo Prepublishing..."
          ],
          "postpublish": [
            "echo Postpublishing..."
          ],
          "prerestore": [
            "echo Prerestoring..."
          ],
          "postrestore": [
            "echo Postrestoring..."
          ],
          "prepare": [
            "echo Preparing..."
          ]
        },
        "runtimes": {
          "win10-x64": {},
          "osx.10.11-x64": {}
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['runtimeOptions']['properties']['configProperties']['properties']['System.Threading.ThreadPool.MinThreads']:\n    {'type': 'integer',\n     'minimum': 1,\n     'description': 'Sets the minimum number of threads for the thread '\n                    'pool.'}\n\nOn instance['runtimeOptions']['configProperties']['System.Threading.ThreadPool.MinThreads']:\n    0",
      "data": {
        "$schema": "http://json-schema.org/draft-04/schema#",
        "version": "1.0.0",
        "title": "My Project",
        "description": "This is my project.",
        "authors": [
          "John Doe"
        ],
        "copyright": "Copyright 2023 John Doe",
        "language": "en-us",
        "projectUrl": "https://example.com",
        "dependencies": {
          "System.Runtime": "4.0.0",
          "System.Linq": "4.0.0"
        },
        "frameworks": {
          "netcoreapp1.0": {
            "dependencies": {
              "Microsoft.NETCore.App": "1.0.0"
            }
          }
        },
        "buildOptions": {
          "emitEntryPoint": true,
          "optimize": true,
          "outputName": "MyProject",
          "warningsAsErrors": true,
          "allowUnsafe": false,
          "debugType": "full",
          "preserveCompilationContext": false,
          "xmlDoc": true,
          "additionalArguments": [
            "/nowarn:CS0169"
          ],
          "compile": {
            "include": [
              "**/*.cs"
            ],
            "exclude": [
              "bin/**",
              "obj/**"
            ]
          },
          "embed": {
            "include": [
              "**/*.resx"
            ]
          },
          "copyToOutput": {
            "include": [
              "**/*.config"
            ]
          }
        },
        "packOptions": {
          "summary": "My project summary",
          "tags": [
            "my-tag"
          ],
          "owners": [
            "John Doe"
          ],
          "releaseNotes": "My project release notes",
          "iconUrl": "https://example.com/icon.png",
          "licenseUrl": "https://example.com/license",
          "requireLicenseAcceptance": false,
          "repository": {
            "type": "git",
            "url": "https://example.com/repo"
          },
          "files": {
            "include": [
              "**/*.dll"
            ]
          }
        },
        "runtimeOptions": {
          "configProperties": {
            "System.GC.GCHeapAffinitizeRanges": "",
            "System.GC.LOHThreshold": "abc",
            "System.Threading.ThreadPool.MinThreads": 0,
            "System.Threading.ThreadPool.MaxThreads": 0
          }
        },
        "publishOptions": {
          "include": [
            "**/*.dll"
          ]
        },
        "scripts": {
          "precompile": [
            "echo Precompiling..."
          ],
          "postcompile": [
            "echo Postcompiling..."
          ],
          "prepack": [
            "echo Prepacking..."
          ],
          "postpack": [
            "echo Postpacking..."
          ],
          "prepublish": [
            "echo Prepublishing..."
          ],
          "postpublish": [
            "echo Postpublishing..."
          ],
          "prerestore": [
            "echo Prerestoring..."
          ],
          "postrestore": [
            "echo Postrestoring..."
          ],
          "prepare": [
            "echo Preparing..."
          ]
        },
        "runtimes": {
          "win10-x64": {},
          "osx.10.11-x64": {}
        }
      }
    }
  ]
}