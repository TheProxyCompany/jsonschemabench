{
  "description": "sample Github_medium/o3626.json",
  "meta": {
    "full_size": 3173,
    "stripped_size": 2280,
    "features": [
      "$ref",
      "@minmaxItems",
      "@siblingKeys",
      "allOf",
      "items",
      "oneOf"
    ],
    "raw_features": [
      "$schema",
      "definitions",
      "minItems",
      "properties",
      "required",
      "type",
      "type:array",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
      "location": {
        "description": "Location(s) to search for the object",
        "type": "object",
        "properties": {
          "location": {
            "description": "Location to search for the object",
            "type": "string"
          },
          "locations": {
            "description": "Locations to search for the object",
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "_uniqueItems": true
          }
        }
      },
      "libraries": {
        "description": "Javascript libraries to use with the code",
        "type": "array",
        "items": {
          "type": "string"
        },
        "minItems": 1,
        "_uniqueItems": true
      },
      "patternQuery": {
        "description": "Pattern to be matched",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "pattern": {
                "description": "Pattern to be matched",
                "type": "object"
              }
            },
            "required": [
              "pattern"
            ]
          },
          {
            "$ref": "#/definitions/location"
          }
        ]
      },
      "codeQuery": {
        "description": "Code to be executed",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "code": {
                "description": "Javascript code block",
                "type": "string"
              },
              "libraries": {
                "$ref": "#/definitions/libraries"
              }
            },
            "required": [
              "code"
            ]
          },
          {
            "$ref": "#/definitions/location"
          }
        ]
      },
      "notQuery": {
        "description": "Not operation",
        "type": "object",
        "properties": {
          "not": {
            "description": "Query block",
            "oneOf": [
              {
                "$ref": "#/definitions/patternQuery"
              },
              {
                "$ref": "#/definitions/codeQuery"
              },
              {
                "$ref": "#/definitions/notQuery"
              },
              {
                "$ref": "#/definitions/andQuery"
              },
              {
                "$ref": "#/definitions/orQuery"
              }
            ]
          }
        },
        "required": [
          "not"
        ]
      },
      "andQuery": {
        "description": "And operation",
        "type": "object",
        "properties": {
          "and": {
            "description": "List of queries",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/definitions/patternQuery"
                },
                {
                  "$ref": "#/definitions/codeQuery"
                },
                {
                  "$ref": "#/definitions/notQuery"
                },
                {
                  "$ref": "#/definitions/andQuery"
                },
                {
                  "$ref": "#/definitions/orQuery"
                }
              ]
            }
          }
        },
        "required": [
          "and"
        ]
      },
      "orQuery": {
        "description": "Or operation",
        "type": "object",
        "properties": {
          "or": {
            "description": "List of queries",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/definitions/patternQuery"
                },
                {
                  "$ref": "#/definitions/codeQuery"
                },
                {
                  "$ref": "#/definitions/notQuery"
                },
                {
                  "$ref": "#/definitions/andQuery"
                },
                {
                  "$ref": "#/definitions/orQuery"
                }
              ]
            }
          }
        },
        "required": [
          "or"
        ]
      },
      "action": {
        "description": "Action to be executed",
        "type": "object",
        "allOf": [
          {
            "properties": {
              "code": {
                "description": "Code to be executed",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  },
                  {
                    "type": "object"
                  }
                ]
              },
              "endpoint": {
                "description": "Endpoint to execute the code",
                "type": "string"
              },
              "opts": {
                "description": "Optional data to be sent to the endpoint",
                "type": "object"
              },
              "libraries": {
                "$ref": "#/definitions/libraries"
              }
            },
            "required": [
              "code"
            ]
          },
          {
            "$ref": "#/definitions/location"
          }
        ]
      }
    },
    "title": "Rule",
    "description": "Rule for rules system",
    "type": "object",
    "properties": {
      "when": {
        "$ref": "#/definitions/patternQuery"
      },
      "schedule": {
        "description": "Schedule for the rule",
        "type": "string"
      },
      "condition": {
        "description": "Conditions to be evaluated",
        "oneOf": [
          {
            "$ref": "#/definitions/patternQuery"
          },
          {
            "$ref": "#/definitions/codeQuery"
          },
          {
            "$ref": "#/definitions/notQuery"
          },
          {
            "$ref": "#/definitions/andQuery"
          },
          {
            "$ref": "#/definitions/orQuery"
          }
        ]
      },
      "action": {
        "$ref": "#/definitions/action"
      },
      "actions": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/action"
        }
      }
    },
    "allOf": [
      {
        "oneOf": [
          {
            "required": [
              "when"
            ]
          },
          {
            "required": [
              "schedule"
            ]
          }
        ]
      },
      {
        "oneOf": [
          {
            "required": [
              "action"
            ]
          },
          {
            "required": [
              "actions"
            ]
          }
        ]
      }
    ]
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "when": {
          "pattern": {
            "key": "value"
          },
          "location": "location1"
        },
        "condition": {
          "not": {
            "pattern": {
              "key": "value"
            },
            "locations": [
              "location2",
              "location3"
            ]
          }
        },
        "action": {
          "code": "console.log('Hello World!')",
          "libraries": [
            "library1",
            "library2"
          ],
          "location": "location4"
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "when": {
          "pattern": {
            "key": "value"
          },
          "location": "location1"
        },
        "condition": {
          "not": {
            "pattern": {
              "key": "value"
            },
            "location": "location2"
          }
        },
        "action": {
          "code": "console.log('Hello World')",
          "endpoint": "http://example.com",
          "opts": {
            "key": "value"
          },
          "libraries": [
            "library1",
            "library2"
          ],
          "location": "location3"
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on allOf keyword",
      "valid": false,
      "rust_error": "{\"schedule\":\"daily\",\"action\":{\"code\":\"console.log('Hello World')\",\"endpoint\":\"http://example.com\",\"opts\":{\"key\":\"value\"},\"libraries\":[\"library1\",\"library2\"],\"location\":\"location3\"},\"actions\":[{\"code\":\"console.log('Hello World')\",\"endpoint\":\"http://example.com\",\"opts\":{\"key\":\"value\"},\"libraries\":[\"library1\",\"library2\"],\"location\":\"location3\"}]} is valid under more than one of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'schedule': 'daily', 'action': {'code': \"console.log('Hello World')\", 'endpoint': 'http://example.com', 'opts': {'key': 'value'}, 'libraries': ['library1', 'library2'], 'location': 'location3'}, 'actions': [{'code': \"console.log('Hello World')\", 'endpoint': 'http://example.com', 'opts': {'key': 'value'}, 'libraries': ['library1', 'library2'], 'location': 'location3'}]} is valid under each of {'required': ['actions']}, {'required': ['action']}\n\nFailed validating 'oneOf' in schema['allOf'][1]:\n    {'oneOf': [{'required': ['action']}, {'required': ['actions']}]}\n\nOn instance:\n    {'schedule': 'daily',\n     'action': {'code': \"console.log('Hello World')\",\n                'endpoint': 'http://example.com',\n                'opts': {'key': 'value'},\n                'libraries': ['library1', 'library2'],\n                'location': 'location3'},\n     'actions': [{'code': \"console.log('Hello World')\",\n                  'endpoint': 'http://example.com',\n                  'opts': {'key': 'value'},\n                  'lib.. (79 more)",
      "data": {
        "schedule": "daily",
        "action": {
          "code": "console.log('Hello World')",
          "endpoint": "http://example.com",
          "opts": {
            "key": "value"
          },
          "libraries": [
            "library1",
            "library2"
          ],
          "location": "location3"
        },
        "actions": [
          {
            "code": "console.log('Hello World')",
            "endpoint": "http://example.com",
            "opts": {
              "key": "value"
            },
            "libraries": [
              "library1",
              "library2"
            ],
            "location": "location3"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minItems keyword",
      "valid": false,
      "rust_error": "[] has less than 1 item",
      "python_error": "[] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['action']['allOf'][0]['properties']['libraries']:\n    {'description': 'Javascript libraries to use with the code',\n     'type': 'array',\n     'items': {'type': 'string'},\n     'minItems': 1,\n     '_uniqueItems': True}\n\nOn instance['action']['libraries']:\n    []",
      "data": {
        "when": {
          "pattern": {
            "key": "value"
          },
          "location": "location1"
        },
        "condition": {
          "not": {
            "pattern": {
              "key": "value"
            },
            "location": "location2"
          }
        },
        "action": {
          "code": "console.log('Hello World')",
          "endpoint": "http://example.com",
          "opts": {
            "key": "value"
          },
          "libraries": [],
          "location": "location3"
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"code\":\"console.log('Hello World')\"} is not of type \"array\"",
      "python_error": "{'when': {'pattern': {'key': 'value'}, 'location': 'location1'}, 'condition': {'not': {'pattern': {'key': 'value'}, 'locations': ['location2', 'location2']}}, 'action': {'code': \"console.log('Hello World')\", 'endpoint': 'http://example.com', 'opts': {'key': 'value'}, 'libraries': ['library1', 'library2'], 'location': 'location3'}, 'actions': {'code': \"console.log('Hello World')\"}} is valid under each of {'required': ['actions']}, {'required': ['action']}\n\nFailed validating 'oneOf' in schema['allOf'][1]:\n    {'oneOf': [{'required': ['action']}, {'required': ['actions']}]}\n\nOn instance:\n    {'when': {'pattern': {'key': 'value'}, 'location': 'location1'},\n     'condition': {'not': {'pattern': {'key': 'value'},\n                           'locations': ['location2', 'location2']}},\n     'action': {'code': \"console.log('Hello World')\",\n                'endpoint': 'http://example.com',\n                'opts': {'key': 'value'},\n                'libraries': ['library1', 'library2'],\n                'location': 'location3'},\n     'actions': {'code': \"console.log('Hello World')\"}}",
      "data": {
        "when": {
          "pattern": {
            "key": "value"
          },
          "location": "location1"
        },
        "condition": {
          "not": {
            "pattern": {
              "key": "value"
            },
            "locations": [
              "location2",
              "location2"
            ]
          }
        },
        "action": {
          "code": "console.log('Hello World')",
          "endpoint": "http://example.com",
          "opts": {
            "key": "value"
          },
          "libraries": [
            "library1",
            "library2"
          ],
          "location": "location3"
        },
        "actions": {
          "code": "console.log('Hello World')"
        }
      }
    }
  ]
}