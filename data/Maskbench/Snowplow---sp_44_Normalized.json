{
  "description": "sample Snowplow/sp_44_Normalized.json",
  "meta": {
    "full_size": 337,
    "stripped_size": 156,
    "features": [
      "@minmaxLength",
      "additionalProperties"
    ],
    "raw_features": [
      "_boolSchema",
      "maxLength",
      "properties",
      "type",
      "type:[]",
      "type:boolean",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "additionalProperties": false,
    "description": "Schema for a Google Analytics exception hit",
    "properties": {
      "description": {
        "maxLength": 150,
        "type": [
          "string",
          "null"
        ]
      },
      "isFatal": {
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "self": {
      "format": "jsonschema",
      "name": "exception",
      "vendor": "com.google.analytics.measurement-protocol",
      "version": "1-0-0"
    },
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "description": "This is a test exception",
        "isFatal": true
      }
    },
    {
      "description": "llama-70b generated negative; focus on maxLength keyword",
      "valid": false,
      "rust_error": "\"This is a test exception that is longer than 150 characters and should be invalid according to the schema but might be valid if the validator doesn't support maxLength keyword. This is a test exception that is longer than 150 characters and should be invalid according to the schema but might be valid if the validator doesn't support maxLength keyword.\" is longer than 150 characters",
      "python_error": "\"This is a test exception that is longer than 150 characters and should be invalid according to the schema but might be valid if the validator doesn't support maxLength keyword. This is a test exception that is longer than 150 characters and should be invalid according to the schema but might be valid if the validator doesn't support maxLength keyword.\" is too long\n\nFailed validating 'maxLength' in schema['properties']['description']:\n    {'maxLength': 150, 'type': ['string', 'null']}\n\nOn instance['description']:\n    ('This is a test exception that is longer than 150 characters and '\n     'should be invalid according to the schema but might be valid if the '\n     \"validator doesn't support maxLength keyword. This is a test \"\n     'exception that is longer than 150 characters and should be invalid '\n     \"according to the schema but might be valid if the validator doesn't \"\n     'support maxLength keyword.')",
      "data": {
        "description": "This is a test exception that is longer than 150 characters and should be invalid according to the schema but might be valid if the validator doesn't support maxLength keyword. This is a test exception that is longer than 150 characters and should be invalid according to the schema but might be valid if the validator doesn't support maxLength keyword.",
        "isFatal": true
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"null\", \"string\"",
      "python_error": "123 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['description']:\n    {'maxLength': 150, 'type': ['string', 'null']}\n\nOn instance['description']:\n    123",
      "data": {
        "description": 123,
        "isFatal": true
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"This is a test exception that is longer than 150 characters and will cause the schema to fail because it is too long and has more than 150 characters in the description field.\" is longer than 150 characters",
      "python_error": "'This is a test exception that is longer than 150 characters and will cause the schema to fail because it is too long and has more than 150 characters in the description field.' is too long\n\nFailed validating 'maxLength' in schema['properties']['description']:\n    {'maxLength': 150, 'type': ['string', 'null']}\n\nOn instance['description']:\n    ('This is a test exception that is longer than 150 characters and will '\n     'cause the schema to fail because it is too long and has more than '\n     '150 characters in the description field.')",
      "data": {
        "description": "This is a test exception that is longer than 150 characters and will cause the schema to fail because it is too long and has more than 150 characters in the description field.",
        "isFatal": true
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "1 is not of types \"boolean\", \"null\"",
      "python_error": "1 is not of type 'boolean', 'null'\n\nFailed validating 'type' in schema['properties']['isFatal']:\n    {'type': ['boolean', 'null']}\n\nOn instance['isFatal']:\n    1",
      "data": {
        "description": "This is a test exception",
        "isFatal": 1
      }
    },
    {
      "description": "llama-70b generated negative; focus on maxLength keyword",
      "valid": false,
      "rust_error": "\"This is a test exception that is longer than 150 characters. This is a test exception that is longer than 150 characters. This is a test exception that is longer than 150 characters.\" is longer than 150 characters",
      "python_error": "'This is a test exception that is longer than 150 characters. This is a test exception that is longer than 150 characters. This is a test exception that is longer than 150 characters.' is too long\n\nFailed validating 'maxLength' in schema['properties']['description']:\n    {'maxLength': 150, 'type': ['string', 'null']}\n\nOn instance['description']:\n    ('This is a test exception that is longer than 150 characters. This is '\n     'a test exception that is longer than 150 characters. This is a test '\n     'exception that is longer than 150 characters.')",
      "data": {
        "description": "This is a test exception that is longer than 150 characters. This is a test exception that is longer than 150 characters. This is a test exception that is longer than 150 characters.",
        "isFatal": true
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"This is a test exception that is longer than 150 characters. This is a test exception that is longer than 150 characters. This is a test exception that is longer than 150 characters.\" is longer than 150 characters",
      "python_error": "Additional properties are not allowed ('extraProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'additionalProperties': False,\n     'description': 'Schema for a Google Analytics exception hit',\n     'properties': {'description': {'maxLength': 150,\n                                    'type': ['string', 'null']},\n                    'isFatal': {'type': ['boolean', 'null']}},\n     'self': {'format': 'jsonschema',\n              'name': 'exception',\n              'vendor': 'com.google.analytics.measurement-protocol',\n              'version': '1-0-0'},\n     'type': 'object'}\n\nOn instance:\n    {'description': 'This is a test exception that is longer than 150 '\n                    'characters. This is a test exception that is longer '\n                    'than 150 characters. This is a test exception that is '\n                    'longer than 150 characters.',\n     'isFatal': True,\n     'extraProperty': 'This is an extra property'}",
      "data": {
        "description": "This is a test exception that is longer than 150 characters. This is a test exception that is longer than 150 characters. This is a test exception that is longer than 150 characters.",
        "isFatal": true,
        "extraProperty": "This is an extra property"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "description": "Test exception description",
        "isFatal": true
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "1 is not of types \"boolean\", \"null\"",
      "python_error": "1 is not of type 'boolean', 'null'\n\nFailed validating 'type' in schema['properties']['isFatal']:\n    {'type': ['boolean', 'null']}\n\nOn instance['isFatal']:\n    1",
      "data": {
        "description": "Test exception description",
        "isFatal": 1
      }
    },
    {
      "description": "llama-70b generated negative; focus on maxLength keyword",
      "valid": false,
      "rust_error": "\"Test exception description that is longer than 150 characters and should be rejected by the validator as it violates the maxLength constraint in the schema. This is a test case to verify the functionality of maxLength keyword support in the validator. If the validator does not support maxLength, it may accept this instance which is actually invalid according to the schema.\" is longer than 150 characters",
      "python_error": "'Test exception description that is longer than 150 characters and should be rejected by the validator as it violates the maxLength constraint in the schema. This is a test case to verify the functionality of maxLength keyword support in the validator. If the validator does not support maxLength, it may accept this instance which is actually invalid according to the schema.' is too long\n\nFailed validating 'maxLength' in schema['properties']['description']:\n    {'maxLength': 150, 'type': ['string', 'null']}\n\nOn instance['description']:\n    ('Test exception description that is longer than 150 characters and '\n     'should be rejected by the validator as it violates the maxLength '\n     'constraint in the schema. This is a test case to verify the '\n     'functionality of maxLength keyword support in the validator. If the '\n     'validator does not support maxLength, it may accept this instance '\n     'which is actually invalid according to the schema.')",
      "data": {
        "description": "Test exception description that is longer than 150 characters and should be rejected by the validator as it violates the maxLength constraint in the schema. This is a test case to verify the functionality of maxLength keyword support in the validator. If the validator does not support maxLength, it may accept this instance which is actually invalid according to the schema.",
        "isFatal": true
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"Test exception description that is way too long and exceeds the maximum length of 150 characters because it has more than 150 characters in it and this will definitely cause the validation to fail\" is longer than 150 characters",
      "python_error": "'Test exception description that is way too long and exceeds the maximum length of 150 characters because it has more than 150 characters in it and this will definitely cause the validation to fail' is too long\n\nFailed validating 'maxLength' in schema['properties']['description']:\n    {'maxLength': 150, 'type': ['string', 'null']}\n\nOn instance['description']:\n    ('Test exception description that is way too long and exceeds the '\n     'maximum length of 150 characters because it has more than 150 '\n     'characters in it and this will definitely cause the validation to '\n     'fail')",
      "data": {
        "description": "Test exception description that is way too long and exceeds the maximum length of 150 characters because it has more than 150 characters in it and this will definitely cause the validation to fail",
        "isFatal": true
      }
    }
  ]
}