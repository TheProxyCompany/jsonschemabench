{
  "description": "sample Snowplow/sp_372_Normalized.json",
  "meta": {
    "full_size": 5873,
    "stripped_size": 2933,
    "features": [
      "@minmaxInteger",
      "@minmaxLength",
      "@siblingKeys",
      "additionalProperties",
      "anyOf",
      "enum",
      "format",
      "format:hostname",
      "format:ipv4",
      "format:ipv6",
      "items"
    ],
    "raw_features": [
      "_boolSchema",
      "maxLength",
      "maximum",
      "minLength",
      "minimum",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "additionalProperties": false,
    "description": "Snowplow Redshift storage configuration",
    "properties": {
      "blacklistTabular": {
        "description": "List of iglu schemas for entities that should not be shredded into TSV format",
        "items": {
          "type": "string"
        },
        "type": [
          "array",
          "null"
        ]
      },
      "compRows": {
        "description": "Number of rows to be used as the sample size for compression analysis",
        "maximum": 1000000000,
        "minimum": 1000,
        "type": "integer"
      },
      "database": {
        "description": "Redshift database name",
        "maxLength": 64,
        "minLength": 1,
        "type": "string"
      },
      "host": {
        "anyOf": [
          {
            "format": "hostname"
          },
          {
            "format": "ipv4"
          },
          {
            "format": "ipv6"
          }
        ],
        "description": "Redshift cluster host ('localhost' for enabled SSH Tunnel)",
        "type": "string"
      },
      "id": {
        "_format": "uuid",
        "description": "Machine-readable unique identificator",
        "type": "string"
      },
      "jdbc": {
        "additionalProperties": false,
        "properties": {
          "BlockingRowsMode": {
            "description": "The number of rows to hold in memory",
            "minimum": 0,
            "type": "integer"
          },
          "DSILogLevel": {
            "description": "Amount of detail included in log file",
            "maximum": 6,
            "minimum": 0,
            "type": "integer"
          },
          "DisableIsValidQuery": {
            "description": "Disable detection JDBC driver no longer holding a valid database connection",
            "type": "boolean"
          },
          "FilterLevel": {
            "description": "The minimum severity level of a message that the client processes",
            "enum": [
              "DEBUG",
              "INFO",
              "NOTICE",
              "WARNING",
              "LOG",
              "ERROR"
            ]
          },
          "TCPKeepAliveMinutes": {
            "description": "The threshold for minutes of inactivity before initiating a TCP keepalive transmission",
            "minimum": 0,
            "type": "integer"
          },
          "loginTimeout": {
            "description": "The number of seconds to wait before timing out when connecting to the server",
            "minimum": 0,
            "type": "integer"
          },
          "loglevel": {
            "description": "The amount of logging information output by the driver",
            "maximum": 2,
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "socketTimeout": {
            "description": "The number of seconds to wait during socket read operations before timing out",
            "minimum": 0,
            "type": "integer"
          },
          "ssl": {
            "description": "Whether to use an SSL connection",
            "type": "boolean"
          },
          "sslMode": {
            "description": "Determines how to handle server certificate verification",
            "enum": [
              "verify-ca",
              "verify-full"
            ],
            "type": [
              "string",
              "null"
            ]
          },
          "sslRootCert": {
            "description": "The full path of a .pem or .crt file containing the trust root Certificate Authority",
            "maxLength": 1024,
            "type": [
              "string",
              "null"
            ]
          },
          "tcpKeepAlive": {
            "description": "A value that determines whether TCP keepalives are enabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "maxError": {
        "description": "Amount of allowed errors before aborting load",
        "maximum": 100000,
        "minimum": 0,
        "type": "integer"
      },
      "name": {
        "description": "Human-readable storage target name, used only for logging",
        "maxLength": 255,
        "type": "string"
      },
      "password": {
        "description": "Redshift password, either plain-text or encrypted key for EC2 Parameter Storage",
        "properties": {
          "ec2ParameterStore": {
            "description": "EC2 Parameter Storage configuration",
            "properties": {
              "parameterName": {
                "description": "EC2 Parameter with encrypted password",
                "maxLength": 2048,
                "type": "string"
              }
            },
            "required": [
              "parameterName"
            ],
            "type": "object"
          }
        },
        "required": [
          "ec2ParameterStore"
        ],
        "type": [
          "string",
          "object"
        ]
      },
      "port": {
        "description": "Redshift database port",
        "maximum": 65535,
        "minimum": 1,
        "type": "integer"
      },
      "processingManifest": {
        "description": "Optional processing manifest to maintain pipeline state",
        "properties": {
          "amazonDynamoDb": {
            "description": "Configuration for processing manifest on top of DynamoDB - single available implementation",
            "properties": {
              "tableName": {
                "description": "DynamoDB table name",
                "maxLength": 255,
                "minLength": 3,
                "type": "string"
              }
            },
            "required": [
              "tableName"
            ],
            "type": "object"
          }
        },
        "required": [
          "amazonDynamoDb"
        ],
        "type": [
          "object",
          "null"
        ]
      },
      "purpose": {
        "description": "Kind of data stored in this instance",
        "enum": [
          "ENRICHED_EVENTS"
        ]
      },
      "roleArn": {
        "description": "IAM Role ARN used to load data from S3",
        "minLength": 20,
        "type": "string"
      },
      "schema": {
        "description": "Redshift database schema (e.g. 'atomic')",
        "maxLength": 128,
        "type": "string"
      },
      "sshTunnel": {
        "description": "Optional SSH Tunnel configuration",
        "properties": {
          "bastion": {
            "description": "Bastion host configuration",
            "properties": {
              "host": {
                "anyOf": [
                  {
                    "format": "hostname"
                  },
                  {
                    "format": "ipv4"
                  },
                  {
                    "format": "ipv6"
                  }
                ],
                "description": "Bastion SSH host",
                "type": "string"
              },
              "key": {
                "description": "SSH-key stored in EC2 Parameter Storage",
                "properties": {
                  "ec2ParameterStore": {
                    "properties": {
                      "parameterName": {
                        "maxLength": 2048,
                        "type": "string"
                      }
                    },
                    "required": [
                      "parameterName"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "ec2ParameterStore"
                ],
                "type": [
                  "object",
                  "null"
                ]
              },
              "passphrase": {
                "description": "Plain-text SSH user's passphrase",
                "maxLength": 2048,
                "type": [
                  "string",
                  "null"
                ]
              },
              "port": {
                "description": "Bastion SSH port",
                "maximum": 65535,
                "minimum": 1,
                "type": "integer"
              },
              "user": {
                "description": "SSH user",
                "maxLength": 32,
                "type": "string"
              }
            },
            "required": [
              "host",
              "port",
              "user",
              "passphrase",
              "key"
            ],
            "type": "object"
          },
          "destination": {
            "description": "Database socket inside private network",
            "properties": {
              "host": {
                "anyOf": [
                  {
                    "format": "hostname"
                  },
                  {
                    "format": "ipv4"
                  },
                  {
                    "format": "ipv6"
                  }
                ],
                "description": "Redshift host inside private network (root-level host should be changed to 'localhost')",
                "type": "string"
              },
              "port": {
                "description": "Redshift port inside private network (root-level 'port' should be changed to be identical to 'localPort')",
                "maximum": 65535,
                "minimum": 1,
                "type": "integer"
              }
            },
            "required": [
              "host",
              "port"
            ],
            "type": "object"
          },
          "localPort": {
            "description": "Arbitrary port on node, running Loader (shoul be identical to root-level 'port')",
            "maximum": 65535,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "bastion",
          "destination",
          "localPort"
        ],
        "type": [
          "object",
          "null"
        ]
      },
      "username": {
        "description": "Redshift user",
        "maxLength": 128,
        "type": "string"
      }
    },
    "required": [
      "name",
      "id",
      "host",
      "database",
      "port",
      "username",
      "password",
      "schema",
      "sshTunnel",
      "processingManifest",
      "roleArn",
      "maxError",
      "compRows",
      "jdbc",
      "purpose"
    ],
    "self": {
      "format": "jsonschema",
      "name": "redshift_config",
      "vendor": "com.snowplowanalytics.snowplow.storage",
      "version": "4-0-0"
    },
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "blacklistTabular": null,
        "compRows": 100000,
        "database": "my_redshift_database",
        "host": "localhost",
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "jdbc": {
          "BlockingRowsMode": 1000,
          "DSILogLevel": 0,
          "DisableIsValidQuery": false,
          "FilterLevel": "INFO",
          "TCPKeepAliveMinutes": 10,
          "loginTimeout": 30,
          "loglevel": 1,
          "socketTimeout": 30,
          "ssl": true,
          "sslMode": "verify-ca",
          "sslRootCert": "/path/to/cert.pem",
          "tcpKeepAlive": true
        },
        "maxError": 100,
        "name": "my_redshift_storage",
        "password": {
          "ec2ParameterStore": {
            "parameterName": "my_redshift_password"
          }
        },
        "port": 5439,
        "processingManifest": {
          "amazonDynamoDb": {
            "tableName": "my_processing_manifest"
          }
        },
        "purpose": "ENRICHED_EVENTS",
        "roleArn": "arn:aws:iam::123456789012:role/my_redshift_role",
        "schema": "atomic",
        "sshTunnel": {
          "bastion": {
            "host": "mybastionhost.com",
            "key": {
              "ec2ParameterStore": {
                "parameterName": "my_ssh_key"
              }
            },
            "passphrase": "my_ssh_passphrase",
            "port": 22,
            "user": "my_ssh_user"
          },
          "destination": {
            "host": "localhost",
            "port": 5439
          },
          "localPort": 5439
        },
        "username": "my_redshift_user"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "123 is not of types \"array\", \"null\"",
      "python_error": "123 is not of type 'array', 'null'\n\nFailed validating 'type' in schema['properties']['blacklistTabular']:\n    {'description': 'List of iglu schemas for entities that should not be '\n                    'shredded into TSV format',\n     'items': {'type': 'string'},\n     'type': ['array', 'null']}\n\nOn instance['blacklistTabular']:\n    123",
      "data": {
        "blacklistTabular": 123,
        "compRows": 100000,
        "database": "my_redshift_database",
        "host": "localhost",
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "jdbc": {
          "BlockingRowsMode": 1000,
          "DSILogLevel": 0,
          "DisableIsValidQuery": false,
          "FilterLevel": "INFO",
          "TCPKeepAliveMinutes": 10,
          "loginTimeout": 30,
          "loglevel": 1,
          "socketTimeout": 30,
          "ssl": true,
          "sslMode": "verify-ca",
          "sslRootCert": "/path/to/cert.pem",
          "tcpKeepAlive": true
        },
        "maxError": 100,
        "name": "my_redshift_storage",
        "password": {
          "ec2ParameterStore": {
            "parameterName": "my_redshift_password"
          }
        },
        "port": 5439,
        "processingManifest": {
          "amazonDynamoDb": {
            "tableName": "my_processing_manifest"
          }
        },
        "purpose": "ENRICHED_EVENTS",
        "roleArn": "arn:aws:iam::123456789012:role/my_redshift_role",
        "schema": "atomic",
        "sshTunnel": {
          "bastion": {
            "host": "mybastionhost.com",
            "key": {
              "ec2ParameterStore": {
                "parameterName": "my_ssh_key"
              }
            },
            "passphrase": "my_ssh_passphrase",
            "port": 22,
            "user": "my_ssh_user"
          },
          "destination": {
            "host": "localhost",
            "port": 5439
          },
          "localPort": 5439
        },
        "username": "my_redshift_user"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword or maxLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['database']:\n    {'description': 'Redshift database name',\n     'maxLength': 64,\n     'minLength': 1,\n     'type': 'string'}\n\nOn instance['database']:\n    ''",
      "data": {
        "blacklistTabular": null,
        "compRows": 100000,
        "database": "",
        "host": "localhost",
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "jdbc": {
          "BlockingRowsMode": 1000,
          "DSILogLevel": 0,
          "DisableIsValidQuery": false,
          "FilterLevel": "INFO",
          "TCPKeepAliveMinutes": 10,
          "loginTimeout": 30,
          "loglevel": 1,
          "socketTimeout": 30,
          "ssl": true,
          "sslMode": "verify-ca",
          "sslRootCert": "/path/to/cert.pem",
          "tcpKeepAlive": true
        },
        "maxError": 100,
        "name": "my_redshift_storage",
        "password": {
          "ec2ParameterStore": {
            "parameterName": "my_redshift_password"
          }
        },
        "port": 5439,
        "processingManifest": {
          "amazonDynamoDb": {
            "tableName": "a"
          }
        },
        "purpose": "ENRICHED_EVENTS",
        "roleArn": "arn:aws:iam::123456789012:role/my_redshift_role",
        "schema": "atomic",
        "sshTunnel": {
          "bastion": {
            "host": "mybastionhost.com",
            "key": {
              "ec2ParameterStore": {
                "parameterName": "my_ssh_key"
              }
            },
            "passphrase": "my_ssh_passphrase",
            "port": 22,
            "user": "my_ssh_user"
          },
          "destination": {
            "host": "localhost",
            "port": 5439
          },
          "localPort": 5439
        },
        "username": "my_redshift_user"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword or maximum keyword",
      "valid": false,
      "rust_error": "500 is less than the minimum of 1000",
      "python_error": "500 is less than the minimum of 1000\n\nFailed validating 'minimum' in schema['properties']['compRows']:\n    {'description': 'Number of rows to be used as the sample size for '\n                    'compression analysis',\n     'maximum': 1000000000,\n     'minimum': 1000,\n     'type': 'integer'}\n\nOn instance['compRows']:\n    500",
      "data": {
        "blacklistTabular": null,
        "compRows": 500,
        "database": "my_redshift_database",
        "host": "localhost",
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "jdbc": {
          "BlockingRowsMode": 1000,
          "DSILogLevel": 0,
          "DisableIsValidQuery": false,
          "FilterLevel": "INFO",
          "TCPKeepAliveMinutes": 10,
          "loginTimeout": 30,
          "loglevel": 1,
          "socketTimeout": 30,
          "ssl": true,
          "sslMode": "verify-ca",
          "sslRootCert": "/path/to/cert.pem",
          "tcpKeepAlive": true
        },
        "maxError": 100,
        "name": "my_redshift_storage",
        "password": {
          "ec2ParameterStore": {
            "parameterName": "my_redshift_password"
          }
        },
        "port": 5439,
        "processingManifest": {
          "amazonDynamoDb": {
            "tableName": "my_processing_manifest"
          }
        },
        "purpose": "ENRICHED_EVENTS",
        "roleArn": "arn:aws:iam::123456789012:role/my_redshift_role",
        "schema": "atomic",
        "sshTunnel": {
          "bastion": {
            "host": "mybastionhost.com",
            "key": {
              "ec2ParameterStore": {
                "parameterName": "my_ssh_key"
              }
            },
            "passphrase": "my_ssh_passphrase",
            "port": 22,
            "user": "my_ssh_user"
          },
          "destination": {
            "host": "localhost",
            "port": 5439
          },
          "localPort": 5439
        },
        "username": "my_redshift_user"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"RAW_EVENTS\" is not one of [\"ENRICHED_EVENTS\"]",
      "python_error": "Additional properties are not allowed ('ENRICHED_EVENTS' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'additionalProperties': False,\n     'description': 'Snowplow Redshift storage configuration',\n     'properties': {'blacklistTabular': {'description': 'List of iglu '\n                                                        'schemas for '\n                                                        'entities that '\n                                                        'should not be '\n                                                        'shredded into TSV '\n                                                        'format',\n                                         'items': {'type': 'string'},\n                                         'type': ['array', 'null']},\n                    'compRows': {'description': 'Number of rows to be used '\n                                                'as the sample size for '\n                                                'compression analysis',\n     .. (33473 more)",
      "data": {
        "blacklistTabular": null,
        "compRows": 100000,
        "database": "my_redshift_database",
        "host": "localhost",
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "jdbc": {
          "BlockingRowsMode": 1000,
          "DSILogLevel": 0,
          "DisableIsValidQuery": false,
          "FilterLevel": "INFO",
          "TCPKeepAliveMinutes": 10,
          "loginTimeout": 30,
          "loglevel": 1,
          "socketTimeout": 30,
          "ssl": true,
          "sslMode": "verify-ca",
          "sslRootCert": "/path/to/cert.pem",
          "tcpKeepAlive": true
        },
        "maxError": 100,
        "name": "my_redshift_storage",
        "password": {
          "ec2ParameterStore": {
            "parameterName": "my_redshift_password"
          }
        },
        "port": 5439,
        "processingManifest": {
          "amazonDynamoDb": {
            "tableName": "my_processing_manifest"
          }
        },
        "purpose": "RAW_EVENTS",
        "ENRICHED_EVENTS": "my_redshift_storage",
        "roleArn": "arn:aws:iam::123456789012:role/my_redshift_role",
        "schema": "atomic",
        "sshTunnel": {
          "bastion": {
            "host": "mybastionhost.com",
            "key": {
              "ec2ParameterStore": {
                "parameterName": "my_ssh_key"
              }
            },
            "passphrase": "my_ssh_passphrase",
            "port": 22,
            "user": "my_ssh_user"
          },
          "destination": {
            "host": "localhost",
            "port": 5439
          },
          "localPort": 5439
        },
        "username": "my_redshift_user"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword or maximum keyword",
      "valid": false,
      "rust_error": "999 is less than the minimum of 1000",
      "python_error": "999 is less than the minimum of 1000\n\nFailed validating 'minimum' in schema['properties']['compRows']:\n    {'description': 'Number of rows to be used as the sample size for '\n                    'compression analysis',\n     'maximum': 1000000000,\n     'minimum': 1000,\n     'type': 'integer'}\n\nOn instance['compRows']:\n    999",
      "data": {
        "blacklistTabular": null,
        "compRows": 999,
        "database": "my_redshift_database",
        "host": "localhost",
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "jdbc": {
          "BlockingRowsMode": 1000,
          "DSILogLevel": 0,
          "DisableIsValidQuery": false,
          "FilterLevel": "INFO",
          "TCPKeepAliveMinutes": 10,
          "loginTimeout": 30,
          "loglevel": 1,
          "socketTimeout": 30,
          "ssl": true,
          "sslMode": "verify-ca",
          "sslRootCert": "/path/to/cert.pem",
          "tcpKeepAlive": true
        },
        "maxError": 100,
        "name": "my_redshift_storage",
        "password": {
          "ec2ParameterStore": {
            "parameterName": "my_redshift_password"
          }
        },
        "port": 5439,
        "processingManifest": {
          "amazonDynamoDb": {
            "tableName": "my_processing_manifest"
          }
        },
        "purpose": "ENRICHED_EVENTS",
        "roleArn": "arn:aws:iam::123456789012:role/my_redshift_role",
        "schema": "atomic",
        "sshTunnel": {
          "bastion": {
            "host": "mybastionhost.com",
            "key": {
              "ec2ParameterStore": {
                "parameterName": "my_ssh_key"
              }
            },
            "passphrase": "my_ssh_passphrase",
            "port": 22,
            "user": "my_ssh_user"
          },
          "destination": {
            "host": "localhost",
            "port": 5439
          },
          "localPort": 5439
        },
        "username": "my_redshift_user"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('extraProperty' was unexpected)",
      "python_error": "Additional properties are not allowed ('extraProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'additionalProperties': False,\n     'description': 'Snowplow Redshift storage configuration',\n     'properties': {'blacklistTabular': {'description': 'List of iglu '\n                                                        'schemas for '\n                                                        'entities that '\n                                                        'should not be '\n                                                        'shredded into TSV '\n                                                        'format',\n                                         'items': {'type': 'string'},\n                                         'type': ['array', 'null']},\n                    'compRows': {'description': 'Number of rows to be used '\n                                                'as the sample size for '\n                                                'compression analysis',\n       .. (33465 more)",
      "data": {
        "blacklistTabular": null,
        "compRows": 100000,
        "database": "my_redshift_database",
        "host": "localhost",
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "jdbc": {
          "BlockingRowsMode": 1000,
          "DSILogLevel": 0,
          "DisableIsValidQuery": false,
          "FilterLevel": "INFO",
          "TCPKeepAliveMinutes": 10,
          "loginTimeout": 30,
          "loglevel": 1,
          "socketTimeout": 30,
          "ssl": true,
          "sslMode": "verify-ca",
          "sslRootCert": "/path/to/cert.pem",
          "tcpKeepAlive": true
        },
        "maxError": 100,
        "name": "my_redshift_storage",
        "password": {
          "ec2ParameterStore": {
            "parameterName": "my_redshift_password"
          }
        },
        "port": 5439,
        "processingManifest": {
          "amazonDynamoDb": {
            "tableName": "my_processing_manifest"
          }
        },
        "purpose": "ENRICHED_EVENTS",
        "roleArn": "arn:aws:iam::123456789012:role/my_redshift_role",
        "schema": "atomic",
        "sshTunnel": {
          "bastion": {
            "host": "mybastionhost.com",
            "key": {
              "ec2ParameterStore": {
                "parameterName": "my_ssh_key"
              }
            },
            "passphrase": "my_ssh_passphrase",
            "port": 22,
            "user": "my_ssh_user"
          },
          "destination": {
            "host": "localhost",
            "port": 5439
          },
          "localPort": 5439
        },
        "username": "my_redshift_user",
        "extraProperty": "extraValue"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "blacklistTabular": [
          "iglu:com.snowplowanalytics.snowplow/contexts/jsonschema/1-0-0"
        ],
        "compRows": 10000,
        "database": "snowplow",
        "host": "localhost",
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "jdbc": {
          "BlockingRowsMode": 1000,
          "DSILogLevel": 2,
          "DisableIsValidQuery": false,
          "FilterLevel": "INFO",
          "TCPKeepAliveMinutes": 10,
          "loginTimeout": 30,
          "loglevel": 1,
          "socketTimeout": 30,
          "ssl": true,
          "sslMode": "verify-full",
          "sslRootCert": "/path/to/ssl/root/cert",
          "tcpKeepAlive": true
        },
        "maxError": 100,
        "name": "Snowplow Redshift Storage",
        "password": {
          "ec2ParameterStore": {
            "parameterName": "snowplow-password"
          }
        },
        "port": 5439,
        "processingManifest": {
          "amazonDynamoDb": {
            "tableName": "snowplow-processing-manifest"
          }
        },
        "purpose": "ENRICHED_EVENTS",
        "roleArn": "arn:aws:iam::123456789012:role/snowplow-loader",
        "schema": "atomic",
        "sshTunnel": {
          "bastion": {
            "host": "bastion-host",
            "key": {
              "ec2ParameterStore": {
                "parameterName": "bastion-ssh-key"
              }
            },
            "passphrase": "bastion-passphrase",
            "port": 22,
            "user": "bastion-user"
          },
          "destination": {
            "host": "localhost",
            "port": 5439
          },
          "localPort": 5439
        },
        "username": "snowplow"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword or maxLength keyword",
      "valid": false,
      "rust_error": "\"a\" is shorter than 3 characters",
      "python_error": "'a' is too short\n\nFailed validating 'minLength' in schema['properties']['roleArn']:\n    {'description': 'IAM Role ARN used to load data from S3',\n     'minLength': 20,\n     'type': 'string'}\n\nOn instance['roleArn']:\n    'a'",
      "data": {
        "blacklistTabular": [
          "iglu:com.snowplowanalytics.snowplow/contexts/jsonschema/1-0-0"
        ],
        "compRows": 10000,
        "database": "snowplow",
        "host": "localhost",
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "jdbc": {
          "BlockingRowsMode": 1000,
          "DSILogLevel": 2,
          "DisableIsValidQuery": false,
          "FilterLevel": "INFO",
          "TCPKeepAliveMinutes": 10,
          "loginTimeout": 30,
          "loglevel": 1,
          "socketTimeout": 30,
          "ssl": true,
          "sslMode": "verify-full",
          "sslRootCert": "/path/to/ssl/root/cert",
          "tcpKeepAlive": true
        },
        "maxError": 100,
        "name": "",
        "password": {
          "ec2ParameterStore": {
            "parameterName": "snowplow-password"
          }
        },
        "port": 5439,
        "processingManifest": {
          "amazonDynamoDb": {
            "tableName": "a"
          }
        },
        "purpose": "ENRICHED_EVENTS",
        "roleArn": "a",
        "schema": "a",
        "sshTunnel": {
          "bastion": {
            "host": "bastion-host",
            "key": {
              "ec2ParameterStore": {
                "parameterName": "bastion-ssh-key"
              }
            },
            "passphrase": "bastion-passphrase",
            "port": 22,
            "user": "bastion-user"
          },
          "destination": {
            "host": "localhost",
            "port": 5439
          },
          "localPort": 5439
        },
        "username": "snowplow"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword or maximum keyword",
      "valid": false,
      "rust_error": "0 is less than the minimum of 1",
      "python_error": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['port']:\n    {'description': 'Redshift database port',\n     'maximum': 65535,\n     'minimum': 1,\n     'type': 'integer'}\n\nOn instance['port']:\n    0",
      "data": {
        "blacklistTabular": [
          "iglu:com.snowplowanalytics.snowplow/contexts/jsonschema/1-0-0"
        ],
        "compRows": 10000,
        "database": "snowplow",
        "host": "localhost",
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "jdbc": {
          "BlockingRowsMode": 1000,
          "DSILogLevel": 2,
          "DisableIsValidQuery": false,
          "FilterLevel": "INFO",
          "TCPKeepAliveMinutes": 10,
          "loginTimeout": 30,
          "loglevel": 1,
          "socketTimeout": 30,
          "ssl": true,
          "sslMode": "verify-full",
          "sslRootCert": "/path/to/ssl/root/cert",
          "tcpKeepAlive": true
        },
        "maxError": 100,
        "name": "Snowplow Redshift Storage",
        "password": {
          "ec2ParameterStore": {
            "parameterName": "snowplow-password"
          }
        },
        "port": 0,
        "processingManifest": {
          "amazonDynamoDb": {
            "tableName": "snowplow-processing-manifest"
          }
        },
        "purpose": "ENRICHED_EVENTS",
        "roleArn": "arn:aws:iam::123456789012:role/snowplow-loader",
        "schema": "atomic",
        "sshTunnel": {
          "bastion": {
            "host": "bastion-host",
            "key": {
              "ec2ParameterStore": {
                "parameterName": "bastion-ssh-key"
              }
            },
            "passphrase": "bastion-passphrase",
            "port": 22,
            "user": "bastion-user"
          },
          "destination": {
            "host": "localhost",
            "port": 5439
          },
          "localPort": 5439
        },
        "username": "snowplow"
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "\"string-instead-of-array\" is not of types \"array\", \"null\"",
      "python_error": "'string-instead-of-array' is not of type 'array', 'null'\n\nFailed validating 'type' in schema['properties']['blacklistTabular']:\n    {'description': 'List of iglu schemas for entities that should not be '\n                    'shredded into TSV format',\n     'items': {'type': 'string'},\n     'type': ['array', 'null']}\n\nOn instance['blacklistTabular']:\n    'string-instead-of-array'",
      "data": {
        "name": "Snowplow Redshift Storage",
        "id": "123e4567-e89b-12d3-a456-426614174000",
        "host": "localhost",
        "database": "snowplow",
        "port": 5439,
        "username": "snowplow",
        "password": {
          "ec2ParameterStore": {
            "parameterName": "snowplow-password"
          }
        },
        "schema": "atomic",
        "sshTunnel": {
          "bastion": {
            "host": "bastion-host",
            "port": 22,
            "user": "bastion-user",
            "passphrase": "bastion-passphrase",
            "key": {
              "ec2ParameterStore": {
                "parameterName": "bastion-ssh-key"
              }
            }
          },
          "destination": {
            "host": "localhost",
            "port": 5439
          },
          "localPort": 5439
        },
        "processingManifest": {
          "amazonDynamoDb": {
            "tableName": "snowplow-processing-manifest"
          }
        },
        "roleArn": "arn:aws:iam::123456789012:role/snowplow-loader",
        "maxError": 100,
        "compRows": 10000,
        "jdbc": {
          "BlockingRowsMode": 1000,
          "DSILogLevel": 2,
          "DisableIsValidQuery": false,
          "FilterLevel": "INFO",
          "TCPKeepAliveMinutes": 10,
          "loginTimeout": 30,
          "loglevel": 1,
          "socketTimeout": 30,
          "ssl": true,
          "sslMode": "verify-full",
          "sslRootCert": "/path/to/ssl/root/cert",
          "tcpKeepAlive": true
        },
        "purpose": "ENRICHED_EVENTS",
        "blacklistTabular": "string-instead-of-array"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('additionalProperties' was unexpected)",
      "python_error": "Additional properties are not allowed ('additionalProperties', 'description', 'properties', 'required', 'self', 'type' were unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'additionalProperties': False,\n     'description': 'Snowplow Redshift storage configuration',\n     'properties': {'blacklistTabular': {'description': 'List of iglu '\n                                                        'schemas for '\n                                                        'entities that '\n                                                        'should not be '\n                                                        'shredded into TSV '\n                                                        'format',\n                                         'items': {'type': 'string'},\n                                         'type': ['array', 'null']},\n                    'compRows': {'description': 'Number of rows to be used '\n                                                'as the sample size for '\n              .. (64894 more)",
      "data": {
        "additionalProperties": false,
        "description": "Snowplow Redshift storage configuration",
        "properties": {
          "blacklistTabular": {
            "description": "List of iglu schemas for entities that should not be shredded into TSV format",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "compRows": {
            "description": "Number of rows to be used as the sample size for compression analysis",
            "maximum": 1000000000,
            "minimum": 1000,
            "type": "integer"
          },
          "database": {
            "description": "Redshift database name",
            "maxLength": 64,
            "minLength": 1,
            "type": "string"
          },
          "host": {
            "anyOf": [
              {
                "format": "hostname"
              },
              {
                "format": "ipv4"
              },
              {
                "format": "ipv6"
              }
            ],
            "description": "Redshift cluster host ('localhost' for enabled SSH Tunnel)",
            "type": "string"
          },
          "id": {
            "_format": "uuid",
            "description": "Machine-readable unique identificator",
            "type": "string"
          },
          "jdbc": {
            "additionalProperties": false,
            "properties": {
              "BlockingRowsMode": {
                "description": "The number of rows to hold in memory",
                "minimum": 0,
                "type": "integer"
              },
              "DSILogLevel": {
                "description": "Amount of detail included in log file",
                "maximum": 6,
                "minimum": 0,
                "type": "integer"
              },
              "DisableIsValidQuery": {
                "description": "Disable detection JDBC driver no longer holding a valid database connection",
                "type": "boolean"
              },
              "FilterLevel": {
                "description": "The minimum severity level of a message that the client processes",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "NOTICE",
                  "WARNING",
                  "LOG",
                  "ERROR"
                ]
              },
              "TCPKeepAliveMinutes": {
                "description": "The threshold for minutes of inactivity before initiating a TCP keepalive transmission",
                "minimum": 0,
                "type": "integer"
              },
              "loginTimeout": {
                "description": "The number of seconds to wait before timing out when connecting to the server",
                "minimum": 0,
                "type": "integer"
              },
              "loglevel": {
                "description": "The amount of logging information output by the driver",
                "maximum": 2,
                "minimum": 0,
                "type": [
                  "integer",
                  "null"
                ]
              },
              "socketTimeout": {
                "description": "The number of seconds to wait during socket read operations before timing out",
                "minimum": 0,
                "type": "integer"
              },
              "ssl": {
                "description": "Whether to use an SSL connection",
                "type": "boolean"
              },
              "sslMode": {
                "description": "Determines how to handle server certificate verification",
                "enum": [
                  "verify-ca",
                  "verify-full"
                ],
                "type": [
                  "string",
                  "null"
                ]
              },
              "sslRootCert": {
                "description": "The full path of a .pem or .crt file containing the trust root Certificate Authority",
                "maxLength": 1024,
                "type": [
                  "string",
                  "null"
                ]
              },
              "tcpKeepAlive": {
                "description": "A value that determines whether TCP keepalives are enabled",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "maxError": {
            "description": "Amount of allowed errors before aborting load",
            "maximum": 100000,
            "minimum": 0,
            "type": "integer"
          },
          "name": {
            "description": "Human-readable storage target name, used only for logging",
            "maxLength": 255,
            "type": "string"
          },
          "password": {
            "description": "Redshift password, either plain-text or encrypted key for EC2 Parameter Storage",
            "properties": {
              "ec2ParameterStore": {
                "description": "EC2 Parameter Storage configuration",
                "properties": {
                  "parameterName": {
                    "description": "EC2 Parameter with encrypted password",
                    "maxLength": 2048,
                    "type": "string"
                  }
                },
                "required": [
                  "parameterName"
                ],
                "type": "object"
              }
            },
            "required": [
              "ec2ParameterStore"
            ],
            "type": [
              "string",
              "object"
            ]
          },
          "port": {
            "description": "Redshift database port",
            "maximum": 65535,
            "minimum": 1,
            "type": "integer"
          },
          "processingManifest": {
            "description": "Optional processing manifest to maintain pipeline state",
            "properties": {
              "amazonDynamoDb": {
                "description": "Configuration for processing manifest on top of DynamoDB - single available implementation",
                "properties": {
                  "tableName": {
                    "description": "DynamoDB table name",
                    "maxLength": 255,
                    "minLength": 3,
                    "type": "string"
                  }
                },
                "required": [
                  "tableName"
                ],
                "type": "object"
              }
            },
            "required": [
              "amazonDynamoDb"
            ],
            "type": [
              "object",
              "null"
            ]
          },
          "purpose": {
            "description": "Kind of data stored in this instance",
            "enum": [
              "ENRICHED_EVENTS"
            ]
          },
          "roleArn": {
            "description": "IAM Role ARN used to load data from S3",
            "minLength": 20,
            "type": "string"
          },
          "schema": {
            "description": "Redshift database schema (e.g. 'atomic')",
            "maxLength": 128,
            "type": "string"
          },
          "sshTunnel": {
            "description": "Optional SSH Tunnel configuration",
            "properties": {
              "bastion": {
                "description": "Bastion host configuration",
                "properties": {
                  "host": {
                    "anyOf": [
                      {
                        "format": "hostname"
                      },
                      {
                        "format": "ipv4"
                      },
                      {
                        "format": "ipv6"
                      }
                    ],
                    "description": "Bastion SSH host",
                    "type": "string"
                  },
                  "key": {
                    "description": "SSH-key stored in EC2 Parameter Storage",
                    "properties": {
                      "ec2ParameterStore": {
                        "properties": {
                          "parameterName": {
                            "maxLength": 2048,
                            "type": "string"
                          }
                        },
                        "required": [
                          "parameterName"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "ec2ParameterStore"
                    ],
                    "type": [
                      "object",
                      "null"
                    ]
                  },
                  "passphrase": {
                    "description": "Plain-text SSH user's passphrase",
                    "maxLength": 2048,
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "port": {
                    "description": "Bastion SSH port",
                    "maximum": 65535,
                    "minimum": 1,
                    "type": "integer"
                  },
                  "user": {
                    "description": "SSH user",
                    "maxLength": 32,
                    "type": "string"
                  }
                },
                "required": [
                  "host",
                  "port",
                  "user",
                  "passphrase",
                  "key"
                ],
                "type": "object"
              },
              "destination": {
                "description": "Database socket inside private network",
                "properties": {
                  "host": {
                    "anyOf": [
                      {
                        "format": "hostname"
                      },
                      {
                        "format": "ipv4"
                      },
                      {
                        "format": "ipv6"
                      }
                    ],
                    "description": "Redshift host inside private network (root-level host should be changed to 'localhost')",
                    "type": "string"
                  },
                  "port": {
                    "description": "Redshift port inside private network (root-level 'port' should be changed to be identical to 'localPort')",
                    "maximum": 65535,
                    "minimum": 1,
                    "type": "integer"
                  }
                },
                "required": [
                  "host",
                  "port"
                ],
                "type": "object"
              },
              "localPort": {
                "description": "Arbitrary port on node, running Loader (shoul be identical to root-level 'port')",
                "maximum": 65535,
                "minimum": 1,
                "type": "integer"
              }
            },
            "required": [
              "bastion",
              "destination",
              "localPort"
            ],
            "type": [
              "object",
              "null"
            ]
          },
          "username": {
            "description": "Redshift user",
            "maxLength": 128,
            "type": "string"
          }
        },
        "required": [
          "name",
          "id",
          "host",
          "database",
          "port",
          "username",
          "password",
          "schema",
          "sshTunnel",
          "processingManifest",
          "roleArn",
          "maxError",
          "compRows",
          "jdbc",
          "purpose"
        ],
        "self": {
          "format": "jsonschema",
          "name": "redshift_config",
          "vendor": "com.snowplowanalytics.snowplow.storage",
          "version": "4-0-0"
        },
        "type": "object"
      }
    }
  ]
}