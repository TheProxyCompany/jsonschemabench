{
  "description": "sample Github_medium/o36457.json",
  "meta": {
    "full_size": 3180,
    "stripped_size": 1281,
    "features": [
      "additionalProperties",
      "enum",
      "items",
      "pattern"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "id",
      "properties",
      "required",
      "type",
      "type:array",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "id": "http://schemas.taskcluster.net/base/v1/api-reference.json#",
    "$schema": "http://json-schema.org/draft-04/schema#",
    "title": "API Reference File",
    "description": "Reference of methods implemented by API",
    "type": "object",
    "properties": {
      "version": {
        "description": "API reference version",
        "enum": [
          0,
          "0.2.0"
        ]
      },
      "$schema": {
        "description": "Link to schema for this reference. That is a link to this very document. Typically used to identify what kind of reference this file is.",
        "title": "Schema Reference",
        "type": "string",
        "_format": "uri"
      },
      "title": {
        "description": "API title in markdown",
        "type": "string"
      },
      "description": {
        "description": "API description in markdown",
        "type": "string"
      },
      "baseUrl": {
        "description": "BaseUrl for all _routes_ described in this document",
        "type": "string",
        "_format": "uri"
      },
      "entries": {
        "type": "array",
        "title": "Entries",
        "description": "Array of methods in this reference",
        "items": {
          "type": "object",
          "properties": {
            "type": {
              "description": "Type of entry, currently only `function`.",
              "type": "string",
              "enum": [
                "function"
              ]
            },
            "method": {
              "description": "HTTP method (verb) used to access the function",
              "type": "string",
              "enum": [
                "get",
                "post",
                "put",
                "head",
                "delete",
                "options",
                "trace",
                "copy",
                "lock",
                "mkcol",
                "move",
                "purge",
                "propfind",
                "proppatch",
                "unlock",
                "report",
                "mkactivity",
                "checkout",
                "merge",
                "m-search",
                "notify",
                "subscribe",
                "unsubscribe",
                "patch",
                "search"
              ]
            },
            "route": {
              "type": "string",
              "description": "Route for the call, note that arguments wrapped with brackets, like `/v1/user/<userId>/` must be replaced. And the route must be appended to the `baseUrl`"
            },
            "args": {
              "type": "array",
              "description": "Arguments from `route` that must be replaced, they'll appear wrapped in brackets inside `route`.",
              "items": {
                "type": "string",
                "description": "Argument that appears in `route` warpped in angle brackets. It must be replaced to call the function."
              }
            },
            "name": {
              "type": "string",
              "description": "Name of the `function` this is a stable identifier for use in auto-generated client libraries"
            },
            "stability": {
              "title": "Stability-Level",
              "description": "Stability level of the API",
              "type": "string",
              "enum": [
                "deprecated",
                "experimental",
                "stable"
              ]
            },
            "scopes": {
              "type": "array",
              "description": "List of scope-sets of which the client must satisfy at least one of the sets of scopes. Not provided if authentication isn't required.",
              "items": {
                "type": "array",
                "description": "A set of scopes that grants access if all the scopes in the set is satisfied.  Scopes must be composed of printable ASCII characters and spaces.",
                "items": {
                  "type": "string",
                  "description": "Scope identifier",
                  "pattern": "^[\\x20-\\x7e]*"
                }
              }
            },
            "input": {
              "type": "string",
              "_format": "uri",
              "description": "JSON schema for input, if input is taken otherwise not present."
            },
            "output": {
              "type": "string",
              "_format": "uri",
              "description": "JSON schema for output, if output is provided otherwise not present."
            },
            "title": {
              "type": "string",
              "description": "Title of API entry"
            },
            "description": {
              "type": "string",
              "description": "Description (ie. documentation) for the API entry"
            }
          },
          "additionalProperties": false,
          "required": [
            "type",
            "method",
            "route",
            "args",
            "name",
            "stability",
            "title",
            "description"
          ]
        }
      }
    },
    "additionalProperties": false,
    "required": [
      "version",
      "$schema",
      "title",
      "description",
      "baseUrl",
      "entries"
    ]
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "version": "0.2.0",
        "$schema": "http://schemas.taskcluster.net/base/v1/api-reference.json#",
        "title": "Example API",
        "description": "This is an example API reference",
        "baseUrl": "https://example.com/api/v1/",
        "entries": [
          {
            "type": "function",
            "method": "get",
            "route": "/users/<userId>/",
            "args": [
              "userId"
            ],
            "name": "getUser",
            "stability": "stable",
            "scopes": [
              [
                "users:get"
              ]
            ],
            "output": "https://example.com/schemas/user.json#",
            "title": "Get User",
            "description": "Get a user by ID"
          },
          {
            "type": "function",
            "method": "post",
            "route": "/users/",
            "args": [],
            "name": "createUser",
            "stability": "experimental",
            "scopes": [
              [
                "users:create"
              ]
            ],
            "input": "https://example.com/schemas/user-create.json#",
            "output": "https://example.com/schemas/user.json#",
            "title": "Create User",
            "description": "Create a new user"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('extraProperty' was unexpected)",
      "python_error": "Additional properties are not allowed ('extraProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['entries']['items']:\n    {'type': 'object',\n     'properties': {'type': {'description': 'Type of entry, currently only '\n                                            '`function`.',\n                             'type': 'string',\n                             'enum': ['function']},\n                    'method': {'description': 'HTTP method (verb) used to '\n                                              'access the function',\n                               'type': 'string',\n                               'enum': ['get',\n                                        'post',\n                                        'put',\n                                        'head',\n                                        'delete',\n                                        'options',\n                                        'trace',\n                                        'copy',\n                          .. (6309 more)",
      "data": {
        "version": "0.2.0",
        "$schema": "http://schemas.taskcluster.net/base/v1/api-reference.json#",
        "title": "Example API",
        "description": "This is an example API reference",
        "baseUrl": "https://example.com/api/v1/",
        "entries": [
          {
            "type": "function",
            "method": "get",
            "route": "/users/<userId>/",
            "args": [
              "userId"
            ],
            "name": "getUser",
            "stability": "stable",
            "scopes": [
              [
                "users:get"
              ]
            ],
            "output": "https://example.com/schemas/user.json#",
            "title": "Get User",
            "description": "Get a user by ID"
          },
          {
            "type": "function",
            "method": "post",
            "route": "/users/",
            "args": [],
            "name": "createUser",
            "stability": "stable",
            "scopes": [
              [
                "users:create"
              ]
            ],
            "input": "https://example.com/schemas/user-create.json#",
            "output": "https://example.com/schemas/user.json#",
            "title": "Create User",
            "description": "Create a new user",
            "extraProperty": "This is an extra property that is not allowed by the schema"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('extraProperty' was unexpected)",
      "python_error": "Additional properties are not allowed ('extraProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['entries']['items']:\n    {'type': 'object',\n     'properties': {'type': {'description': 'Type of entry, currently only '\n                                            '`function`.',\n                             'type': 'string',\n                             'enum': ['function']},\n                    'method': {'description': 'HTTP method (verb) used to '\n                                              'access the function',\n                               'type': 'string',\n                               'enum': ['get',\n                                        'post',\n                                        'put',\n                                        'head',\n                                        'delete',\n                                        'options',\n                                        'trace',\n                                        'copy',\n                          .. (6193 more)",
      "data": {
        "version": "0.2.0",
        "$schema": "http://schemas.taskcluster.net/base/v1/api-reference.json#",
        "title": "Example API",
        "description": "This is an example API reference",
        "baseUrl": "https://example.com/api/v1/",
        "entries": [
          {
            "type": "function",
            "method": "get",
            "route": "/users/<userId>/",
            "args": [
              "userId"
            ],
            "name": "getUser",
            "stability": "stable",
            "scopes": [
              [
                "users:get"
              ]
            ],
            "output": "https://example.com/schemas/user.json#",
            "title": "Get User",
            "description": "Get a user by ID",
            "extraProperty": "This is an extra property"
          },
          {
            "type": "function",
            "method": "post",
            "route": "/users/",
            "args": [],
            "name": "createUser",
            "stability": "experimental",
            "scopes": [
              [
                "users:create"
              ]
            ],
            "input": "https://example.com/schemas/user-create.json#",
            "output": "https://example.com/schemas/user.json#",
            "title": "Create User",
            "description": "Create a new user"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('extraProperty' was unexpected)",
      "python_error": "Additional properties are not allowed ('newStability' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['entries']['items']:\n    {'type': 'object',\n     'properties': {'type': {'description': 'Type of entry, currently only '\n                                            '`function`.',\n                             'type': 'string',\n                             'enum': ['function']},\n                    'method': {'description': 'HTTP method (verb) used to '\n                                              'access the function',\n                               'type': 'string',\n                               'enum': ['get',\n                                        'post',\n                                        'put',\n                                        'head',\n                                        'delete',\n                                        'options',\n                                        'trace',\n                                        'copy',\n                           .. (6258 more)",
      "data": {
        "version": "0.2.0",
        "$schema": "http://schemas.taskcluster.net/base/v1/api-reference.json#",
        "title": "Example API",
        "description": "This is an example API reference",
        "baseUrl": "https://example.com/api/v1/",
        "entries": [
          {
            "type": "function",
            "method": "get",
            "route": "/users/<userId>/",
            "args": [
              "userId"
            ],
            "name": "getUser",
            "stability": "stable",
            "scopes": [
              [
                "users:get"
              ]
            ],
            "output": "https://example.com/schemas/user.json#",
            "title": "Get User",
            "description": "Get a user by ID",
            "extraProperty": "Extra value"
          },
          {
            "type": "function",
            "method": "post",
            "route": "/users/",
            "args": [],
            "name": "createUser",
            "stability": "newStability",
            "newStability": "not one of the allowed values",
            "scopes": [
              [
                "users:create"
              ]
            ],
            "input": "https://example.com/schemas/user-create.json#",
            "output": "https://example.com/schemas/user.json#",
            "title": "Create User",
            "description": "Create a new user"
          }
        ]
      }
    }
  ]
}