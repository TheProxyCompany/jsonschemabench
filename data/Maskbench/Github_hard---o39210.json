{
  "description": "sample Github_hard/o39210.json",
  "meta": {
    "full_size": 9776,
    "stripped_size": 7097,
    "features": [
      "$ref",
      "@minmaxInteger",
      "@minmaxItems",
      "@minmaxLength",
      "@siblingKeys",
      "additionalProperties",
      "enum",
      "items",
      "oneOf"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "maxItems",
      "maxLength",
      "minItems",
      "minLength",
      "minimum",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "description": "Representation of Wilma stub configuration possibilities",
    "type": "object",
    "properties": {
      "wilmaStubConfiguration": {
        "type": "object",
        "properties": {
          "groupName": {
            "description": "The name of the Stub Configuration, if it is missing, the name will be considered as: 'Default'",
            "type": "string",
            "minLength": 1,
            "maxLength": 128,
            "default": "Default"
          },
          "active": {
            "description": "Whether the Stub Configuration is active or not, by default: true",
            "type": "boolean",
            "default": true
          },
          "sequenceDescriptors": {
            "$ref": "#/definitions/sequenceDescriptorsDefinition"
          },
          "dialogDescriptors": {
            "$ref": "#/definitions/dialogDescriptorsDefinition"
          },
          "templates": {
            "$ref": "#/definitions/templateArrayDefinition"
          },
          "interceptors": {
            "$ref": "#/definitions/interceptorDefinition"
          },
          "conditionSets": {
            "$ref": "#/definitions/conditionSetArrayDefinition"
          },
          "responseFormatterSets": {
            "$ref": "#/definitions/responseFormatterSetsArrayDefinition"
          }
        },
        "additionalProperties": false
      }
    },
    "additionalProperties": false,
    "required": [
      "wilmaStubConfiguration"
    ],
    "definitions": {
      "uniqueNameDefinition": {
        "description": "Object that hold a name of the object, and in the case object is in an array, its name is unique",
        "type": "string",
        "minLength": 1,
        "maxLength": 512
      },
      "commentDefinition": {
        "description": "Object that hold an optional comment text",
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "classNameDefinition": {
        "description": "Class name object",
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "parameterDefinition": {
        "description": "Parameter list of a specific object (like: interceptor, condition descriptor etc).",
        "type": "array",
        "items": {
          "description": "Every parameter in the list has a name-value string pair.",
          "type": "object",
          "properties": {
            "name": {
              "description": "",
              "type": "string",
              "minLength": 1,
              "maxLength": 1024
            },
            "value": {
              "description": "",
              "type": "string",
              "minLength": 1,
              "maxLength": 1024
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "value"
          ]
        },
        "minItems": 1,
        "maxItems": 25
      },
      "conditionSetInvokerDefinition": {
        "description": "Object that holds a condition set invoker",
        "type": "object",
        "properties": {
          "conditionSetInvoker": {
            "$ref": "#/definitions/uniqueNameDefinition"
          }
        },
        "additionalProperties": false,
        "required": [
          "conditionSetInvoker"
        ]
      },
      "conditionDefinition": {
        "description": "Describes a single condition that should be evaluated, its result is a boolean value",
        "type": "object",
        "properties": {
          "condition": {
            "type": "object",
            "properties": {
              "class": {
                "$ref": "#/definitions/classNameDefinition"
              },
              "negate": {
                "type": "boolean",
                "default": false
              },
              "parameters": {
                "$ref": "#/definitions/parameterDefinition"
              }
            },
            "additionalProperties": false,
            "required": [
              "class"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "condition"
        ]
      },
      "conditionArrayDefinition": {
        "description": "Array of conditions.",
        "type": "array",
        "items": {
          "$ref": "#/definitions/conditionDefinition"
        },
        "minItems": 1,
        "maxItems": 25
      },
      "logicalConditionDefinition": {
        "description": "Logical evaluation on condition(s), like 'and', 'or', and 'not'",
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "and": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/conditionDefinition"
                    },
                    {
                      "$ref": "#/definitions/conditionSetInvokerDefinition"
                    },
                    {
                      "$ref": "#/definitions/logicalConditionDefinition"
                    }
                  ]
                },
                "minItems": 1
              }
            },
            "additionalProperties": false,
            "required": [
              "and"
            ]
          },
          {
            "type": "object",
            "properties": {
              "or": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/definitions/conditionDefinition"
                    },
                    {
                      "$ref": "#/definitions/conditionSetInvokerDefinition"
                    },
                    {
                      "$ref": "#/definitions/logicalConditionDefinition"
                    }
                  ]
                },
                "minItems": 1
              }
            },
            "additionalProperties": false,
            "required": [
              "or"
            ]
          },
          {
            "type": "object",
            "properties": {
              "not": {
                "type": "object",
                "oneOf": [
                  {
                    "$ref": "#/definitions/conditionDefinition"
                  },
                  {
                    "$ref": "#/definitions/conditionSetInvokerDefinition"
                  },
                  {
                    "$ref": "#/definitions/logicalConditionDefinition"
                  }
                ]
              }
            },
            "additionalProperties": false,
            "required": [
              "not"
            ]
          }
        ]
      },
      "conditionDescriptorDefinition": {
        "description": "Describes a complex condition which should be evaluated by the switch engine",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/definitions/conditionDefinition"
          },
          {
            "$ref": "#/definitions/conditionSetInvokerDefinition"
          },
          {
            "$ref": "#/definitions/logicalConditionDefinition"
          }
        ]
      },
      "templateDefinition": {
        "description": "Describes a single response message template",
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/definitions/uniqueNameDefinition"
          },
          "type": {
            "description": "Type of the resource. In case of text, it is embedded (resource contains the value), other case (*file) name of the file",
            "type": "string",
            "enum": [
              "xml",
              "text",
              "html",
              "json",
              "xmlFile",
              "textFile",
              "htmlFile",
              "jsonFile",
              "external"
            ]
          },
          "resource": {
            "description": "Resource is always a String - meaning depends on the type, for example if that is 'external', then resource is a class name",
            "type": "string",
            "minLength": 1
          }
        },
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "resource"
        ]
      },
      "templateArrayDefinition": {
        "description": "Array of templates.",
        "type": "array",
        "items": {
          "$ref": "#/definitions/templateDefinition"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "responseFormatterSetInvokerDefinition": {
        "description": "Object that holds a response formatter set invoker",
        "type": "object",
        "properties": {
          "responseFormatterSetInvoker": {
            "$ref": "#/definitions/uniqueNameDefinition"
          }
        },
        "additionalProperties": false,
        "required": [
          "responseFormatterSetInvoker"
        ]
      },
      "responseFormatterDefinition": {
        "description": "Response formatter",
        "type": "object",
        "properties": {
          "responseFormatter": {
            "type": "object",
            "properties": {
              "class": {
                "$ref": "#/definitions/classNameDefinition"
              },
              "parameters": {
                "$ref": "#/definitions/parameterDefinition"
              }
            },
            "additionalProperties": false,
            "required": [
              "class"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "responseFormatter"
        ]
      },
      "responseFormatterSetArrayDefinition": {
        "description": "Describes the formatter method(s) applied on the specific response",
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/responseFormatterDefinition"
            },
            {
              "$ref": "#/definitions/responseFormatterSetInvokerDefinition"
            }
          ]
        },
        "minItems": 1,
        "maxItems": 25
      },
      "responseDescriptorDefinition": {
        "description": "Describes what answer should be sent back, and in case a template is used, what method should be used to make it up-to-date",
        "type": "object",
        "properties": {
          "delay": {
            "description": "Optional, default value is 0, delay of the response in seconds, 0 means no delay",
            "type": "integer",
            "default": 0,
            "minimum": 0
          },
          "code": {
            "description": "Optional, response code, default value is 200 (here E500 and others can be specified)",
            "type": "integer",
            "default": 200,
            "minimum": 200
          },
          "mimeType": {
            "description": "Describes the response content type",
            "type": "string"
          },
          "templateName": {
            "$ref": "#/definitions/uniqueNameDefinition"
          },
          "responseFormatterSet": {
            "$ref": "#/definitions/responseFormatterSetArrayDefinition"
          },
          "sequenceDescriptorName": {
            "$ref": "#/definitions/uniqueNameDefinition"
          }
        },
        "additionalProperties": false,
        "required": [
          "mimeType",
          "templateName"
        ]
      },
      "responseFormatterSetsDefinition": {
        "description": "An array of response formatter sets",
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/definitions/uniqueNameDefinition"
          },
          "responseFormatterSet": {
            "$ref": "#/definitions/responseFormatterSetArrayDefinition"
          }
        },
        "additionalProperties": false,
        "required": [
          "name",
          "responseFormatterSet"
        ],
        "minItems": 1
      },
      "responseFormatterSetsArrayDefinition": {
        "description": "Array of response Formatter sets.",
        "type": "array",
        "items": {
          "$ref": "#/definitions/responseFormatterSetsDefinition"
        },
        "minItems": 1,
        "maxItems": 25
      },
      "dialogDescriptorsDefinition": {
        "description": "Dialog Descriptor Array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/uniqueNameDefinition"
            },
            "usage": {
              "type": "string",
              "enum": [
                "always",
                "timeout",
                "hitCount",
                "disabled"
              ],
              "default": "always"
            },
            "validityValue": {
              "description": "When usage is 'timeout', after a timeout (specified in minutes in validityValue), the node will be disabled",
              "type": "integer",
              "minimum": 0
            },
            "comment": {
              "$ref": "#/definitions/commentDefinition"
            },
            "conditionDescriptor": {
              "$ref": "#/definitions/conditionDescriptorDefinition"
            },
            "responseDescriptor": {
              "$ref": "#/definitions/responseDescriptorDefinition"
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "conditionDescriptor",
            "responseDescriptor"
          ]
        },
        "minItems": 1,
        "maxItems": 25
      },
      "interceptorDefinition": {
        "description": "Interceptors",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the interceptor",
              "type": "string",
              "minLength": 1,
              "maxLength": 512
            },
            "class": {
              "description": "The name of the interceptor class, will be used to load the class itself",
              "type": "string",
              "minLength": 1,
              "maxLength": 1024
            },
            "parameters": {
              "$ref": "#/definitions/parameterDefinition"
            }
          },
          "required": [
            "name",
            "class"
          ]
        },
        "minItems": 1
      },
      "conditionSetDefinition": {
        "description": "Set of conditions",
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/definitions/uniqueNameDefinition"
          },
          "conditionDescriptor": {
            "$ref": "#/definitions/conditionDescriptorDefinition"
          }
        },
        "additionalProperties": false,
        "required": [
          "name",
          "conditionDescriptor"
        ],
        "minItems": 1
      },
      "conditionSetArrayDefinition": {
        "description": "Array of condition sets.",
        "type": "array",
        "items": {
          "$ref": "#/definitions/conditionSetDefinition"
        },
        "minItems": 1,
        "maxItems": 25
      },
      "sequenceDescriptorsDefinition": {
        "description": "Sequence Descriptor Array",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/definitions/uniqueNameDefinition"
            },
            "class": {
              "$ref": "#/definitions/classNameDefinition"
            },
            "timeout": {
              "description": "Timeout in milliseconds",
              "type": "integer"
            },
            "conditionDescriptor": {
              "$ref": "#/definitions/conditionDescriptorDefinition"
            },
            "dialogDescriptorNames": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/definitions/uniqueNameDefinition"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              },
              "minItems": 1,
              "maxItems": 50
            },
            "parameters": {
              "$ref": "#/definitions/parameterDefinition"
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "class"
          ]
        },
        "minItems": 1,
        "maxItems": 25
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "wilmaStubConfiguration": {
          "groupName": "Example Group",
          "active": true,
          "sequenceDescriptors": [
            {
              "name": "Sequence Descriptor 1",
              "class": "com.example.SequenceDescriptorClass",
              "timeout": 1000,
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.ConditionClass",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param1",
                      "value": "value1"
                    },
                    {
                      "name": "param2",
                      "value": "value2"
                    }
                  ]
                }
              },
              "dialogDescriptorNames": [
                {
                  "name": "Dialog Descriptor 1"
                },
                {
                  "name": "Dialog Descriptor 2"
                }
              ],
              "parameters": [
                {
                  "name": "param3",
                  "value": "value3"
                },
                {
                  "name": "param4",
                  "value": "value4"
                }
              ]
            }
          ],
          "dialogDescriptors": [
            {
              "name": "Dialog Descriptor 1",
              "usage": "always",
              "validityValue": 10,
              "comment": "This is a comment",
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.ConditionClass",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param5",
                      "value": "value5"
                    },
                    {
                      "name": "param6",
                      "value": "value6"
                    }
                  ]
                }
              },
              "responseDescriptor": {
                "delay": 5,
                "code": 200,
                "mimeType": "application/json",
                "templateName": "Template 1",
                "responseFormatterSet": [
                  {
                    "responseFormatter": {
                      "class": "com.example.ResponseFormatterClass",
                      "parameters": [
                        {
                          "name": "param7",
                          "value": "value7"
                        },
                        {
                          "name": "param8",
                          "value": "value8"
                        }
                      ]
                    }
                  }
                ],
                "sequenceDescriptorName": "Sequence Descriptor 1"
              }
            }
          ],
          "templates": [
            {
              "name": "Template 1",
              "type": "json",
              "resource": "{\"key\":\"value\"}"
            }
          ],
          "interceptors": [
            {
              "name": "Interceptor 1",
              "class": "com.example.InterceptorClass",
              "parameters": [
                {
                  "name": "param9",
                  "value": "value9"
                },
                {
                  "name": "param10",
                  "value": "value10"
                }
              ]
            }
          ],
          "conditionSets": [
            {
              "name": "Condition Set 1",
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.ConditionClass",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param11",
                      "value": "value11"
                    },
                    {
                      "name": "param12",
                      "value": "value12"
                    }
                  ]
                }
              }
            }
          ],
          "responseFormatterSets": [
            {
              "name": "Response Formatter Set 1",
              "responseFormatterSet": [
                {
                  "responseFormatter": {
                    "class": "com.example.ResponseFormatterClass",
                    "parameters": [
                      {
                        "name": "param13",
                        "value": "value13"
                      },
                      {
                        "name": "param14",
                        "value": "value14"
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "wilmaStubConfiguration": {
          "groupName": "Example Group",
          "active": true,
          "sequenceDescriptors": [
            {
              "name": "Sequence Descriptor 1",
              "class": "com.example.SequenceDescriptor",
              "timeout": 1000,
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param1",
                      "value": "value1"
                    },
                    {
                      "name": "param2",
                      "value": "value2"
                    }
                  ]
                }
              },
              "dialogDescriptorNames": [
                {
                  "name": "Dialog Descriptor 1"
                },
                {
                  "name": "Dialog Descriptor 2"
                }
              ],
              "parameters": [
                {
                  "name": "param3",
                  "value": "value3"
                },
                {
                  "name": "param4",
                  "value": "value4"
                }
              ]
            }
          ],
          "dialogDescriptors": [
            {
              "name": "Dialog Descriptor 1",
              "usage": "always",
              "validityValue": 10,
              "comment": "This is a comment",
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param5",
                      "value": "value5"
                    },
                    {
                      "name": "param6",
                      "value": "value6"
                    }
                  ]
                }
              },
              "responseDescriptor": {
                "delay": 5,
                "code": 200,
                "mimeType": "application/json",
                "templateName": "Template 1",
                "responseFormatterSet": [
                  {
                    "responseFormatter": {
                      "class": "com.example.ResponseFormatter",
                      "parameters": [
                        {
                          "name": "param7",
                          "value": "value7"
                        },
                        {
                          "name": "param8",
                          "value": "value8"
                        }
                      ]
                    }
                  }
                ],
                "sequenceDescriptorName": "Sequence Descriptor 1"
              }
            }
          ],
          "templates": [
            {
              "name": "Template 1",
              "type": "json",
              "resource": "{\"key\":\"value\"}"
            }
          ],
          "interceptors": [
            {
              "name": "Interceptor 1",
              "class": "com.example.Interceptor",
              "parameters": [
                {
                  "name": "param9",
                  "value": "value9"
                },
                {
                  "name": "param10",
                  "value": "value10"
                }
              ]
            }
          ],
          "conditionSets": [
            {
              "name": "Condition Set 1",
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param11",
                      "value": "value11"
                    },
                    {
                      "name": "param12",
                      "value": "value12"
                    }
                  ]
                }
              }
            }
          ],
          "responseFormatterSets": [
            {
              "name": "Response Formatter Set 1",
              "responseFormatterSet": [
                {
                  "responseFormatter": {
                    "class": "com.example.ResponseFormatter",
                    "parameters": [
                      {
                        "name": "param13",
                        "value": "value13"
                      },
                      {
                        "name": "param14",
                        "value": "value14"
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword",
      "valid": false,
      "rust_error": "-1 is less than the minimum of 0",
      "python_error": "-1 is less than the minimum of 0\n\nFailed validating 'minimum' in schema['properties']['wilmaStubConfiguration']['properties']['dialogDescriptors']['items']['properties']['validityValue']:\n    {'description': \"When usage is 'timeout', after a timeout (specified \"\n                    'in minutes in validityValue), the node will be '\n                    'disabled',\n     'type': 'integer',\n     'minimum': 0}\n\nOn instance['wilmaStubConfiguration']['dialogDescriptors'][0]['validityValue']:\n    -1",
      "data": {
        "wilmaStubConfiguration": {
          "groupName": "Example Group",
          "active": true,
          "sequenceDescriptors": [
            {
              "name": "Sequence Descriptor 1",
              "class": "com.example.SequenceDescriptor",
              "timeout": -1,
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param1",
                      "value": "value1"
                    },
                    {
                      "name": "param2",
                      "value": "value2"
                    }
                  ]
                }
              },
              "dialogDescriptorNames": [
                {
                  "name": "Dialog Descriptor 1"
                },
                {
                  "name": "Dialog Descriptor 2"
                }
              ],
              "parameters": [
                {
                  "name": "param3",
                  "value": "value3"
                },
                {
                  "name": "param4",
                  "value": "value4"
                }
              ]
            }
          ],
          "dialogDescriptors": [
            {
              "name": "Dialog Descriptor 1",
              "usage": "always",
              "validityValue": -1,
              "comment": "This is a comment",
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param5",
                      "value": "value5"
                    },
                    {
                      "name": "param6",
                      "value": "value6"
                    }
                  ]
                }
              },
              "responseDescriptor": {
                "delay": -1,
                "code": 200,
                "mimeType": "application/json",
                "templateName": "Template 1",
                "responseFormatterSet": [
                  {
                    "responseFormatter": {
                      "class": "com.example.ResponseFormatter",
                      "parameters": [
                        {
                          "name": "param7",
                          "value": "value7"
                        },
                        {
                          "name": "param8",
                          "value": "value8"
                        }
                      ]
                    }
                  }
                ],
                "sequenceDescriptorName": "Sequence Descriptor 1"
              }
            }
          ],
          "templates": [
            {
              "name": "Template 1",
              "type": "json",
              "resource": "{\"key\":\"value\"}"
            }
          ],
          "interceptors": [
            {
              "name": "Interceptor 1",
              "class": "com.example.Interceptor",
              "parameters": [
                {
                  "name": "param9",
                  "value": "value9"
                },
                {
                  "name": "param10",
                  "value": "value10"
                }
              ]
            }
          ],
          "conditionSets": [
            {
              "name": "Condition Set 1",
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param11",
                      "value": "value11"
                    },
                    {
                      "name": "param12",
                      "value": "value12"
                    }
                  ]
                }
              }
            }
          ],
          "responseFormatterSets": [
            {
              "name": "Response Formatter Set 1",
              "responseFormatterSet": [
                {
                  "responseFormatter": {
                    "class": "com.example.ResponseFormatter",
                    "parameters": [
                      {
                        "name": "param13",
                        "value": "value13"
                      },
                      {
                        "name": "param14",
                        "value": "value14"
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "{\"condition\":{\"class\":\"com.example.Condition\",\"negate\":false,\"parameters\":[{\"name\":\"param13\",\"value\":\"value13\"},{\"name\":\"param14\",\"value\":\"value14\"}]},\"and\":[],\"or\":[]} is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "[] should be non-empty\n\nFailed validating 'minItems' in schema[0]['properties']['and']:\n    {'type': 'array',\n     'items': {'oneOf': [{'$ref': '#/definitions/conditionDefinition'},\n                         {'$ref': '#/definitions/conditionSetInvokerDefinition'},\n                         {'$ref': '#/definitions/logicalConditionDefinition'}]},\n     'minItems': 1}\n\nOn instance['and']:\n    []",
      "data": {
        "wilmaStubConfiguration": {
          "groupName": "Example Group",
          "active": true,
          "sequenceDescriptors": [
            {
              "name": "Sequence Descriptor 1",
              "class": "com.example.SequenceDescriptor",
              "timeout": 1000,
              "conditionDescriptor": {
                "and": [
                  {
                    "condition": {
                      "class": "com.example.Condition",
                      "negate": false,
                      "parameters": [
                        {
                          "name": "param1",
                          "value": "value1"
                        },
                        {
                          "name": "param2",
                          "value": "value2"
                        }
                      ]
                    }
                  },
                  {
                    "or": [
                      {
                        "condition": {
                          "class": "com.example.Condition",
                          "negate": false,
                          "parameters": [
                            {
                              "name": "param3",
                              "value": "value3"
                            },
                            {
                              "name": "param4",
                              "value": "value4"
                            }
                          ]
                        }
                      }
                    ]
                  }
                ]
              },
              "dialogDescriptorNames": [
                {
                  "name": "Dialog Descriptor 1"
                },
                {
                  "name": "Dialog Descriptor 2"
                }
              ],
              "parameters": [
                {
                  "name": "param5",
                  "value": "value5"
                },
                {
                  "name": "param6",
                  "value": "value6"
                }
              ]
            }
          ],
          "dialogDescriptors": [
            {
              "name": "Dialog Descriptor 1",
              "usage": "always",
              "validityValue": 10,
              "comment": "This is a comment",
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param7",
                      "value": "value7"
                    },
                    {
                      "name": "param8",
                      "value": "value8"
                    }
                  ]
                }
              },
              "responseDescriptor": {
                "delay": 5,
                "code": 200,
                "mimeType": "application/json",
                "templateName": "Template 1",
                "responseFormatterSet": [
                  {
                    "responseFormatter": {
                      "class": "com.example.ResponseFormatter",
                      "parameters": [
                        {
                          "name": "param9",
                          "value": "value9"
                        },
                        {
                          "name": "param10",
                          "value": "value10"
                        }
                      ]
                    }
                  }
                ],
                "sequenceDescriptorName": "Sequence Descriptor 1"
              }
            }
          ],
          "templates": [
            {
              "name": "Template 1",
              "type": "json",
              "resource": "{\"key\":\"value\"}"
            }
          ],
          "interceptors": [
            {
              "name": "Interceptor 1",
              "class": "com.example.Interceptor",
              "parameters": [
                {
                  "name": "param11",
                  "value": "value11"
                },
                {
                  "name": "param12",
                  "value": "value12"
                }
              ]
            }
          ],
          "conditionSets": [
            {
              "name": "Condition Set 1",
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param13",
                      "value": "value13"
                    },
                    {
                      "name": "param14",
                      "value": "value14"
                    }
                  ]
                },
                "and": [],
                "or": []
              }
            }
          ],
          "responseFormatterSets": [
            {
              "name": "Response Formatter Set 1",
              "responseFormatterSet": [
                {
                  "responseFormatter": {
                    "class": "com.example.ResponseFormatter",
                    "parameters": [
                      {
                        "name": "param15",
                        "value": "value15"
                      },
                      {
                        "name": "param16",
                        "value": "value16"
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword or maxLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['wilmaStubConfiguration']['properties']['groupName']:\n    {'description': 'The name of the Stub Configuration, if it is missing, '\n                    \"the name will be considered as: 'Default'\",\n     'type': 'string',\n     'minLength': 1,\n     'maxLength': 128,\n     'default': 'Default'}\n\nOn instance['wilmaStubConfiguration']['groupName']:\n    ''",
      "data": {
        "wilmaStubConfiguration": {
          "groupName": "",
          "active": true,
          "sequenceDescriptors": [
            {
              "name": "Sequence Descriptor 1",
              "class": "com.example.SequenceDescriptor",
              "timeout": 1000,
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param1",
                      "value": "value1"
                    },
                    {
                      "name": "param2",
                      "value": "value2"
                    }
                  ]
                }
              },
              "dialogDescriptorNames": [
                {
                  "name": "Dialog Descriptor 1"
                },
                {
                  "name": "Dialog Descriptor 2"
                }
              ],
              "parameters": [
                {
                  "name": "param3",
                  "value": "value3"
                },
                {
                  "name": "param4",
                  "value": "value4"
                }
              ]
            }
          ],
          "dialogDescriptors": [
            {
              "name": "Dialog Descriptor 1",
              "usage": "always",
              "validityValue": 10,
              "comment": "This is a comment",
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param5",
                      "value": "value5"
                    },
                    {
                      "name": "param6",
                      "value": "value6"
                    }
                  ]
                }
              },
              "responseDescriptor": {
                "delay": 5,
                "code": 200,
                "mimeType": "application/json",
                "templateName": "Template 1",
                "responseFormatterSet": [
                  {
                    "responseFormatter": {
                      "class": "com.example.ResponseFormatter",
                      "parameters": [
                        {
                          "name": "param7",
                          "value": "value7"
                        },
                        {
                          "name": "param8",
                          "value": "value8"
                        }
                      ]
                    }
                  }
                ],
                "sequenceDescriptorName": "Sequence Descriptor 1"
              }
            }
          ],
          "templates": [
            {
              "name": "Template 1",
              "type": "json",
              "resource": "{\"key\":\"value\"}"
            }
          ],
          "interceptors": [
            {
              "name": "Interceptor 1",
              "class": "com.example.Interceptor",
              "parameters": [
                {
                  "name": "param9",
                  "value": "value9"
                },
                {
                  "name": "param10",
                  "value": "value10"
                }
              ]
            }
          ],
          "conditionSets": [
            {
              "name": "Condition Set 1",
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": [
                    {
                      "name": "param11",
                      "value": "value11"
                    },
                    {
                      "name": "param12",
                      "value": "value12"
                    }
                  ]
                }
              }
            }
          ],
          "responseFormatterSets": [
            {
              "name": "Response Formatter Set 1",
              "responseFormatterSet": [
                {
                  "responseFormatter": {
                    "class": "com.example.ResponseFormatter",
                    "parameters": [
                      {
                        "name": "param13",
                        "value": "value13"
                      },
                      {
                        "name": "param14",
                        "value": "value14"
                      }
                    ]
                  }
                }
              ]
            }
          ]
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['wilmaStubConfiguration']['properties']['groupName']:\n    {'description': 'The name of the Stub Configuration, if it is missing, '\n                    \"the name will be considered as: 'Default'\",\n     'type': 'string',\n     'minLength': 1,\n     'maxLength': 128,\n     'default': 'Default'}\n\nOn instance['wilmaStubConfiguration']['groupName']:\n    ''",
      "data": {
        "wilmaStubConfiguration": {
          "groupName": "",
          "active": true,
          "sequenceDescriptors": [
            {
              "name": "Sequence Descriptor 1",
              "class": "com.example.SequenceDescriptor",
              "timeout": -1,
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": []
                }
              },
              "dialogDescriptorNames": [
                {
                  "name": "Dialog Descriptor 1"
                },
                {
                  "name": "Dialog Descriptor 2"
                }
              ],
              "parameters": [
                {
                  "name": "param3",
                  "value": ""
                },
                {
                  "name": "param4",
                  "value": "value4"
                }
              ]
            }
          ],
          "dialogDescriptors": [
            {
              "name": "Dialog Descriptor 1",
              "usage": "always",
              "validityValue": -10,
              "comment": "",
              "conditionDescriptor": {
                "condition": {
                  "class": "com.example.Condition",
                  "negate": false,
                  "parameters": []
                }
              },
              "responseDescriptor": {
                "delay": -5,
                "code": 199,
                "mimeType": "",
                "templateName": "",
                "responseFormatterSet": [],
                "sequenceDescriptorName": "Sequence Descriptor 1"
              }
            }
          ],
          "templates": [
            {
              "name": "Template 1",
              "type": "",
              "resource": ""
            }
          ],
          "interceptors": [
            {
              "name": "Interceptor 1",
              "class": "",
              "parameters": []
            }
          ],
          "conditionSets": [
            {
              "name": "Condition Set 1",
              "conditionDescriptor": {
                "condition": {
                  "class": "",
                  "negate": false,
                  "parameters": []
                }
              }
            }
          ],
          "responseFormatterSets": [
            {
              "name": "Response Formatter Set 1",
              "responseFormatterSet": []
            }
          ]
        }
      }
    }
  ]
}