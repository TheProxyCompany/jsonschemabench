{
  "description": "sample Github_medium/o41471.json",
  "meta": {
    "full_size": 552,
    "stripped_size": 477,
    "features": [
      "enum"
    ],
    "raw_features": [
      "$schema",
      "properties",
      "required",
      "type",
      "type:boolean",
      "type:object"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "required": [
      "config",
      "inputs"
    ],
    "type": "object",
    "properties": {
      "inputs": {
        "required": [
          "bvec",
          "bval",
          "dwi"
        ],
        "type": "object",
        "properties": {
          "bvec": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bvec"
                ]
              }
            }
          },
          "bval": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "bval"
                ]
              }
            }
          },
          "dwi": {
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "nifti"
                ]
              }
            }
          }
        }
      },
      "config": {
        "required": [
          "doNorm"
        ],
        "type": "object",
        "properties": {
          "doNorm": {
            "default": true,
            "type": "boolean"
          }
        }
      }
    },
    "title": "Invocation manifest for SCITRAN: DWI Split Shells"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "inputs": {
          "bvec": {
            "type": "bvec"
          },
          "bval": {
            "type": "bval"
          },
          "dwi": {
            "type": "nifti"
          }
        },
        "config": {
          "doNorm": true
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"yes\" is not of type \"boolean\"",
      "python_error": "'yes' is not of type 'boolean'\n\nFailed validating 'type' in schema['properties']['config']['properties']['doNorm']:\n    {'default': True, 'type': 'boolean'}\n\nOn instance['config']['doNorm']:\n    'yes'",
      "data": {
        "config": {
          "doNorm": "yes"
        },
        "inputs": {
          "bvec": {
            "type": "bvec"
          },
          "bval": {
            "type": "bval"
          },
          "dwi": {
            "type": "nifti"
          }
        }
      }
    }
  ]
}