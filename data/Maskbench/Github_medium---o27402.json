{
  "description": "sample Github_medium/o27402.json",
  "meta": {
    "full_size": 1119,
    "stripped_size": 1065,
    "features": [
      "$ref",
      "@minmaxInteger",
      "@minmaxNumber",
      "additionalProperties",
      "items",
      "pattern"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "minimum",
      "properties",
      "required",
      "type",
      "type:array",
      "type:integer",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
      "pathpair": {
        "type": "object",
        "properties": {
          "cloud": {
            "type": "string",
            "pattern": "(^gs://(.+))|(^http://(.+))|(^https://(.+))"
          },
          "local": {
            "type": "string",
            "pattern": "^/(.*)"
          }
        },
        "required": [
          "cloud",
          "local"
        ],
        "additionalProperties": false
      },
      "bytesunit": {
        "type": "string",
        "pattern": "^BYTES|^KB|^MB|^GB|^TB",
        "default": "MB"
      }
    },
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "default": ""
      },
      "inputs": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/pathpair"
        }
      },
      "commandline": {
        "type": "string"
      },
      "outputs": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/pathpair"
        }
      },
      "stdout": {
        "type": "string",
        "pattern": "^gs://(.+)",
        "default": ""
      },
      "stderr": {
        "type": "string",
        "pattern": "^gs://(.+)",
        "default": ""
      },
      "resources": {
        "type": "object",
        "properties": {
          "cpus": {
            "type": "number",
            "minimum": 0.1
          },
          "mem": {
            "type": "integer",
            "minimum": 1
          },
          "memunit": {
            "$ref": "#/definitions/bytesunit"
          },
          "disk": {
            "type": "integer",
            "minimum": 1
          },
          "diskunit": {
            "$ref": "#/definitions/bytesunit"
          }
        },
        "required": [
          "cpus",
          "mem",
          "disk"
        ]
      },
      "docker": {
        "type": "string"
      }
    },
    "required": [
      "inputs",
      "commandline",
      "outputs",
      "resources",
      "docker"
    ]
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "name": "example-task",
        "inputs": [
          {
            "cloud": "gs://bucket/input/file.txt",
            "local": "/input/file.txt"
          },
          {
            "cloud": "http://example.com/input/file2.txt",
            "local": "/input/file2.txt"
          }
        ],
        "commandline": "cat /input/file.txt /input/file2.txt > /output/output.txt",
        "outputs": [
          {
            "cloud": "gs://bucket/output/output.txt",
            "local": "/output/output.txt"
          }
        ],
        "stdout": "gs://bucket/stdout.txt",
        "stderr": "gs://bucket/stderr.txt",
        "resources": {
          "cpus": 1.0,
          "mem": 1024,
          "memunit": "MB",
          "disk": 1024,
          "diskunit": "MB"
        },
        "docker": "docker://ubuntu:latest"
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"ftp://bucket/input/file.txt\" does not match \"(^gs://(.+))|(^http://(.+))|(^https://(.+))\"",
      "python_error": "'ftp://bucket/input/file.txt' does not match '(^gs://(.+))|(^http://(.+))|(^https://(.+))'\n\nFailed validating 'pattern' in schema['properties']['inputs']['items']['properties']['cloud']:\n    {'type': 'string',\n     'pattern': '(^gs://(.+))|(^http://(.+))|(^https://(.+))'}\n\nOn instance['inputs'][0]['cloud']:\n    'ftp://bucket/input/file.txt'",
      "data": {
        "name": "example-task",
        "inputs": [
          {
            "cloud": "ftp://bucket/input/file.txt",
            "local": "/input/file.txt"
          },
          {
            "cloud": "http://example.com/input/file2.txt",
            "local": "/input/file2.txt"
          }
        ],
        "commandline": "cat /input/file.txt /input/file2.txt > /output/output.txt",
        "outputs": [
          {
            "cloud": "gs://bucket/output/output.txt",
            "local": "/output/output.txt"
          }
        ],
        "stdout": "gs://bucket/stdout.txt",
        "stderr": "gs://bucket/stderr.txt",
        "resources": {
          "cpus": 1.0,
          "mem": 1024,
          "memunit": "MB",
          "disk": 1024,
          "diskunit": "MB"
        },
        "docker": "docker://ubuntu:latest"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword",
      "valid": false,
      "rust_error": "0.0 is less than the minimum of 0.1",
      "python_error": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['resources']['properties']['mem']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['resources']['mem']:\n    0",
      "data": {
        "name": "example-task",
        "inputs": [
          {
            "cloud": "gs://bucket/input/file.txt",
            "local": "/input/file.txt"
          },
          {
            "cloud": "http://example.com/input/file2.txt",
            "local": "/input/file2.txt"
          }
        ],
        "commandline": "cat /input/file.txt /input/file2.txt > /output/output.txt",
        "outputs": [
          {
            "cloud": "gs://bucket/output/output.txt",
            "local": "/output/output.txt"
          }
        ],
        "stdout": "gs://bucket/stdout.txt",
        "stderr": "gs://bucket/stderr.txt",
        "resources": {
          "cpus": 0.0,
          "mem": 0,
          "memunit": "MB",
          "disk": 0,
          "diskunit": "MB"
        },
        "docker": "docker://ubuntu:latest"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "0 is less than the minimum of 1",
      "python_error": "0 is less than the minimum of 1\n\nFailed validating 'minimum' in schema['properties']['resources']['properties']['disk']:\n    {'type': 'integer', 'minimum': 1}\n\nOn instance['resources']['disk']:\n    0",
      "data": {
        "name": "example-task",
        "inputs": [
          {
            "cloud": "gs://bucket/input/file.txt",
            "local": "/input/file.txt"
          },
          {
            "cloud": "http://example.com/input/file2.txt",
            "local": "/input/file2.txt"
          }
        ],
        "commandline": "cat /input/file.txt /input/file2.txt > /output/output.txt",
        "outputs": [
          {
            "cloud": "gs://bucket/output/output.txt",
            "local": "/output/output.txt"
          }
        ],
        "stdout": "gs://bucket/stdout.txt",
        "stderr": "gs://bucket/stderr.txt",
        "resources": {
          "cpus": 1.0,
          "mem": 1024,
          "memunit": "KB",
          "disk": 0,
          "diskunit": "KB"
        },
        "docker": "docker://ubuntu:latest"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword",
      "valid": false,
      "rust_error": "0.0 is less than the minimum of 0.1",
      "python_error": "0.0 is less than the minimum of 0.1\n\nFailed validating 'minimum' in schema['properties']['resources']['properties']['cpus']:\n    {'type': 'number', 'minimum': 0.1}\n\nOn instance['resources']['cpus']:\n    0.0",
      "data": {
        "name": "example-task",
        "inputs": [
          {
            "cloud": "gs://bucket/input/file.txt",
            "local": "/input/file.txt"
          },
          {
            "cloud": "http://example.com/input/file2.txt",
            "local": "/input/file2.txt"
          }
        ],
        "commandline": "cat /input/file.txt /input/file2.txt > /output/output.txt",
        "outputs": [
          {
            "cloud": "gs://bucket/output/output.txt",
            "local": "/output/output.txt"
          }
        ],
        "stdout": "gs://bucket/stdout.txt",
        "stderr": "gs://bucket/stderr.txt",
        "resources": {
          "cpus": 0.0,
          "mem": 1,
          "memunit": "MB",
          "disk": 1,
          "diskunit": "MB"
        },
        "docker": "docker://ubuntu:latest"
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "\"local\" is a required property",
      "python_error": "'mem' is a required property\n\nFailed validating 'required' in schema['properties']['resources']:\n    {'type': 'object',\n     'properties': {'cpus': {'type': 'number', 'minimum': 0.1},\n                    'mem': {'type': 'integer', 'minimum': 1},\n                    'memunit': {'$ref': '#/definitions/bytesunit'},\n                    'disk': {'type': 'integer', 'minimum': 1},\n                    'diskunit': {'$ref': '#/definitions/bytesunit'}},\n     'required': ['cpus', 'mem', 'disk']}\n\nOn instance['resources']:\n    {'cpus': 0.01,\n     'Invalid cpus value, should be at least 0.1': 'mem',\n     'Missing colon after property name': 1024,\n     'memunit': 'KB',\n     'Invalid memunit value, should be one of BYTES, KB, MB, GB, TB': 'disk',\n     'diskunit': 'MB'}",
      "data": {
        "name": "example-task",
        "inputs": [
          {
            "cloud": "gs://bucket/input/file.txt",
            "local": "/input/file.txt"
          },
          {
            "cloud": "ftp://example.com/input/file2.txt",
            "Invalid protocol, should be http, https or gs": "local",
            "Missing colon after property name": "/input/file2.txt"
          }
        ],
        "commandline": "cat /input/file.txt /input/file2.txt > /output/output.txt",
        "outputs": [
          {
            "cloud": "gs://bucket/output/output.txt",
            "local": "/output/output.txt"
          }
        ],
        "stdout": "gs://bucket/stdout.txt",
        "stderr": "gs://bucket/stderr.txt",
        "resources": {
          "cpus": 0.01,
          "Invalid cpus value, should be at least 0.1": "mem",
          "Missing colon after property name": 1024,
          "memunit": "KB",
          "Invalid memunit value, should be one of BYTES, KB, MB, GB, TB": "disk",
          "diskunit": "MB"
        },
        "docker": "docker://ubuntu:latest"
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "name": "example-job",
        "inputs": [
          {
            "cloud": "gs://bucket/input/file1.txt",
            "local": "/input/file1.txt"
          },
          {
            "cloud": "http://example.com/input/file2.txt",
            "local": "/input/file2.txt"
          }
        ],
        "commandline": "echo 'Hello World!' > output.txt",
        "outputs": [
          {
            "cloud": "gs://bucket/output/output.txt",
            "local": "/output/output.txt"
          }
        ],
        "stdout": "gs://bucket/logs/stdout.log",
        "stderr": "gs://bucket/logs/stderr.log",
        "resources": {
          "cpus": 1.0,
          "mem": 1024,
          "memunit": "MB",
          "disk": 1024,
          "diskunit": "MB"
        },
        "docker": "gcr.io/my-project/my-image:latest"
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword",
      "valid": false,
      "rust_error": "0.0 is less than the minimum of 0.1",
      "python_error": "0.0 is less than the minimum of 0.1\n\nFailed validating 'minimum' in schema['properties']['resources']['properties']['cpus']:\n    {'type': 'number', 'minimum': 0.1}\n\nOn instance['resources']['cpus']:\n    0.0",
      "data": {
        "name": "example-job",
        "inputs": [
          {
            "cloud": "gs://bucket/input/file1.txt",
            "local": "/input/file1.txt"
          },
          {
            "cloud": "http://example.com/input/file2.txt",
            "local": "/input/file2.txt"
          }
        ],
        "commandline": "echo 'Hello World!' > output.txt",
        "outputs": [
          {
            "cloud": "gs://bucket/output/output.txt",
            "local": "/output/output.txt"
          }
        ],
        "stdout": "gs://bucket/logs/stdout.log",
        "stderr": "gs://bucket/logs/stderr.log",
        "resources": {
          "cpus": 0.0,
          "mem": 1,
          "memunit": "MB",
          "disk": 1,
          "diskunit": "MB"
        },
        "docker": "gcr.io/my-project/my-image:latest"
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\"ftp://bucket/input/file1.txt\" does not match \"(^gs://(.+))|(^http://(.+))|(^https://(.+))\"",
      "python_error": "'ftp://bucket/input/file1.txt' does not match '(^gs://(.+))|(^http://(.+))|(^https://(.+))'\n\nFailed validating 'pattern' in schema['properties']['inputs']['items']['properties']['cloud']:\n    {'type': 'string',\n     'pattern': '(^gs://(.+))|(^http://(.+))|(^https://(.+))'}\n\nOn instance['inputs'][0]['cloud']:\n    'ftp://bucket/input/file1.txt'",
      "data": {
        "name": "example-job",
        "inputs": [
          {
            "cloud": "ftp://bucket/input/file1.txt",
            "local": "/input/file1.txt"
          },
          {
            "cloud": "http://example.com/input/file2.txt",
            "local": "/input/file2.txt"
          }
        ],
        "commandline": "echo 'Hello World!' > output.txt",
        "outputs": [
          {
            "cloud": "gs://bucket/output/output.txt",
            "local": "/output/output.txt"
          }
        ],
        "stdout": "gs://bucket/logs/stdout.log",
        "stderr": "gs://bucket/logs/stderr.log",
        "resources": {
          "cpus": 1.0,
          "mem": 1024,
          "memunit": "MB",
          "disk": 1024,
          "diskunit": "MB"
        },
        "docker": "gcr.io/my-project/my-image:latest"
      }
    }
  ]
}