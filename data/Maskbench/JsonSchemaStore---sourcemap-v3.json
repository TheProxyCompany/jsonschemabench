{
  "description": "sample JsonSchemaStore/sourcemap-v3.json",
  "meta": {
    "full_size": 1831,
    "stripped_size": 869,
    "features": [
      "$ref",
      "@minmaxItems",
      "additionalProperties",
      "allOf",
      "anyOf",
      "items",
      "patternProperties",
      "uniqueItems"
    ],
    "raw_features": [
      "$schema",
      "_boolSchema",
      "definitions",
      "id",
      "minItems",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:integer",
      "type:null",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "definitions": {
      "sectionMap": {
        "anyOf": [
          {
            "properties": {
              "url": {
                "type": "string"
              }
            }
          },
          {
            "properties": {
              "map": {
                "$ref": "#"
              }
            }
          }
        ]
      }
    },
    "id": "https://json.schemastore.org/sourcemap-v3.json",
    "patternProperties": {
      "^x_": {
        "description": "Any property starting with 'x_' is valid.",
        "additionalProperties": true
      }
    },
    "properties": {
      "version": {
        "type": "integer",
        "description": " File version (always the first entry in the object) and must be a positive integer.",
        "default": 3
      },
      "file": {
        "type": "string",
        "description": "An optional name of the generated code that this source map is associated with."
      },
      "sourceRoot": {
        "type": "string",
        "description": " An optional source root, useful for relocating source files on a server or removing repeated values in the 'sources' entry.  This value is prepended to the individual entries in the 'source' field."
      },
      "sources": {
        "type": "array",
        "description": "A list of original sources used by the 'mappings' entry.",
        "items": {
          "type": "string"
        }
      },
      "sourcesContent": {
        "type": "array",
        "description": "An optional list of source content, useful when the 'source' canï¿½t be hosted. The contents are listed in the same order as the sources in line 5. 'null' may be used if some original sources should be retrieved by name.",
        "items": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "names": {
        "type": "array",
        "description": "A list of symbol names used by the 'mappings' entry.",
        "items": {
          "type": "string"
        }
      },
      "mappings": {
        "type": "string",
        "description": "A string with the encoded mapping data."
      },
      "sections": {
        "type": "array",
        "minItems": 1,
        "uniqueItems": true,
        "items": {
          "allOf": [
            {
              "$ref": "#/definitions/sectionMap"
            },
            {
              "type": "object",
              "properties": {
                "offset": {
                  "type": "object",
                  "properties": {
                    "line": {
                      "type": "integer"
                    },
                    "column": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          ]
        }
      }
    },
    "required": [
      "version"
    ],
    "title": "JSON schema for the Source Maps v3",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "version": 3,
        "file": "example.min.js",
        "sourceRoot": "https://example.com/",
        "sources": [
          "example.js"
        ],
        "sourcesContent": [
          "console.log('Hello World!');"
        ],
        "names": [
          "console"
        ],
        "mappings": "AAAA;AACA;AACA;AACA",
        "sections": [
          {
            "url": "https://example.com/example.min.js",
            "offset": {
              "line": 0,
              "column": 0
            }
          },
          {
            "map": {
              "version": 3,
              "file": "example.min.js",
              "sourceRoot": "https://example.com/",
              "sources": [
                "example.js"
              ],
              "sourcesContent": [
                "console.log('Hello World!');"
              ],
              "names": [
                "console"
              ],
              "mappings": "AAAA;AACA;AACA;AACA",
              "sections": []
            },
            "offset": {
              "line": 1,
              "column": 0
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "{} is not of types \"null\", \"string\"",
      "python_error": "{} is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['sourcesContent']['items']:\n    {'type': ['string', 'null']}\n\nOn instance['sourcesContent'][0]:\n    {}",
      "data": {
        "version": 3,
        "file": "example.min.js",
        "sourceRoot": "https://example.com/",
        "sources": [
          "example.js"
        ],
        "sourcesContent": [
          {}
        ],
        "names": [
          "console"
        ],
        "mappings": "AAAA;AACA;AACA;AACA",
        "sections": [
          {
            "url": "https://example.com/example.min.js",
            "offset": {
              "line": 0,
              "column": 0
            }
          },
          {
            "map": {
              "version": 3,
              "file": "example.min.js",
              "sourceRoot": "https://example.com/",
              "sources": [
                "example.js"
              ],
              "sourcesContent": [
                "console.log('Hello World!');"
              ],
              "names": [
                "console"
              ],
              "mappings": "AAAA;AACA;AACA;AACA",
              "sections": []
            },
            "offset": {
              "line": 1,
              "column": 0
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on minItems keyword",
      "valid": false,
      "rust_error": "[] has less than 1 item",
      "python_error": "[] should be non-empty\n\nFailed validating 'minItems' in schema['properties']['sections']:\n    {'type': 'array',\n     'minItems': 1,\n     'uniqueItems': True,\n     'items': {'allOf': [{'$ref': '#/definitions/sectionMap'},\n                         {'type': 'object',\n                          'properties': {'offset': {'type': 'object',\n                                                    'properties': {'line': {'type': 'integer'},\n                                                                   'column': {'type': 'integer'}}}}}]}}\n\nOn instance['sections']:\n    []",
      "data": {
        "version": 3,
        "file": "example.min.js",
        "sourceRoot": "https://example.com/",
        "sources": [
          "example.js"
        ],
        "sourcesContent": [
          "console.log('Hello World!');"
        ],
        "names": [
          "console"
        ],
        "mappings": "AAAA;AACA;AACA;AACA",
        "sections": []
      }
    },
    {
      "description": "llama-70b generated negative; focus on uniqueItems keyword",
      "valid": false,
      "rust_error": "[{\"url\":\"https://example.com/example.min.js\",\"offset\":{\"line\":0,\"column\":0}},{\"url\":\"https://example.com/example.min.js\",\"offset\":{\"line\":0,\"column\":0}}] has non-unique elements",
      "python_error": "[{'url': 'https://example.com/example.min.js', 'offset': {'line': 0, 'column': 0}}, {'url': 'https://example.com/example.min.js', 'offset': {'line': 0, 'column': 0}}] has non-unique elements\n\nFailed validating 'uniqueItems' in schema['properties']['sections']:\n    {'type': 'array',\n     'minItems': 1,\n     'uniqueItems': True,\n     'items': {'allOf': [{'$ref': '#/definitions/sectionMap'},\n                         {'type': 'object',\n                          'properties': {'offset': {'type': 'object',\n                                                    'properties': {'line': {'type': 'integer'},\n                                                                   'column': {'type': 'integer'}}}}}]}}\n\nOn instance['sections']:\n    [{'url': 'https://example.com/example.min.js',\n      'offset': {'line': 0, 'column': 0}},\n     {'url': 'https://example.com/example.min.js',\n      'offset': {'line': 0, 'column': 0}}]",
      "data": {
        "version": 3,
        "file": "example.min.js",
        "sourceRoot": "https://example.com/",
        "sources": [
          "example.js"
        ],
        "sourcesContent": [
          "console.log('Hello World!');"
        ],
        "names": [
          "console"
        ],
        "mappings": "AAAA;AACA;AACA;AACA",
        "sections": [
          {
            "url": "https://example.com/example.min.js",
            "offset": {
              "line": 0,
              "column": 0
            }
          },
          {
            "url": "https://example.com/example.min.js",
            "offset": {
              "line": 0,
              "column": 0
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "[{\"url\":\"https://example.com/example.min.js\",\"offset\":{\"line\":-1,\"column\":0}},{\"map\":{\"version\":3,\"file\":\"example.min.js\",\"sourceRoot\":\"https://example.com/\",\"sources\":[\"example.js\"],\"sourcesContent\":[\"console.log('Hello World!');\"],\"names\":[\"console\"],\"mappings\":\"AAAA;AACA;AACA;AACA\",\"sections\":[]},\"offset\":{\"line\":2,\"column\":0}},{\"map\":{\"version\":3,\"file\":\"example.min.js\",\"sourceRoot\":\"https://example.com/\",\"sources\":[\"example.js\"],\"sourcesContent\":[\"console.log('Hello World!');\"],\"names\":[\"console\"],\"mappings\":\"AAAA;AACA;AACA;AACA\",\"sections\":[]},\"offset\":{\"line\":2,\"column\":0}}] has non-unique elements",
      "python_error": "[{'url': 'https://example.com/example.min.js', 'offset': {'line': -1, 'column': 0}}, {'map': {'version': 3, 'file': 'example.min.js', 'sourceRoot': 'https://example.com/', 'sources': ['example.js'], 'sourcesContent': [\"console.log('Hello World!');\"], 'names': ['console'], 'mappings': 'AAAA;AACA;AACA;AACA', 'sections': []}, 'offset': {'line': 2, 'column': 0}}, {'map': {'version': 3, 'file': 'example.min.js', 'sourceRoot': 'https://example.com/', 'sources': ['example.js'], 'sourcesContent': [\"console.log('Hello World!');\"], 'names': ['console'], 'mappings': 'AAAA;AACA;AACA;AACA', 'sections': []}, 'offset': {'line': 2, 'column': 0}}] has non-unique elements\n\nFailed validating 'uniqueItems' in schema['properties']['sections']:\n    {'type': 'array',\n     'minItems': 1,\n     'uniqueItems': True,\n     'items': {'allOf': [{'$ref': '#/definitions/sectionMap'},\n                         {'type': 'object',\n                          'properties': {'offset': {'type': 'object',\n                                              .. (1046 more)",
      "data": {
        "version": 0,
        "file": "example.min.js",
        "sourceRoot": "https://example.com/",
        "sources": [
          "example.js"
        ],
        "sourcesContent": [
          "console.log('Hello World!');"
        ],
        "names": [
          "console"
        ],
        "mappings": "AAAA;AACA;AACA;AACA",
        "sections": [
          {
            "url": "https://example.com/example.min.js",
            "offset": {
              "line": -1,
              "column": 0
            }
          },
          {
            "map": {
              "version": 3,
              "file": "example.min.js",
              "sourceRoot": "https://example.com/",
              "sources": [
                "example.js"
              ],
              "sourcesContent": [
                "console.log('Hello World!');"
              ],
              "names": [
                "console"
              ],
              "mappings": "AAAA;AACA;AACA;AACA",
              "sections": []
            },
            "offset": {
              "line": 2,
              "column": 0
            }
          },
          {
            "map": {
              "version": 3,
              "file": "example.min.js",
              "sourceRoot": "https://example.com/",
              "sources": [
                "example.js"
              ],
              "sourcesContent": [
                "console.log('Hello World!');"
              ],
              "names": [
                "console"
              ],
              "mappings": "AAAA;AACA;AACA;AACA",
              "sections": []
            },
            "offset": {
              "line": 2,
              "column": 0
            }
          }
        ]
      }
    }
  ]
}