{
  "description": "sample Github_hard/o6358.json",
  "meta": {
    "full_size": 14206,
    "stripped_size": 6904,
    "features": [
      "$ref",
      "@siblingKeys",
      "additionalProperties",
      "additionalProperties:object",
      "anyOf",
      "items"
    ],
    "raw_features": [
      "_boolSchema",
      "anyOf:trivial",
      "definitions",
      "properties",
      "type",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "anyOf": [
      {
        "$ref": "#/definitions/SkaffoldConfig"
      }
    ],
    "definitions": {
      "Artifact": {
        "anyOf": [
          {
            "additionalProperties": false,
            "preferredOrder": [
              "image",
              "context",
              "sync"
            ],
            "properties": {
              "context": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "sync": {
                "additionalProperties": {
                  "type": "string"
                },
                "default": "{}",
                "type": "object"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "image",
              "context",
              "sync",
              "docker"
            ],
            "properties": {
              "context": {
                "type": "string"
              },
              "docker": {
                "$ref": "#/definitions/DockerArtifact"
              },
              "image": {
                "type": "string"
              },
              "sync": {
                "additionalProperties": {
                  "type": "string"
                },
                "default": "{}",
                "type": "object"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "image",
              "context",
              "sync",
              "bazel"
            ],
            "properties": {
              "bazel": {
                "$ref": "#/definitions/BazelArtifact"
              },
              "context": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "sync": {
                "additionalProperties": {
                  "type": "string"
                },
                "default": "{}",
                "type": "object"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "image",
              "context",
              "sync",
              "jibMaven"
            ],
            "properties": {
              "context": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "jibMaven": {
                "$ref": "#/definitions/JibMavenArtifact"
              },
              "sync": {
                "additionalProperties": {
                  "type": "string"
                },
                "default": "{}",
                "type": "object"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "image",
              "context",
              "sync",
              "jibGradle"
            ],
            "properties": {
              "context": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "jibGradle": {
                "$ref": "#/definitions/JibGradleArtifact"
              },
              "sync": {
                "additionalProperties": {
                  "type": "string"
                },
                "default": "{}",
                "type": "object"
              }
            }
          }
        ],
        "description": "represents items that need to be built, along with the context in which they should be built.",
        "x-intellij-html-description": "represents items that need to be built, along with the context in which they should be built."
      },
      "BazelArtifact": {
        "additionalProperties": false,
        "description": "describes an artifact built with Bazel.",
        "preferredOrder": [
          "target",
          "args"
        ],
        "properties": {
          "args": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "target": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "describes an artifact built with Bazel."
      },
      "BuildConfig": {
        "anyOf": [
          {
            "additionalProperties": false,
            "preferredOrder": [
              "artifacts",
              "tagPolicy"
            ],
            "properties": {
              "artifacts": {
                "items": {
                  "$ref": "#/definitions/Artifact"
                },
                "type": "array"
              },
              "tagPolicy": {
                "$ref": "#/definitions/TagPolicy"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "artifacts",
              "tagPolicy",
              "local"
            ],
            "properties": {
              "artifacts": {
                "items": {
                  "$ref": "#/definitions/Artifact"
                },
                "type": "array"
              },
              "local": {
                "$ref": "#/definitions/LocalBuild"
              },
              "tagPolicy": {
                "$ref": "#/definitions/TagPolicy"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "artifacts",
              "tagPolicy",
              "googleCloudBuild"
            ],
            "properties": {
              "artifacts": {
                "items": {
                  "$ref": "#/definitions/Artifact"
                },
                "type": "array"
              },
              "googleCloudBuild": {
                "$ref": "#/definitions/GoogleCloudBuild"
              },
              "tagPolicy": {
                "$ref": "#/definitions/TagPolicy"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "artifacts",
              "tagPolicy",
              "kaniko"
            ],
            "properties": {
              "artifacts": {
                "items": {
                  "$ref": "#/definitions/Artifact"
                },
                "type": "array"
              },
              "kaniko": {
                "$ref": "#/definitions/KanikoBuild"
              },
              "tagPolicy": {
                "$ref": "#/definitions/TagPolicy"
              }
            }
          }
        ],
        "description": "contains all the configuration for the build steps",
        "x-intellij-html-description": "contains all the configuration for the build steps"
      },
      "DateTimeTagger": {
        "additionalProperties": false,
        "description": "contains the configuration for the DateTime tagger.",
        "preferredOrder": [
          "format",
          "timezone"
        ],
        "properties": {
          "format": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "contains the configuration for the DateTime tagger."
      },
      "DeployConfig": {
        "anyOf": [
          {
            "additionalProperties": false
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "helm"
            ],
            "properties": {
              "helm": {
                "$ref": "#/definitions/HelmDeploy"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "kubectl"
            ],
            "properties": {
              "kubectl": {
                "$ref": "#/definitions/KubectlDeploy"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "kustomize"
            ],
            "properties": {
              "kustomize": {
                "$ref": "#/definitions/KustomizeDeploy"
              }
            }
          }
        ],
        "description": "contains all the configuration needed by the deploy steps",
        "x-intellij-html-description": "contains all the configuration needed by the deploy steps"
      },
      "DockerArtifact": {
        "additionalProperties": false,
        "description": "describes an artifact built from a Dockerfile, usually using `docker build`.",
        "preferredOrder": [
          "dockerfile",
          "buildArgs",
          "cacheFrom",
          "target"
        ],
        "properties": {
          "buildArgs": {
            "additionalProperties": {
              "type": "string"
            },
            "default": "{}",
            "type": "object"
          },
          "cacheFrom": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dockerfile": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "describes an artifact built from a Dockerfile, usually using <code>docker build</code>."
      },
      "EnvTemplateTagger": {
        "additionalProperties": false,
        "description": "contains the configuration for the envTemplate tagger.",
        "preferredOrder": [
          "template"
        ],
        "properties": {
          "template": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "contains the configuration for the envTemplate tagger."
      },
      "GitTagger": {
        "description": "contains the configuration for the git tagger.",
        "x-intellij-html-description": "contains the configuration for the git tagger."
      },
      "GoogleCloudBuild": {
        "additionalProperties": false,
        "description": "contains the fields needed to do a remote build on Google Cloud Build.",
        "preferredOrder": [
          "projectId",
          "diskSizeGb",
          "machineType",
          "timeout",
          "dockerImage"
        ],
        "properties": {
          "diskSizeGb": {
            "type": "integer"
          },
          "dockerImage": {
            "type": "string"
          },
          "machineType": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "timeout": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "contains the fields needed to do a remote build on Google Cloud Build."
      },
      "HelmConventionConfig": {
        "description": "represents image config in the syntax of image.repository and image.tag",
        "x-intellij-html-description": "represents image config in the syntax of image.repository and image.tag"
      },
      "HelmDeploy": {
        "additionalProperties": false,
        "description": "contains the configuration needed for deploying with helm",
        "preferredOrder": [
          "releases"
        ],
        "properties": {
          "releases": {
            "items": {
              "$ref": "#/definitions/HelmRelease"
            },
            "type": "array"
          }
        },
        "x-intellij-html-description": "contains the configuration needed for deploying with helm"
      },
      "HelmFQNConfig": {
        "additionalProperties": false,
        "description": "represents image config to use the FullyQualifiedImageName as param to set",
        "preferredOrder": [
          "property"
        ],
        "properties": {
          "property": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "represents image config to use the FullyQualifiedImageName as param to set"
      },
      "HelmImageStrategy": {
        "anyOf": [
          {
            "additionalProperties": false
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "fqn"
            ],
            "properties": {
              "fqn": {
                "$ref": "#/definitions/HelmFQNConfig"
              }
            }
          },
          {
            "additionalProperties": false,
            "preferredOrder": [
              "helm"
            ],
            "properties": {
              "helm": {
                "$ref": "#/definitions/HelmConventionConfig"
              }
            }
          }
        ]
      },
      "HelmPackaged": {
        "additionalProperties": false,
        "description": "represents parameters for packaging helm chart.",
        "preferredOrder": [
          "version",
          "appVersion"
        ],
        "properties": {
          "appVersion": {
            "description": "set the appVersion on the chart to this version",
            "type": "string",
            "x-intellij-html-description": "set the appVersion on the chart to this version"
          },
          "version": {
            "description": "sets the version on the chart to this semver version.",
            "type": "string",
            "x-intellij-html-description": "sets the version on the chart to this semver version."
          }
        },
        "x-intellij-html-description": "represents parameters for packaging helm chart."
      },
      "HelmRelease": {
        "additionalProperties": false,
        "preferredOrder": [
          "name",
          "chartPath",
          "valuesFiles",
          "values",
          "namespace",
          "version",
          "setValues",
          "setValueTemplates",
          "wait",
          "recreatePods",
          "overrides",
          "packaged",
          "imageStrategy"
        ],
        "properties": {
          "chartPath": {
            "type": "string"
          },
          "imageStrategy": {
            "$ref": "#/definitions/HelmImageStrategy"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "overrides": {},
          "packaged": {
            "$ref": "#/definitions/HelmPackaged"
          },
          "recreatePods": {
            "default": "false",
            "type": "boolean"
          },
          "setValueTemplates": {
            "additionalProperties": {
              "type": "string"
            },
            "default": "{}",
            "type": "object"
          },
          "setValues": {
            "additionalProperties": {
              "type": "string"
            },
            "default": "{}",
            "type": "object"
          },
          "values": {
            "additionalProperties": {
              "type": "string"
            },
            "default": "{}",
            "type": "object"
          },
          "valuesFiles": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "type": "string"
          },
          "wait": {
            "default": "false",
            "type": "boolean"
          }
        }
      },
      "JibGradleArtifact": {
        "additionalProperties": false,
        "preferredOrder": [
          "project"
        ],
        "properties": {
          "project": {
            "description": "Only multi-module",
            "type": "string",
            "x-intellij-html-description": "Only multi-module"
          }
        }
      },
      "JibMavenArtifact": {
        "additionalProperties": false,
        "preferredOrder": [
          "module",
          "profile"
        ],
        "properties": {
          "module": {
            "description": "Only multi-module",
            "type": "string",
            "x-intellij-html-description": "Only multi-module"
          },
          "profile": {
            "type": "string"
          }
        }
      },
      "KanikoBuild": {
        "additionalProperties": false,
        "description": "contains the fields needed to do a on-cluster build using the kaniko image",
        "preferredOrder": [
          "buildContext",
          "cache",
          "flags",
          "pullSecret",
          "pullSecretName",
          "namespace",
          "timeout",
          "image"
        ],
        "properties": {
          "buildContext": {
            "$ref": "#/definitions/KanikoBuildContext"
          },
          "cache": {
            "$ref": "#/definitions/KanikoCache"
          },
          "flags": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "image": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "pullSecret": {
            "type": "string"
          },
          "pullSecretName": {
            "type": "string"
          },
          "timeout": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "contains the fields needed to do a on-cluster build using the kaniko image"
      },
      "KanikoBuildContext": {
        "additionalProperties": false,
        "description": "contains the different fields available to specify a kaniko build context",
        "preferredOrder": [
          "gcsBucket",
          "localDir"
        ],
        "properties": {
          "gcsBucket": {
            "type": "string"
          },
          "localDir": {
            "$ref": "#/definitions/LocalDir"
          }
        },
        "x-intellij-html-description": "contains the different fields available to specify a kaniko build context"
      },
      "KanikoCache": {
        "additionalProperties": false,
        "description": "contains fields related to kaniko caching",
        "preferredOrder": [
          "repo"
        ],
        "properties": {
          "repo": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "contains fields related to kaniko caching"
      },
      "KubectlDeploy": {
        "additionalProperties": false,
        "description": "contains the configuration needed for deploying with `kubectl apply`",
        "preferredOrder": [
          "manifests",
          "remoteManifests",
          "flags"
        ],
        "properties": {
          "flags": {
            "$ref": "#/definitions/KubectlFlags"
          },
          "manifests": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "remoteManifests": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "x-intellij-html-description": "contains the configuration needed for deploying with <code>kubectl apply</code>"
      },
      "KubectlFlags": {
        "additionalProperties": false,
        "description": "describes additional options flags that are passed on the command line to kubectl either on every command (Global), on creations (Apply) or deletions (Delete).",
        "preferredOrder": [
          "global",
          "apply",
          "delete"
        ],
        "properties": {
          "apply": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "delete": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "global": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "x-intellij-html-description": "describes additional options flags that are passed on the command line to kubectl either on every command (Global), on creations (Apply) or deletions (Delete)."
      },
      "KustomizeDeploy": {
        "additionalProperties": false,
        "description": "contains the configuration needed for deploying with kustomize.",
        "preferredOrder": [
          "path",
          "flags"
        ],
        "properties": {
          "flags": {
            "$ref": "#/definitions/KubectlFlags"
          },
          "path": {
            "type": "string"
          }
        },
        "x-intellij-html-description": "contains the configuration needed for deploying with kustomize."
      },
      "LocalBuild": {
        "additionalProperties": false,
        "description": "contains the fields needed to do a build on the local docker daemon and optionally push to a repository.",
        "preferredOrder": [
          "push",
          "useDockerCLI",
          "useBuildkit"
        ],
        "properties": {
          "push": {
            "type": "boolean"
          },
          "useBuildkit": {
            "default": "false",
            "type": "boolean"
          },
          "useDockerCLI": {
            "default": "false",
            "type": "boolean"
          }
        },
        "x-intellij-html-description": "contains the fields needed to do a build on the local docker daemon and optionally push to a repository."
      },
      "LocalDir": {
        "description": "represents the local directory kaniko build context",
        "x-intellij-html-description": "represents the local directory kaniko build context"
      },
      "Profile": {
        "additionalProperties": false,
        "description": "additional configuration that overrides default configuration when it is activated.",
        "preferredOrder": [
          "name",
          "build",
          "test",
          "deploy"
        ],
        "properties": {
          "build": {
            "$ref": "#/definitions/BuildConfig"
          },
          "deploy": {
            "$ref": "#/definitions/DeployConfig"
          },
          "name": {
            "type": "string"
          },
          "test": {
            "$ref": "#/definitions/TestConfig"
          }
        },
        "x-intellij-html-description": "additional configuration that overrides default configuration when it is activated."
      },
      "ShaTagger": {
        "description": "contains the configuration for the SHA tagger.",
        "x-intellij-html-description": "contains the configuration for the SHA tagger."
      },
      "SkaffoldConfig": {
        "additionalProperties": false,
        "preferredOrder": [
          "apiVersion",
          "kind",
          "build",
          "test",
          "deploy",
          "profiles"
        ],
        "properties": {
          "apiVersion": {
            "type": "string"
          },
          "build": {
            "$ref": "#/definitions/BuildConfig"
          },
          "deploy": {
            "$ref": "#/definitions/DeployConfig"
          },
          "kind": {
            "type": "string"
          },
          "profiles": {
            "items": {
              "$ref": "#/definitions/Profile"
            },
            "type": "array"
          },
          "test": {
            "$ref": "#/definitions/TestConfig"
          }
        }
      },
      "TagPolicy": {
        "additionalProperties": false,
        "description": "contains all the configuration for the tagging step",
        "preferredOrder": [
          "gitCommit",
          "sha256",
          "envTemplate",
          "dateTime"
        ],
        "properties": {
          "dateTime": {
            "$ref": "#/definitions/DateTimeTagger"
          },
          "envTemplate": {
            "$ref": "#/definitions/EnvTemplateTagger"
          },
          "gitCommit": {
            "$ref": "#/definitions/GitTagger"
          },
          "sha256": {
            "$ref": "#/definitions/ShaTagger"
          }
        },
        "x-intellij-html-description": "contains all the configuration for the tagging step"
      },
      "TestCase": {
        "additionalProperties": false,
        "description": "a struct containing all the specified test configuration for an image.",
        "preferredOrder": [
          "image",
          "structureTests"
        ],
        "properties": {
          "image": {
            "type": "string"
          },
          "structureTests": {
            "default": "[]",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "x-intellij-html-description": "a struct containing all the specified test configuration for an image."
      },
      "TestConfig": {
        "items": {
          "$ref": "#/definitions/TestCase"
        },
        "type": "array"
      }
    },
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated valid",
      "valid": true,
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "profiles": [
          {
            "name": "dev",
            "test": [
              {
                "image": "my-image",
                "structureTests": [
                  "test1",
                  "test2"
                ]
              }
            ]
          }
        ],
        "test": [
          {
            "image": "my-image",
            "structureTests": [
              "test1",
              "test2"
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"profiles\":[{\"name\":\"dev\",\"test\":[{\"image\":\"my-image\",\"structureTests\":[\"test1\",\"test2\"],\"invalidProperty\":\"invalidValue\"}]}],\"test\":[{\"image\":\"my-image\",\"structureTests\":[\"test1\",\"test2\"]}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "Additional properties are not allowed ('invalidProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema[0]['properties']['profiles']['items']['properties']['test']['items']:\n    {'additionalProperties': False,\n     'description': 'a struct containing all the specified test '\n                    'configuration for an image.',\n     'preferredOrder': ['image', 'structureTests'],\n     'properties': {'image': {'type': 'string'},\n                    'structureTests': {'default': '[]',\n                                       'items': {'type': 'string'},\n                                       'type': 'array'}},\n     'x-intellij-html-description': 'a struct containing all the specified '\n                                    'test configuration for an image.'}\n\nOn instance['profiles'][0]['test'][0]:\n    {'image': 'my-image',\n     'structureTests': ['test1', 'test2'],\n     'invalidProperty': 'invalidValue'}",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "profiles": [
          {
            "name": "dev",
            "test": [
              {
                "image": "my-image",
                "structureTests": [
                  "test1",
                  "test2"
                ],
                "invalidProperty": "invalidValue"
              }
            ]
          }
        ],
        "test": [
          {
            "image": "my-image",
            "structureTests": [
              "test1",
              "test2"
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"profiles\":[{\"name\":\"dev\",\"test\":[{\"image\":\"my-image\",\"structureTests\":[\"test1\",\"test2\"]}]}],\"test\":[{\"image\":\"my-image\",\"structureTests\":[\"test1\",\"test2\"]}],\"build\":{\"artifacts\":[{\"image\":\"my-image\",\"context\":\"my-context\",\"sync\":{},\"docker\":{\"buildArgs\":{},\"cacheFrom\":[],\"dockerfile\":\"Dockerfile\",\"target\":\"my-target\"},\"bazel\":{\"args\":[],\"target\":\"my-target\"}}],\"tagPolicy\":{\"gitCommit\":{},\"sha256\":{},\"envTemplate\":{\"template\":\"my-template\"},\"dateTime\":{\"format\":\"my-format\",\"timezone\":\"my-timezone\"}}}} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{'artifacts': [{'image': 'my-image', 'context': 'my-context', 'sync': {}, 'docker': {'buildArgs': {}, 'cacheFrom': [], 'dockerfile': 'Dockerfile', 'target': 'my-target'}, 'bazel': {'args': [], 'target': 'my-target'}}], 'tagPolicy': {'gitCommit': {}, 'sha256': {}, 'envTemplate': {'template': 'my-template'}, 'dateTime': {'format': 'my-format', 'timezone': 'my-timezone'}}} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema[0]['properties']['build']:\n    {'anyOf': [{'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'tagPolicy': {'$ref': '#/definitions/TagPolicy'}}},\n               {'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy', 'local'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Ar.. (2069 more)",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "profiles": [
          {
            "name": "dev",
            "test": [
              {
                "image": "my-image",
                "structureTests": [
                  "test1",
                  "test2"
                ]
              }
            ]
          }
        ],
        "test": [
          {
            "image": "my-image",
            "structureTests": [
              "test1",
              "test2"
            ]
          }
        ],
        "build": {
          "artifacts": [
            {
              "image": "my-image",
              "context": "my-context",
              "sync": {},
              "docker": {
                "buildArgs": {},
                "cacheFrom": [],
                "dockerfile": "Dockerfile",
                "target": "my-target"
              },
              "bazel": {
                "args": [],
                "target": "my-target"
              }
            }
          ],
          "tagPolicy": {
            "gitCommit": {},
            "sha256": {},
            "envTemplate": {
              "template": "my-template"
            },
            "dateTime": {
              "format": "my-format",
              "timezone": "my-timezone"
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"profiles\":[{\"name\":\"dev\",\"test\":[{\"image\":\"my-image\",\"structureTests\":[\"test1\",\"test2\"]}]}],\"test\":[{\"image\":\"my-image\",\"structureTests\":[\"test1\",\"test2\"],\"extraProperty\":\"extraValue\"}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "Additional properties are not allowed ('extraProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema[0]['properties']['test']['items']:\n    {'additionalProperties': False,\n     'description': 'a struct containing all the specified test '\n                    'configuration for an image.',\n     'preferredOrder': ['image', 'structureTests'],\n     'properties': {'image': {'type': 'string'},\n                    'structureTests': {'default': '[]',\n                                       'items': {'type': 'string'},\n                                       'type': 'array'}},\n     'x-intellij-html-description': 'a struct containing all the specified '\n                                    'test configuration for an image.'}\n\nOn instance['test'][0]:\n    {'image': 'my-image',\n     'structureTests': ['test1', 'test2'],\n     'extraProperty': 'extraValue'}",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "profiles": [
          {
            "name": "dev",
            "test": [
              {
                "image": "my-image",
                "structureTests": [
                  "test1",
                  "test2"
                ]
              }
            ]
          }
        ],
        "test": [
          {
            "image": "my-image",
            "structureTests": [
              "test1",
              "test2"
            ],
            "extraProperty": "extraValue"
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"profiles\":[{\"name\":\"dev\",\"build\":{\"artifacts\":[{\"image\":\"my-image\",\"context\":\"my-context\",\"sync\":{\"a\":\"b\"},\"docker\":{\"buildArgs\":{\"a\":\"b\"},\"cacheFrom\":[\"my-cache\"],\"dockerfile\":\"Dockerfile\",\"target\":\"my-target\"},\"bazel\":{\"args\":[\"arg1\",\"arg2\"],\"target\":\"my-target\"}}],\"tagPolicy\":{\"gitCommit\":{},\"sha256\":{},\"envTemplate\":{\"template\":\"my-template\"},\"dateTime\":{\"format\":\"my-format\",\"timezone\":\"my-timezone\"}}},\"test\":[{\"image\":\"my-image\",\"structureTests\":[\"test1\",\"test2\"]}]}],\"test\":[{\"image\":\"my-image\",\"structureTests\":[\"test1\",\"test2\"]}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "{'artifacts': [{'image': 'my-image', 'context': 'my-context', 'sync': {'a': 'b'}, 'docker': {'buildArgs': {'a': 'b'}, 'cacheFrom': ['my-cache'], 'dockerfile': 'Dockerfile', 'target': 'my-target'}, 'bazel': {'args': ['arg1', 'arg2'], 'target': 'my-target'}}], 'tagPolicy': {'gitCommit': {}, 'sha256': {}, 'envTemplate': {'template': 'my-template'}, 'dateTime': {'format': 'my-format', 'timezone': 'my-timezone'}}} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema[0]['properties']['profiles']['items']['properties']['build']:\n    {'anyOf': [{'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'tagPolicy': {'$ref': '#/definitions/TagPolicy'}}},\n               {'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy', 'local'],\n     .. (2229 more)",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "profiles": [
          {
            "name": "dev",
            "build": {
              "artifacts": [
                {
                  "image": "my-image",
                  "context": "my-context",
                  "sync": {
                    "a": "b"
                  },
                  "docker": {
                    "buildArgs": {
                      "a": "b"
                    },
                    "cacheFrom": [
                      "my-cache"
                    ],
                    "dockerfile": "Dockerfile",
                    "target": "my-target"
                  },
                  "bazel": {
                    "args": [
                      "arg1",
                      "arg2"
                    ],
                    "target": "my-target"
                  }
                }
              ],
              "tagPolicy": {
                "gitCommit": {},
                "sha256": {},
                "envTemplate": {
                  "template": "my-template"
                },
                "dateTime": {
                  "format": "my-format",
                  "timezone": "my-timezone"
                }
              }
            },
            "test": [
              {
                "image": "my-image",
                "structureTests": [
                  "test1",
                  "test2"
                ]
              }
            ]
          }
        ],
        "test": [
          {
            "image": "my-image",
            "structureTests": [
              "test1",
              "test2"
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"profiles\":[{\"name\":\"dev\",\"test\":[{\"image\":\"my-image\",\"structureTests\":[\"test1\",\"test2\"],\"extraProperty\":\"extraValue\"}]}],\"test\":[{\"image\":\"my-image\",\"structureTests\":[\"test1\",\"test2\"]}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "Additional properties are not allowed ('extraProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema[0]['properties']['profiles']['items']['properties']['test']['items']:\n    {'additionalProperties': False,\n     'description': 'a struct containing all the specified test '\n                    'configuration for an image.',\n     'preferredOrder': ['image', 'structureTests'],\n     'properties': {'image': {'type': 'string'},\n                    'structureTests': {'default': '[]',\n                                       'items': {'type': 'string'},\n                                       'type': 'array'}},\n     'x-intellij-html-description': 'a struct containing all the specified '\n                                    'test configuration for an image.'}\n\nOn instance['profiles'][0]['test'][0]:\n    {'image': 'my-image',\n     'structureTests': ['test1', 'test2'],\n     'extraProperty': 'extraValue'}",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "profiles": [
          {
            "name": "dev",
            "test": [
              {
                "image": "my-image",
                "structureTests": [
                  "test1",
                  "test2"
                ],
                "extraProperty": "extraValue"
              }
            ]
          }
        ],
        "test": [
          {
            "image": "my-image",
            "structureTests": [
              "test1",
              "test2"
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"profiles\":[{\"name\":\"dev\",\"test\":[{\"image\":\"my-image\",\"structureTests\":[\"test1\",123]}]}],\"test\":[{\"image\":\"my-image\",\"structureTests\":[\"test1\",\"test2\"]}]} is not valid under any of the schemas listed in the 'anyOf' keyword",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema[0]['properties']['profiles']['items']['properties']['test']['items']['properties']['structureTests']['items']:\n    {'type': 'string'}\n\nOn instance['profiles'][0]['test'][0]['structureTests'][1]:\n    123",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "profiles": [
          {
            "name": "dev",
            "test": [
              {
                "image": "my-image",
                "structureTests": [
                  "test1",
                  123
                ]
              }
            ]
          }
        ],
        "test": [
          {
            "image": "my-image",
            "structureTests": [
              "test1",
              "test2"
            ]
          }
        ]
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "build": {
          "artifacts": [
            {
              "context": "path/to/context",
              "docker": {
                "buildArgs": {
                  "ARG1": "value1",
                  "ARG2": "value2"
                },
                "cacheFrom": [
                  "gcr.io/my-project/my-cache-image"
                ],
                "dockerfile": "path/to/Dockerfile",
                "target": "my-target"
              },
              "image": "gcr.io/my-project/my-image",
              "sync": {
                "path/to/context/**/*": "path/in/container/**/*"
              }
            }
          ],
          "tagPolicy": {
            "gitCommit": {}
          }
        },
        "deploy": {
          "helm": {
            "releases": [
              {
                "chartPath": "path/to/chart",
                "imageStrategy": {
                  "helm": {
                    "image.repository": "gcr.io/my-project/my-image",
                    "image.tag": "latest"
                  }
                },
                "name": "my-release",
                "namespace": "my-namespace",
                "overrides": {},
                "packaged": {
                  "appVersion": "1.0.0",
                  "version": "1.0.0"
                },
                "recreatePods": true,
                "setValueTemplates": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "setValues": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "values": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "valuesFiles": [
                  "path/to/values1.yaml",
                  "path/to/values2.yaml"
                ],
                "version": "1.0.0",
                "wait": true
              }
            ]
          }
        },
        "kind": "Config",
        "profiles": [
          {
            "build": {
              "artifacts": [
                {
                  "context": "path/to/context",
                  "docker": {
                    "buildArgs": {
                      "ARG1": "value1",
                      "ARG2": "value2"
                    },
                    "cacheFrom": [
                      "gcr.io/my-project/my-cache-image"
                    ],
                    "dockerfile": "path/to/Dockerfile",
                    "target": "my-target"
                  },
                  "image": "gcr.io/my-project/my-image",
                  "sync": {
                    "path/to/context/**/*": "path/in/container/**/*"
                  }
                }
              ],
              "tagPolicy": {
                "gitCommit": {}
              }
            },
            "deploy": {
              "helm": {
                "releases": [
                  {
                    "chartPath": "path/to/chart",
                    "imageStrategy": {
                      "helm": {
                        "image.repository": "gcr.io/my-project/my-image",
                        "image.tag": "latest"
                      }
                    },
                    "name": "my-release",
                    "namespace": "my-namespace",
                    "overrides": {},
                    "packaged": {
                      "appVersion": "1.0.0",
                      "version": "1.0.0"
                    },
                    "recreatePods": true,
                    "setValueTemplates": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "setValues": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "values": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "valuesFiles": [
                      "path/to/values1.yaml",
                      "path/to/values2.yaml"
                    ],
                    "version": "1.0.0",
                    "wait": true
                  }
                ]
              }
            },
            "name": "my-profile",
            "test": [
              {
                "image": "gcr.io/my-project/my-image",
                "structureTests": [
                  "path/to/test1",
                  "path/to/test2"
                ]
              }
            ]
          }
        ],
        "test": [
          {
            "image": "gcr.io/my-project/my-image",
            "structureTests": [
              "path/to/test1",
              "path/to/test2"
            ]
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"build\":{\"artifacts\":[{\"image\":\"gcr.io/my-project/my-image\",\"context\":\"path/to/context\",\"sync\":{\"path/to/context/**/*\":\"path/in/container/**/*\"},\"docker\":{\"buildArgs\":{\"ARG1\":\"value1\",\"ARG2\":\"value2\"},\"cacheFrom\":[\"gcr.io/my-project/my-cache-image\"],\"dockerfile\":\"path/to/Dockerfile\",\"target\":\"my-target\"},\"bazel\":{\"target\":\"my-target\"}}],\"tagPolicy\":{\"gitCommit\":{}}},\"test\":[{\"image\":\"gcr.io/my-project/my-image\",\"structureTests\":[\"path/to/test1\",\"path/to/test2\"]}],\"deploy\":{\"helm\":{\"releases\":[{\"name\":\"my-release\",\"chartPath\":\"path/to/chart\",\"valuesFiles\":[\"path/to/values1.yaml\",\"path/to/values2.yaml\"],\"values\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"namespace\":\"my-namespace\",\"version\":\"1.0.0\",\"setValues\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"setValueTemplates\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"wait\":true,\"recreatePods\":true,\"overrides\":{},\"packaged\":{\"version\":\"1.0.0\",\"appVersion\":\"1.0.0\"},\"imageStrategy\":{\"helm\":{\"image.repository\":\"gcr.io/my-project/my-image\",\"imag.. (1121 more)",
      "python_error": "{'artifacts': [{'image': 'gcr.io/my-project/my-image', 'context': 'path/to/context', 'sync': {'path/to/context/**/*': 'path/in/container/**/*'}, 'docker': {'dockerfile': 'path/to/Dockerfile', 'buildArgs': {'ARG1': 'value1', 'ARG2': 'value2'}, 'cacheFrom': ['gcr.io/my-project/my-cache-image'], 'target': 'my-target'}, 'bazel': {'target': 'my-target'}}], 'tagPolicy': {'gitCommit': {}}} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema[0]['properties']['profiles']['items']['properties']['build']:\n    {'anyOf': [{'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'tagPolicy': {'$ref': '#/definitions/TagPolicy'}}},\n               {'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy', 'local'],\n                'properties': {'.. (2101 more)",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "build": {
          "artifacts": [
            {
              "image": "gcr.io/my-project/my-image",
              "context": "path/to/context",
              "sync": {
                "path/to/context/**/*": "path/in/container/**/*"
              },
              "docker": {
                "buildArgs": {
                  "ARG1": "value1",
                  "ARG2": "value2"
                },
                "cacheFrom": [
                  "gcr.io/my-project/my-cache-image"
                ],
                "dockerfile": "path/to/Dockerfile",
                "target": "my-target"
              },
              "bazel": {
                "target": "my-target"
              }
            }
          ],
          "tagPolicy": {
            "gitCommit": {}
          }
        },
        "test": [
          {
            "image": "gcr.io/my-project/my-image",
            "structureTests": [
              "path/to/test1",
              "path/to/test2"
            ]
          }
        ],
        "deploy": {
          "helm": {
            "releases": [
              {
                "name": "my-release",
                "chartPath": "path/to/chart",
                "valuesFiles": [
                  "path/to/values1.yaml",
                  "path/to/values2.yaml"
                ],
                "values": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "namespace": "my-namespace",
                "version": "1.0.0",
                "setValues": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "setValueTemplates": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "wait": true,
                "recreatePods": true,
                "overrides": {},
                "packaged": {
                  "version": "1.0.0",
                  "appVersion": "1.0.0"
                },
                "imageStrategy": {
                  "helm": {
                    "image.repository": "gcr.io/my-project/my-image",
                    "image.tag": "latest"
                  }
                }
              }
            ]
          }
        },
        "profiles": [
          {
            "name": "my-profile",
            "build": {
              "artifacts": [
                {
                  "image": "gcr.io/my-project/my-image",
                  "context": "path/to/context",
                  "sync": {
                    "path/to/context/**/*": "path/in/container/**/*"
                  },
                  "docker": {
                    "dockerfile": "path/to/Dockerfile",
                    "buildArgs": {
                      "ARG1": "value1",
                      "ARG2": "value2"
                    },
                    "cacheFrom": [
                      "gcr.io/my-project/my-cache-image"
                    ],
                    "target": "my-target"
                  },
                  "bazel": {
                    "target": "my-target"
                  }
                }
              ],
              "tagPolicy": {
                "gitCommit": {}
              }
            },
            "test": [
              {
                "image": "gcr.io/my-project/my-image",
                "structureTests": [
                  "path/to/test1",
                  "path/to/test2"
                ]
              }
            ],
            "deploy": {
              "helm": {
                "releases": [
                  {
                    "name": "my-release",
                    "chartPath": "path/to/chart",
                    "valuesFiles": [
                      "path/to/values1.yaml",
                      "path/to/values2.yaml"
                    ],
                    "values": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "namespace": "my-namespace",
                    "version": "1.0.0",
                    "setValues": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "setValueTemplates": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "wait": true,
                    "recreatePods": true,
                    "overrides": {},
                    "packaged": {
                      "version": "1.0.0",
                      "appVersion": "1.0.0"
                    },
                    "imageStrategy": {
                      "helm": {
                        "image.repository": "gcr.io/my-project/my-image",
                        "image.tag": "latest"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"build\":{\"artifacts\":[{\"image\":\"gcr.io/my-project/my-image\",\"context\":\"path/to/context\",\"sync\":{\"path/to/context/**/*\":\"path/in/container/**/*\"},\"docker\":{\"dockerfile\":\"path/to/Dockerfile\",\"buildArgs\":{\"ARG1\":\"value1\",\"ARG2\":\"value2\"},\"cacheFrom\":[\"gcr.io/my-project/my-cache-image\"],\"target\":\"my-target\",\"invalidProperty\":\"This should cause an error\"}}],\"tagPolicy\":{\"gitCommit\":{}}},\"test\":[{\"image\":\"gcr.io/my-project/my-image\",\"structureTests\":[\"path/to/test1\",\"path/to/test2\"]}],\"deploy\":{\"helm\":{\"releases\":[{\"name\":\"my-release\",\"chartPath\":\"path/to/chart\",\"valuesFiles\":[\"path/to/values1.yaml\",\"path/to/values2.yaml\"],\"values\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"namespace\":\"my-namespace\",\"version\":\"1.0.0\",\"setValues\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"setValueTemplates\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"wait\":true,\"recreatePods\":true,\"overrides\":{},\"packaged\":{\"version\":\"1.0.0\",\"appVersion\":\"1.0.0\"},\"imageStrategy\":{\"helm\":{\"image.repository\":\"gcr.io/my-project.. (1153 more)",
      "python_error": "{'artifacts': [{'image': 'gcr.io/my-project/my-image', 'context': 'path/to/context', 'sync': {'path/to/context/**/*': 'path/in/container/**/*'}, 'docker': {'dockerfile': 'path/to/Dockerfile', 'buildArgs': {'ARG1': 'value1', 'ARG2': 'value2'}, 'cacheFrom': ['gcr.io/my-project/my-cache-image'], 'target': 'my-target', 'invalidProperty': 'This should cause an error'}}], 'tagPolicy': {'gitCommit': {}}} is not valid under any of the given schemas\n\nFailed validating 'anyOf' in schema[0]['properties']['profiles']['items']['properties']['build']:\n    {'anyOf': [{'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy'],\n                'properties': {'artifacts': {'items': {'$ref': '#/definitions/Artifact'},\n                                             'type': 'array'},\n                               'tagPolicy': {'$ref': '#/definitions/TagPolicy'}}},\n               {'additionalProperties': False,\n                'preferredOrder': ['artifacts', 'tagPolicy', 'local'],\n                '.. (2195 more)",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "build": {
          "artifacts": [
            {
              "image": "gcr.io/my-project/my-image",
              "context": "path/to/context",
              "sync": {
                "path/to/context/**/*": "path/in/container/**/*"
              },
              "docker": {
                "dockerfile": "path/to/Dockerfile",
                "buildArgs": {
                  "ARG1": "value1",
                  "ARG2": "value2"
                },
                "cacheFrom": [
                  "gcr.io/my-project/my-cache-image"
                ],
                "target": "my-target",
                "invalidProperty": "This should cause an error"
              }
            }
          ],
          "tagPolicy": {
            "gitCommit": {}
          }
        },
        "test": [
          {
            "image": "gcr.io/my-project/my-image",
            "structureTests": [
              "path/to/test1",
              "path/to/test2"
            ]
          }
        ],
        "deploy": {
          "helm": {
            "releases": [
              {
                "name": "my-release",
                "chartPath": "path/to/chart",
                "valuesFiles": [
                  "path/to/values1.yaml",
                  "path/to/values2.yaml"
                ],
                "values": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "namespace": "my-namespace",
                "version": "1.0.0",
                "setValues": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "setValueTemplates": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "wait": true,
                "recreatePods": true,
                "overrides": {},
                "packaged": {
                  "version": "1.0.0",
                  "appVersion": "1.0.0"
                },
                "imageStrategy": {
                  "helm": {
                    "image.repository": "gcr.io/my-project/my-image",
                    "image.tag": "latest"
                  }
                }
              }
            ]
          }
        },
        "profiles": [
          {
            "name": "my-profile",
            "build": {
              "artifacts": [
                {
                  "image": "gcr.io/my-project/my-image",
                  "context": "path/to/context",
                  "sync": {
                    "path/to/context/**/*": "path/in/container/**/*"
                  },
                  "docker": {
                    "dockerfile": "path/to/Dockerfile",
                    "buildArgs": {
                      "ARG1": "value1",
                      "ARG2": "value2"
                    },
                    "cacheFrom": [
                      "gcr.io/my-project/my-cache-image"
                    ],
                    "target": "my-target",
                    "invalidProperty": "This should cause an error"
                  }
                }
              ],
              "tagPolicy": {
                "gitCommit": {}
              }
            },
            "test": [
              {
                "image": "gcr.io/my-project/my-image",
                "structureTests": [
                  "path/to/test1",
                  "path/to/test2"
                ]
              }
            ],
            "deploy": {
              "helm": {
                "releases": [
                  {
                    "name": "my-release",
                    "chartPath": "path/to/chart",
                    "valuesFiles": [
                      "path/to/values1.yaml",
                      "path/to/values2.yaml"
                    ],
                    "values": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "namespace": "my-namespace",
                    "version": "1.0.0",
                    "setValues": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "setValueTemplates": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "wait": true,
                    "recreatePods": true,
                    "overrides": {},
                    "packaged": {
                      "version": "1.0.0",
                      "appVersion": "1.0.0"
                    },
                    "imageStrategy": {
                      "helm": {
                        "image.repository": "gcr.io/my-project/my-image",
                        "image.tag": "latest"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "{\"apiVersion\":\"skaffold/v2beta26\",\"kind\":\"Config\",\"build\":{\"artifacts\":[{\"image\":\"gcr.io/my-project/my-image\",\"context\":\"path/to/context\",\"sync\":{\"path/to/context/**/*\":\"path/in/container/**/*\"},\"docker\":{\"dockerfile\":\"path/to/Dockerfile\",\"buildArgs\":{\"ARG1\":1,\"ARG2\":\"value2\"},\"cacheFrom\":[\"gcr.io/my-project/my-cache-image\"],\"target\":\"my-target\"}}],\"tagPolicy\":{\"gitCommit\":{}}},\"test\":[{\"image\":\"gcr.io/my-project/my-image\",\"structureTests\":[\"path/to/test1\",2]}],\"deploy\":{\"helm\":{\"releases\":[{\"name\":\"my-release\",\"chartPath\":\"path/to/chart\",\"valuesFiles\":[\"path/to/values1.yaml\",\"path/to/values2.yaml\"],\"values\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"namespace\":\"my-namespace\",\"version\":\"1.0.0\",\"setValues\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"setValueTemplates\":{\"key1\":\"value1\",\"key2\":\"value2\"},\"wait\":true,\"recreatePods\":true,\"overrides\":{},\"packaged\":{\"version\":\"1.0.0\",\"appVersion\":\"1.0.0\"},\"imageStrategy\":{\"helm\":{\"image.repository\":\"gcr.io/my-project/my-image\",\"image.tag\":1}}}]}},\"profiles\":[{\"name\":\"my-profile\",\"bui.. (1031 more)",
      "python_error": "2 is not of type 'string'\n\nFailed validating 'type' in schema[0]['properties']['test']['items']['properties']['structureTests']['items']:\n    {'type': 'string'}\n\nOn instance['test'][0]['structureTests'][1]:\n    2",
      "data": {
        "apiVersion": "skaffold/v2beta26",
        "kind": "Config",
        "build": {
          "artifacts": [
            {
              "image": "gcr.io/my-project/my-image",
              "context": "path/to/context",
              "sync": {
                "path/to/context/**/*": "path/in/container/**/*"
              },
              "docker": {
                "dockerfile": "path/to/Dockerfile",
                "buildArgs": {
                  "ARG1": 1,
                  "ARG2": "value2"
                },
                "cacheFrom": [
                  "gcr.io/my-project/my-cache-image"
                ],
                "target": "my-target"
              }
            }
          ],
          "tagPolicy": {
            "gitCommit": {}
          }
        },
        "test": [
          {
            "image": "gcr.io/my-project/my-image",
            "structureTests": [
              "path/to/test1",
              2
            ]
          }
        ],
        "deploy": {
          "helm": {
            "releases": [
              {
                "name": "my-release",
                "chartPath": "path/to/chart",
                "valuesFiles": [
                  "path/to/values1.yaml",
                  "path/to/values2.yaml"
                ],
                "values": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "namespace": "my-namespace",
                "version": "1.0.0",
                "setValues": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "setValueTemplates": {
                  "key1": "value1",
                  "key2": "value2"
                },
                "wait": true,
                "recreatePods": true,
                "overrides": {},
                "packaged": {
                  "version": "1.0.0",
                  "appVersion": "1.0.0"
                },
                "imageStrategy": {
                  "helm": {
                    "image.repository": "gcr.io/my-project/my-image",
                    "image.tag": 1
                  }
                }
              }
            ]
          }
        },
        "profiles": [
          {
            "name": "my-profile",
            "build": {
              "artifacts": [
                {
                  "image": "gcr.io/my-project/my-image",
                  "context": "path/to/context",
                  "sync": {
                    "path/to/context/**/*": "path/in/container/**/*"
                  },
                  "docker": {
                    "dockerfile": "path/to/Dockerfile",
                    "buildArgs": {
                      "ARG1": "value1",
                      "ARG2": "value2"
                    },
                    "cacheFrom": [
                      "gcr.io/my-project/my-cache-image"
                    ],
                    "target": "my-target"
                  }
                }
              ],
              "tagPolicy": {
                "gitCommit": {}
              }
            },
            "test": [
              {
                "image": "gcr.io/my-project/my-image",
                "structureTests": [
                  "path/to/test1",
                  "path/to/test2"
                ]
              }
            ],
            "deploy": {
              "helm": {
                "releases": [
                  {
                    "name": "my-release",
                    "chartPath": "path/to/chart",
                    "valuesFiles": [
                      "path/to/values1.yaml",
                      "path/to/values2.yaml"
                    ],
                    "values": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "namespace": "my-namespace",
                    "version": "1.0.0",
                    "setValues": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "setValueTemplates": {
                      "key1": "value1",
                      "key2": "value2"
                    },
                    "wait": true,
                    "recreatePods": true,
                    "overrides": {},
                    "packaged": {
                      "version": "1.0.0",
                      "appVersion": "1.0.0"
                    },
                    "imageStrategy": {
                      "helm": {
                        "image.repository": "gcr.io/my-project/my-image",
                        "image.tag": "latest"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    }
  ]
}