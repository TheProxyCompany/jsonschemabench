{
  "description": "sample Github_hard/o29445.json",
  "meta": {
    "full_size": 11232,
    "stripped_size": 6078,
    "features": [
      "$ref",
      "@minmaxInteger",
      "@minmaxLength",
      "@siblingKeys",
      "additionalProperties",
      "additionalProperties:object",
      "anyOf",
      "enum",
      "items",
      "not",
      "oneOf",
      "pattern",
      "patternProperties"
    ],
    "raw_features": [
      "_boolSchema",
      "definitions",
      "minLength",
      "minimum",
      "oneOf:trivial",
      "properties",
      "required",
      "type",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "additionalProperties": false,
    "definitions": {
      "additionalHostnamesList": {
        "items": {
          "minLength": 1,
          "type": "string"
        },
        "type": "array",
        "_uniqueItems": true
      },
      "buildArgList": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "capabilityList": {
        "items": {
          "oneOf": [
            {
              "enum": [
                "AUDIT_CONTROL",
                "AUDIT_READ",
                "AUDIT_WRITE",
                "BLOCK_SUSPEND",
                "CHOWN",
                "DAC_OVERRIDE",
                "DAC_READ_SEARCH",
                "FOWNER",
                "FSETID",
                "IPC_LOCK",
                "IPC_OWNER",
                "KILL",
                "LEASE",
                "LINUX_IMMUTABLE",
                "MAC_ADMIN",
                "MAC_OVERRIDE",
                "MKNOD",
                "NET_ADMIN",
                "NET_BIND_SERVICE",
                "NET_BROADCAST",
                "NET_RAW",
                "SETGID",
                "SETFCAP",
                "SETPCAP",
                "SETUID",
                "SYS_ADMIN",
                "SYS_BOOT",
                "SYS_CHROOT",
                "SYS_MODULE",
                "SYS_NICE",
                "SYS_PACCT",
                "SYS_PTRACE",
                "SYS_RAWIO",
                "SYS_RESOURCE",
                "SYS_TIME",
                "SYS_TTY_CONFIG",
                "SYSLOG",
                "WAKE_ALARM",
                "ALL"
              ],
              "type": "string"
            }
          ]
        },
        "type": "array"
      },
      "configVariable": {
        "additionalProperties": false,
        "description": "Definition of a single config variable",
        "properties": {
          "default": {
            "description": "Default value of the variable if one is not provided elsewhere",
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "description": "Human-readable description of the purpose of the variable",
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "configVariablesList": {
        "additionalProperties": {
          "$ref": "#/definitions/configVariable"
        },
        "description": "Definitions for each of the config variables used to configure your tasks and containers",
        "type": "object"
      },
      "container": {
        "additionalProperties": false,
        "oneOf": [
          {
            "not": {
              "required": [
                "build_args",
                "dockerfile"
              ]
            },
            "required": [
              "image"
            ]
          },
          {
            "required": [
              "build_directory"
            ]
          }
        ],
        "properties": {
          "additional_hostnames": {
            "$ref": "#/definitions/additionalHostnamesList",
            "description": "Hostnames to associate with this container in addition to the default hostname"
          },
          "additional_hosts": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional hostnames to add to /etc/hosts in the container",
            "type": "object"
          },
          "build_args": {
            "$ref": "#/definitions/buildArgList",
            "description": "List of build args to use when building the image in build_directory"
          },
          "build_directory": {
            "description": "Path (relative to the configuration file's directory) to a directory containing a Dockerfile to build and use as an image for this container",
            "minLength": 1,
            "type": "string"
          },
          "capabilities_to_add": {
            "$ref": "#/definitions/capabilityList",
            "description": "List of additional capabilities to add to the container"
          },
          "capabilities_to_drop": {
            "$ref": "#/definitions/capabilityList",
            "description": "List of additional capabilities to remove from the container"
          },
          "command": {
            "description": "Command to run when the container starts",
            "minLength": 1,
            "type": "string"
          },
          "dependencies": {
            "$ref": "#/definitions/containerDependencyList",
            "description": "List of other containers that should be started and healthy before starting this container"
          },
          "dockerfile": {
            "description": "Dockerfile (relative to build_directory) to use when building the image. Defaults to Dockerfile` if not set.",
            "minLength": 1,
            "type": "string"
          },
          "enable_init_process": {
            "description": "Set to `true` to run an init process inside the container that forwards signals and reaps processes",
            "type": "boolean"
          },
          "entrypoint": {
            "description": "Entrypoint to use to run the command",
            "minLength": 1,
            "type": "string"
          },
          "environment": {
            "$ref": "#/definitions/environmentVariableList",
            "description": "List of environment variables for the container"
          },
          "health_check": {
            "$ref": "#/definitions/healthCheckOptions",
            "description": "Overrides health check configuration specified in the image or Dockerfile"
          },
          "image": {
            "description": "Image name (in standard Docker image reference format) to use for this container",
            "minLength": 1,
            "type": "string"
          },
          "log_driver": {
            "description": "Docker log driver to use",
            "type": "string"
          },
          "log_options": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional options to pass to Docker log driver",
            "type": "object"
          },
          "ports": {
            "$ref": "#/definitions/portMappingList",
            "description": "List of ports to make available to the host machine"
          },
          "privileged": {
            "description": "Enable privileged mode for the container",
            "type": "boolean"
          },
          "run_as_current_user": {
            "$ref": "#/definitions/runAsCurrentUserOptions"
          },
          "setup_commands": {
            "$ref": "#/definitions/setupCommandsList",
            "description": "Commands to run after the container reports as healthy but before dependency containers start"
          },
          "volumes": {
            "$ref": "#/definitions/volumeMountList",
            "description": "List of volume mounts to create for the container"
          },
          "working_directory": {
            "description": "Working directory to start the container in",
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "containerDependencyList": {
        "items": {
          "minLength": 1,
          "type": "string"
        },
        "type": "array",
        "_uniqueItems": true
      },
      "containers": {
        "additionalProperties": {
          "$ref": "#/definitions/container"
        },
        "description": "Definitions for each of the containers that make up your various environments",
        "type": "object"
      },
      "environmentVariableList": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "healthCheckOptions": {
        "additionalProperties": false,
        "properties": {
          "command": {
            "description": "The command to run to check the health of the container. If this command exits with code 0, the container is considered healthy.",
            "minLength": 1,
            "type": "string"
          },
          "interval": {
            "description": "The interval between runs of the health check. Accepts values such as `2s` (two seconds) or `1m` (one minute).",
            "minLength": 1,
            "type": "string"
          },
          "retries": {
            "description": "The number of times to perform the health check before considering the container unhealthy",
            "minimum": 0,
            "type": "integer"
          },
          "start_period": {
            "description": "The time to wait before failing health checks count against the retry count. The health check is still run during this period, and if the check succeeds, the container is immediately considered healthy. Accepts values such as `2s` (two seconds) or `1m` (one minute).",
            "minLength": 1,
            "type": "string"
          }
        },
        "type": "object"
      },
      "includesList": {
        "description": "List of configuration files to include in this project",
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "portMappingList": {
        "items": {
          "oneOf": [
            {
              "pattern": "^\\d+(-\\d+)?:\\d+(-\\d+)?(/.*)?$",
              "type": "string"
            },
            {
              "additionalProperties": false,
              "properties": {
                "container": {
                  "description": "Port inside the container to map",
                  "minimum": 1,
                  "type": "integer"
                },
                "local": {
                  "description": "Port on the host machine to map",
                  "minimum": 1,
                  "type": "integer"
                },
                "protocol": {
                  "description": "Protocol to use (eg. TCP or UDP)",
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "local",
                "container"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "container": {
                  "description": "Ports inside the container to map",
                  "pattern": "^\\d+-\\d+$",
                  "type": "string"
                },
                "local": {
                  "description": "Ports on the host machine to map",
                  "pattern": "^\\d+-\\d+$",
                  "type": "string"
                },
                "protocol": {
                  "description": "Protocol to use (eg. TCP or UDP)",
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "local",
                "container"
              ],
              "type": "object"
            }
          ]
        },
        "type": "array"
      },
      "runAsCurrentUserOptions": {
        "oneOf": [
          {
            "additionalProperties": false,
            "properties": {
              "enabled": {
                "description": "Set to `true` to enable 'run as current user' mode",
                "enum": [
                  false
                ],
                "type": "boolean"
              }
            },
            "required": [
              "enabled"
            ],
            "type": "object"
          },
          {
            "additionalProperties": false,
            "properties": {
              "enabled": {
                "description": "Set to `true` to enable 'run as current user' mode",
                "enum": [
                  true
                ],
                "type": "boolean"
              },
              "home_directory": {
                "description": "Directory to use as home directory for user inside container",
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "enabled",
              "home_directory"
            ],
            "type": "object"
          }
        ]
      },
      "setupCommandsList": {
        "items": {
          "additionalProperties": false,
          "properties": {
            "command": {
              "description": "Command to execute",
              "minLength": 1,
              "type": "string"
            },
            "working_directory": {
              "description": "Working directory to start the command in (defaults to container working directory if not set)",
              "minLength": 1,
              "type": "string"
            }
          },
          "required": [
            "command"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "task": {
        "additionalProperties": false,
        "anyOf": [
          {
            "required": [
              "run"
            ]
          },
          {
            "not": {
              "required": [
                "dependencies",
                "run"
              ]
            },
            "required": [
              "prerequisites"
            ]
          }
        ],
        "description": "Definition of a single task",
        "properties": {
          "dependencies": {
            "$ref": "#/definitions/containerDependencyList",
            "description": "List of other containers that should be started and healthy before starting the task container given in `run`"
          },
          "description": {
            "description": "Description shown when running `batect --list-tasks`",
            "minLength": 1,
            "type": "string"
          },
          "group": {
            "description": "Name used to group tasks when running `batect --list-tasks`",
            "minLength": 1,
            "type": "string"
          },
          "prerequisites": {
            "description": "List of other tasks that should be run before running this task",
            "items": {
              "type": "string"
            },
            "type": "array",
            "_uniqueItems": true
          },
          "run": {
            "$ref": "#/definitions/taskRunOptions"
          }
        },
        "type": "object"
      },
      "taskRunOptions": {
        "additionalProperties": false,
        "description": "Specifies what to do when this task starts",
        "properties": {
          "command": {
            "description": "Command to run for this task",
            "minLength": 1,
            "type": "string"
          },
          "container": {
            "description": "Container to run for this task",
            "minLength": 1,
            "type": "string"
          },
          "entrypoint": {
            "description": "Entrypoint to use to run the command for this task",
            "minLength": 1,
            "type": "string"
          },
          "environment": {
            "$ref": "#/definitions/environmentVariableList",
            "description": "List of environment variables to pass to the container, in addition to those defined on the container itself"
          },
          "ports": {
            "$ref": "#/definitions/portMappingList",
            "description": "List of port mappings to create for the container, in addition to those defined on the container itself"
          },
          "working_directory": {
            "description": "Working directory to start the container in",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "container"
        ],
        "type": "object"
      },
      "tasks": {
        "additionalProperties": {
          "$ref": "#/definitions/task"
        },
        "description": "Definitions for each of your tasks, the actions you launch through batect",
        "type": "object"
      },
      "volumeMountList": {
        "items": {
          "oneOf": [
            {
              "pattern": "^.+:.+(:.+)?$",
              "type": "string"
            },
            {
              "additionalProperties": false,
              "properties": {
                "container": {
                  "description": "Path inside the container to mount the host path at",
                  "minLength": 1,
                  "type": "string"
                },
                "local": {
                  "description": "Path on the host machine to mount",
                  "minLength": 1,
                  "type": "string"
                },
                "options": {
                  "description": "Docker volume mount options to use when creating mount",
                  "enum": [
                    "cached",
                    "delegated",
                    "consistent",
                    "default",
                    "ro"
                  ],
                  "type": "string"
                },
                "type": {
                  "description": "Type of volume mount",
                  "enum": [
                    "local"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "local",
                "container"
              ],
              "type": "object"
            },
            {
              "additionalProperties": false,
              "properties": {
                "container": {
                  "description": "Path inside the container to mount the cache at",
                  "minLength": 1,
                  "type": "string"
                },
                "name": {
                  "description": "Name of the cache",
                  "minLength": 1,
                  "type": "string"
                },
                "options": {
                  "description": "Docker volume mount options to use when creating mount",
                  "enum": [
                    "cached",
                    "delegated",
                    "consistent",
                    "default",
                    "ro"
                  ],
                  "type": "string"
                },
                "type": {
                  "description": "Type of volume mount",
                  "enum": [
                    "cache"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "type",
                "name",
                "container"
              ],
              "type": "object"
            }
          ]
        },
        "type": "array"
      }
    },
    "patternProperties": {
      "^\\.": {}
    },
    "properties": {
      "config_variables": {
        "$ref": "#/definitions/configVariablesList"
      },
      "containers": {
        "$ref": "#/definitions/containers"
      },
      "include": {
        "$ref": "#/definitions/includesList"
      },
      "project_name": {
        "description": "The name of your project. Used to label any images built.",
        "minLength": 1,
        "type": "string"
      },
      "tasks": {
        "$ref": "#/definitions/tasks"
      }
    },
    "title": "JSON schema for batect configuration files",
    "type": "object"
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "project_name": "My Project",
        "containers": {
          "my-container": {
            "image": "nginx:latest",
            "ports": [
              "8080:80"
            ],
            "environment": {
              "NGINX_PORT": "80"
            }
          },
          "my-db": {
            "image": "postgres:latest",
            "ports": [
              "5432:5432"
            ],
            "environment": {
              "POSTGRES_USER": "myuser",
              "POSTGRES_PASSWORD": "mypassword"
            }
          }
        },
        "tasks": {
          "start-my-container": {
            "run": {
              "container": "my-container",
              "command": "nginx -g 'daemon off;'"
            },
            "dependencies": [
              "my-db"
            ]
          },
          "start-my-db": {
            "run": {
              "container": "my-db",
              "command": "postgres"
            }
          }
        }
      }
    },
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "project_name": "My Project",
        "containers": {
          "my-container": {
            "image": "nginx:latest",
            "ports": [
              "8080:80"
            ],
            "environment": {
              "MY_VAR": "my-value"
            },
            "volumes": [
              {
                "local": "/path/to/host/directory",
                "container": "/path/to/container/directory"
              }
            ]
          }
        },
        "tasks": {
          "my-task": {
            "run": {
              "container": "my-container",
              "command": "echo 'Hello World!'",
              "working_directory": "/path/to/container/directory"
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on pattern keyword",
      "valid": false,
      "rust_error": "\".invalid-volume-mount\" is not valid under any of the schemas listed in the 'oneOf' keyword",
      "python_error": "'.invalid-volume-mount' does not match '^.+:.+(:.+)?$'\n\nFailed validating 'pattern' in schema[0]:\n    {'pattern': '^.+:.+(:.+)?$', 'type': 'string'}\n\nOn instance:\n    '.invalid-volume-mount'",
      "data": {
        "project_name": "My Project",
        "containers": {
          "my-container": {
            "image": "nginx:latest",
            "ports": [
              "8080:80"
            ],
            "environment": {
              "MY_VAR": "my-value"
            },
            "volumes": [
              {
                "local": "/path/to/host/directory",
                "container": "/path/to/container/directory"
              },
              ".invalid-volume-mount"
            ]
          }
        },
        "tasks": {
          "my-task": {
            "run": {
              "container": "my-container",
              "command": "echo 'Hello World!'",
              "working_directory": "/path/to/container/directory"
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on oneOf keyword",
      "valid": false,
      "rust_error": "{\"image\":\"nginx:latest\",\"build_directory\":\"/path/to/build/directory\",\"dockerfile\":\"Dockerfile\",\"ports\":[\"8080:80\"],\"environment\":{\"MY_VAR\":\"my-value\"},\"volumes\":[{\"local\":\"/path/to/host/directory\",\"container\":\"/path/to/container/directory\"}]} is valid under more than one of the schemas listed in the 'oneOf' keyword",
      "python_error": "{'image': 'nginx:latest', 'build_directory': '/path/to/build/directory', 'dockerfile': 'Dockerfile', 'ports': ['8080:80'], 'environment': {'MY_VAR': 'my-value'}, 'volumes': [{'local': '/path/to/host/directory', 'container': '/path/to/container/directory'}]} is valid under each of {'required': ['build_directory']}, {'not': {'required': ['build_args', 'dockerfile']}, 'required': ['image']}\n\nFailed validating 'oneOf' in schema['properties']['containers']['additionalProperties']:\n    {'additionalProperties': False,\n     'oneOf': [{'not': {'required': ['build_args', 'dockerfile']},\n                'required': ['image']},\n               {'required': ['build_directory']}],\n     'properties': {'additional_hostnames': {'$ref': '#/definitions/additionalHostnamesList',\n                                             'description': 'Hostnames to '\n                                                            'associate '\n                                                            'with this '\n                                 .. (8602 more)",
      "data": {
        "project_name": "My Project",
        "containers": {
          "my-container": {
            "image": "nginx:latest",
            "build_directory": "/path/to/build/directory",
            "dockerfile": "Dockerfile",
            "ports": [
              "8080:80"
            ],
            "environment": {
              "MY_VAR": "my-value"
            },
            "volumes": [
              {
                "local": "/path/to/host/directory",
                "container": "/path/to/container/directory"
              }
            ]
          }
        },
        "tasks": {
          "my-task": {
            "run": {
              "container": "my-container",
              "command": "echo 'Hello World!'",
              "working_directory": "/path/to/container/directory"
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['tasks']['additionalProperties']['properties']['run']['properties']['command']:\n    {'description': 'Command to run for this task',\n     'minLength': 1,\n     'type': 'string'}\n\nOn instance['tasks']['my-task']['run']['command']:\n    ''",
      "data": {
        "project_name": "My Project",
        "containers": {
          "my-container": {
            "image": "nginx:latest",
            "ports": [
              "8080:80"
            ],
            "environment": {
              "MY_VAR": "a"
            },
            "volumes": [
              {
                "local": "/path/to/host/directory",
                "container": "/path/to/container/directory"
              }
            ]
          }
        },
        "tasks": {
          "my-task": {
            "run": {
              "container": "my-container",
              "command": "",
              "working_directory": "/path/to/container/directory"
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on patternProperties keyword",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('.additionalProperty' was unexpected)",
      "python_error": "Additional properties are not allowed ('.additionalProperty' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['containers']['additionalProperties']:\n    {'additionalProperties': False,\n     'oneOf': [{'not': {'required': ['build_args', 'dockerfile']},\n                'required': ['image']},\n               {'required': ['build_directory']}],\n     'properties': {'additional_hostnames': {'$ref': '#/definitions/additionalHostnamesList',\n                                             'description': 'Hostnames to '\n                                                            'associate '\n                                                            'with this '\n                                                            'container in '\n                                                            'addition to '\n                                                            'the default '\n                                                            'hostname'},\n                    'additional_h.. (8252 more)",
      "data": {
        "project_name": "My Project",
        "containers": {
          "my-container": {
            "image": "nginx:latest",
            "ports": [
              "8080:80"
            ],
            "environment": {
              "MY_VAR": "my-value"
            },
            "volumes": [
              {
                "local": "/path/to/host/directory",
                "container": "/path/to/container/directory"
              }
            ],
            ".additionalProperty": true
          }
        },
        "tasks": {
          "my-task": {
            "run": {
              "container": "my-container",
              "command": "echo 'Hello World!'",
              "working_directory": "/path/to/container/directory"
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on additionalProperties keyword with an object schema",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('additional_property' was unexpected)",
      "python_error": "Additional properties are not allowed ('additional_property' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['containers']['additionalProperties']:\n    {'additionalProperties': False,\n     'oneOf': [{'not': {'required': ['build_args', 'dockerfile']},\n                'required': ['image']},\n               {'required': ['build_directory']}],\n     'properties': {'additional_hostnames': {'$ref': '#/definitions/additionalHostnamesList',\n                                             'description': 'Hostnames to '\n                                                            'associate '\n                                                            'with this '\n                                                            'container in '\n                                                            'addition to '\n                                                            'the default '\n                                                            'hostname'},\n                    'additional_h.. (8255 more)",
      "data": {
        "project_name": "My Project",
        "containers": {
          "my-container": {
            "image": "nginx:latest",
            "ports": [
              "8080:80"
            ],
            "environment": {
              "MY_VAR": "my-value"
            },
            "volumes": [
              {
                "local": "/path/to/host/directory",
                "container": "/path/to/container/directory"
              }
            ],
            "additional_property": "value"
          }
        },
        "tasks": {
          "my-task": {
            "run": {
              "container": "my-container",
              "command": "echo 'Hello World!'",
              "working_directory": "/path/to/container/directory"
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minLength keyword",
      "valid": false,
      "rust_error": "\"\" is shorter than 1 character",
      "python_error": "'' should be non-empty\n\nFailed validating 'minLength' in schema['properties']['project_name']:\n    {'description': 'The name of your project. Used to label any images '\n                    'built.',\n     'minLength': 1,\n     'type': 'string'}\n\nOn instance['project_name']:\n    ''",
      "data": {
        "project_name": "",
        "containers": {
          "my-container": {
            "image": "nginx:latest",
            "ports": [
              "8080:80"
            ],
            "environment": {
              "MY_VAR": "my-value"
            },
            "volumes": [
              {
                "local": "/path/to/host/directory",
                "container": "/path/to/container/directory"
              }
            ]
          }
        },
        "tasks": {
          "my-task": {
            "run": {
              "container": "my-container",
              "command": "echo 'Hello World!'",
              "working_directory": "/path/to/container/directory"
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on anyOf keyword",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('dependencies' was unexpected)",
      "python_error": "Additional properties are not allowed ('dependencies' was unexpected)\n\nFailed validating 'additionalProperties' in schema['properties']['tasks']['additionalProperties']['properties']['run']:\n    {'additionalProperties': False,\n     'description': 'Specifies what to do when this task starts',\n     'properties': {'command': {'description': 'Command to run for this '\n                                               'task',\n                                'minLength': 1,\n                                'type': 'string'},\n                    'container': {'description': 'Container to run for '\n                                                 'this task',\n                                  'minLength': 1,\n                                  'type': 'string'},\n                    'entrypoint': {'description': 'Entrypoint to use to '\n                                                  'run the command for '\n                                                  'this task',\n                                   'minLength': 1,\n    .. (1592 more)",
      "data": {
        "project_name": "My Project",
        "containers": {
          "my-container": {
            "image": "nginx:latest",
            "ports": [
              "8080:80"
            ],
            "environment": {
              "MY_VAR": "my-value"
            },
            "volumes": [
              {
                "local": "/path/to/host/directory",
                "container": "/path/to/container/directory"
              }
            ]
          }
        },
        "tasks": {
          "my-task": {
            "run": {
              "container": "my-container",
              "command": "echo 'Hello World!'",
              "working_directory": "/path/to/container/directory",
              "dependencies": []
            },
            "prerequisites": []
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "5 is not of type \"string\"",
      "python_error": "123 is not of type 'string'\n\nFailed validating 'type' in schema['properties']['tasks']['additionalProperties']['properties']['run']['properties']['command']:\n    {'description': 'Command to run for this task',\n     'minLength': 1,\n     'type': 'string'}\n\nOn instance['tasks']['my-task']['run']['command']:\n    123",
      "data": {
        "project_name": "My Project",
        "containers": {
          "my-container": {
            "image": "nginx:latest",
            "ports": [
              "8080:80"
            ],
            "environment": {
              "MY_VAR": 5
            },
            "volumes": [
              {
                "local": "/path/to/host/directory",
                "container": "/path/to/container/directory"
              }
            ]
          }
        },
        "tasks": {
          "my-task": {
            "run": {
              "container": "my-container",
              "command": 123,
              "working_directory": "/path/to/container/directory"
            }
          }
        }
      }
    }
  ]
}