{
  "description": "sample JsonSchemaStore/ray-schema.json",
  "meta": {
    "full_size": 10683,
    "stripped_size": 4047,
    "features": [
      "$ref",
      "@minmaxInteger",
      "@minmaxNumber",
      "additionalProperties",
      "enum",
      "items",
      "patternProperties"
    ],
    "raw_features": [
      "$id",
      "$schema",
      "_boolSchema",
      "definitions",
      "minimum",
      "properties",
      "required",
      "type",
      "type:[]",
      "type:array",
      "type:boolean",
      "type:integer",
      "type:null",
      "type:number",
      "type:object",
      "type:string"
    ]
  },
  "schema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://github.com/ray-project/ray/python/ray/autoscaler/ray-schema.json",
    "title": "Ray AutoScaler",
    "description": "Ray autoscaler schema",
    "type": "object",
    "definitions": {
      "commands": {
        "type": "array",
        "items": {
          "type": "string",
          "description": "shell command"
        }
      }
    },
    "required": [
      "cluster_name",
      "provider"
    ],
    "additionalProperties": false,
    "properties": {
      "cluster_name": {
        "description": "A unique identifier for the head node and workers of this cluster.",
        "type": "string"
      },
      "max_workers": {
        "description": "The maximum number of workers nodes to launch in addition to the head node. This takes precedence over min_workers.",
        "type": "integer",
        "minimum": 0
      },
      "upscaling_speed": {
        "description": "The autoscaler will scale up the cluster faster with higher upscaling speed. E.g., if the task requires adding more nodes then autoscaler will gradually scale up the cluster in chunks of upscaling_speed*currently_running_nodes. This number should be > 0.",
        "type": "number",
        "minimum": 0
      },
      "idle_timeout_minutes": {
        "description": "If a node is idle for this many minutes, it will be removed.",
        "type": "number",
        "minimum": 0
      },
      "provider": {
        "type": "object",
        "description": "Cloud-provider specific configuration.",
        "required": [
          "type"
        ],
        "additionalProperties": true,
        "properties": {
          "type": {
            "type": "string",
            "description": "e.g. aws, azure, gcp,..."
          },
          "region": {
            "type": "string",
            "description": "e.g. us-east-1"
          },
          "module": {
            "type": "string",
            "description": "module, if using external node provider"
          },
          "head_ip": {
            "type": "string",
            "description": "gcp project id, if using gcp"
          },
          "worker_ips": {
            "type": "array",
            "description": "local cluster head node"
          },
          "use_internal_ips": {
            "type": "boolean",
            "description": "don't require public ips"
          },
          "namespace": {
            "type": "string",
            "description": "k8s namespace, if using k8s"
          },
          "location": {
            "type": "string",
            "description": "Azure location"
          },
          "resource_group": {
            "type": "string",
            "description": "Azure resource group"
          },
          "tags": {
            "type": "object",
            "description": "Azure user-defined tags"
          },
          "subscription_id": {
            "type": "string",
            "description": "Azure subscription id"
          },
          "msi_identity_id": {
            "type": "string",
            "description": "User-defined managed identity (generated by config)"
          },
          "msi_identity_principal_id": {
            "type": "string",
            "description": "User-defined managed identity principal id (generated by config)"
          },
          "subnet_id": {
            "type": "string",
            "description": "Network subnet id"
          },
          "autoscaler_service_account": {
            "type": "object",
            "description": "k8s autoscaler permissions, if using k8s"
          },
          "autoscaler_role": {
            "type": "object",
            "description": "k8s autoscaler permissions, if using k8s"
          },
          "autoscaler_role_binding": {
            "type": "object",
            "description": "k8s autoscaler permissions, if using k8s"
          },
          "cache_stopped_nodes": {
            "type": "boolean",
            "description": " Whether to try to reuse previously stopped nodes instead of launching nodes. This will also cause the autoscaler to stop nodes instead of terminating them. Only implemented for AWS."
          },
          "availability_zone": {
            "type": "string",
            "description": "GCP availability zone"
          },
          "project_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "GCP globally unique project id"
          },
          "security_group": {
            "type": "object",
            "description": "AWS security group",
            "additionalProperties": false,
            "properties": {
              "GroupName": {
                "type": "string",
                "description": "Security group name"
              },
              "IpPermissions": {
                "type": "array",
                "description": "Security group in bound rules"
              }
            }
          },
          "disable_node_updaters": {
            "type": "boolean",
            "description": "Disables node updaters if set to True. Default is False. (For Kubernetes operator usage.)"
          },
          "gcp_credentials": {
            "type": "object",
            "description": "Credentials for authenticating with the GCP client",
            "required": [
              "type"
            ],
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "credentials_token",
                  "service_account"
                ],
                "description": "Credentials type: either temporary OAuth 2.0 token or permanent service account credentials blob."
              },
              "credentials": {
                "type": "string",
                "description": "Oauth token or JSON string constituting service account credentials"
              }
            }
          },
          "cloudwatch": {
            "agent": {
              "CLOUDWATCH_AGENT_INSTALLED_AMI_TAG": {
                "type": [
                  "string"
                ],
                "description": "Tag to be added to cloudwatch agent pre-installed AMI name."
              },
              "config": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Path to Unified CloudWatch Agent config file. See https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Agent-Configuration-File-Details.html for additional details."
              },
              "retryer": {
                "max_attempts": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "description": "Max allowed Unified CloudWatch Agent installation attempts on any host."
                },
                "delay_seconds": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "description": "Seconds to wait between each Unified CloudWatch Agent installation attempt."
                }
              }
            },
            "dashboard": {
              "name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "User defined CloudWatch Dashboard name."
              },
              "config": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Path to CloudWatch Dashboard config file. See https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html for additional details."
              }
            },
            "alarm": {
              "config": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Path to CloudWatch Alarm config file. See https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html for additional details."
              }
            }
          }
        }
      },
      "auth": {
        "type": "object",
        "description": "How Ray will authenticate with newly launched nodes.",
        "additionalProperties": false,
        "properties": {
          "ssh_user": {
            "type": "string",
            "default": "ubuntu"
          },
          "ssh_public_key": {
            "type": "string"
          },
          "ssh_private_key": {
            "type": "string"
          },
          "ssh_proxy_command": {
            "description": "A value for ProxyCommand ssh option, for connecting through proxies. Example: nc -x proxy.example.com:1234 %h %p",
            "type": "string"
          }
        }
      },
      "docker": {
        "type": "object",
        "description": "Docker configuration. If this is specified, all setup and start commands will be executed in the container.",
        "additionalProperties": false,
        "properties": {
          "image": {
            "type": "string",
            "description": "the docker image name",
            "default": "rayproject/ray:latest"
          },
          "container_name": {
            "type": "string",
            "default": "ray_docker"
          },
          "pull_before_run": {
            "type": "boolean",
            "description": "run `docker pull` first"
          },
          "run_options": {
            "type": "array",
            "description": "shared options for starting head/worker docker"
          },
          "head_image": {
            "type": "string",
            "description": "image for head node, takes precedence over 'image' if specified"
          },
          "head_run_options": {
            "type": "array",
            "description": "head specific run options, appended to run_options"
          },
          "worker_image": {
            "type": "string",
            "description": "analogous to head_image"
          },
          "worker_run_options": {
            "type": "array",
            "description": "analogous to head_run_options"
          },
          "disable_automatic_runtime_detection": {
            "type": "boolean",
            "description": "disable Ray from automatically using the NVIDIA runtime if available",
            "default": false
          },
          "disable_shm_size_detection": {
            "type": "boolean",
            "description": "disable Ray from automatically detecting /dev/shm size for the container",
            "default": false
          },
          "use_podman": {
            "type": "boolean",
            "description": "Use 'podman' command in place of 'docker'",
            "default": false
          }
        }
      },
      "head_node_type": {
        "type": "string",
        "description": "If using multiple node types, specifies the head node type."
      },
      "file_mounts": {
        "type": "object",
        "description": "Map of remote paths to local paths, e.g. {\"/tmp/data\": \"/my/local/data\"}"
      },
      "cluster_synced_files": {
        "type": "array",
        "description": "List of paths on the head node which should sync to the worker nodes, e.g. [\"/some/data/somehwere\"]"
      },
      "file_mounts_sync_continuously": {
        "type": "boolean",
        "description": "If enabled, file mounts will sync continously between the head node and the worker nodes. The nodes will not re-run setup commands if only the contents of the file mounts folders change."
      },
      "rsync_exclude": {
        "type": "array",
        "description": "File pattern to not sync up or down when using the rsync command. Matches the format of rsync's --exclude param."
      },
      "rsync_filter": {
        "type": "array",
        "description": "Pattern files to lookup patterns to exclude when using rsync up or rsync down. This file is checked for recursively in all directories. For example, if .gitignore is provided here, the behavior will match git's .gitignore behavior."
      },
      "metadata": {
        "type": "object",
        "description": "Metadata field that can be used to store user-defined data in the cluster config. Ray does not interpret these fields."
      },
      "initialization_commands": {
        "$ref": "#/definitions/commands",
        "description": "List of commands that will be run before `setup_commands`. If docker is enabled, these commands will run outside the container and before docker is setup."
      },
      "setup_commands": {
        "$ref": "#/definitions/commands",
        "description": "List of common shell commands to run to setup nodes."
      },
      "head_setup_commands": {
        "$ref": "#/definitions/commands",
        "description": "Commands that will be run on the head node after common setup."
      },
      "worker_setup_commands": {
        "$ref": "#/definitions/commands",
        "description": "Commands that will be run on worker nodes after common setup."
      },
      "head_start_ray_commands": {
        "$ref": "#/definitions/commands",
        "description": "Command to start ray on the head node. You shouldn't need to modify this."
      },
      "worker_start_ray_commands": {
        "$ref": "#/definitions/commands",
        "description": "Command to start ray on worker nodes. You shouldn't need to modify this."
      },
      "no_restart": {
        "description": "Whether to avoid restarting the cluster during updates. This field is controlled by the ray --no-restart flag and cannot be set by the user."
      },
      "available_node_types": {
        "type": "object",
        "description": "A list of node types for multi-node-type autoscaling.",
        "patternProperties": {
          ".*": {
            "type": "object",
            "required": [
              "resources",
              "node_config"
            ],
            "properties": {
              "node_config": {
                "type": "object",
                "description": "Provider-specific config for the node, e.g. instance type."
              },
              "min_workers": {
                "type": "integer"
              },
              "max_workers": {
                "type": "integer"
              },
              "resources": {
                "type": "object",
                "patternProperties": {
                  ".*": {
                    "type": "integer",
                    "minimum": 0
                  }
                }
              },
              "labels": {
                "type": "object",
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                }
              },
              "initialization_commands": {
                "$ref": "#/definitions/commands",
                "description": "List of commands that will be run before `setup_commands`. If docker is enabled, these commands will run outside the container and before docker is setup."
              },
              "worker_setup_commands": {
                "$ref": "#/definitions/commands",
                "description": "List of common shell commands to run to setup nodes. This node specfic list will override the global setup_commands and worker_setup_commands."
              },
              "docker": {
                "description": "Configuration of Worker nodes.",
                "type": "object",
                "properties": {
                  "pull_before_run": {
                    "type": "boolean",
                    "description": "run `docker pull` first"
                  },
                  "worker_image": {
                    "type": "string",
                    "description": "analogous to head_image"
                  },
                  "worker_run_options": {
                    "type": "array",
                    "description": "analogous to head_run_options, merged with the global docker run_options."
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    }
  },
  "tests": [
    {
      "description": "llama 70b generated positive",
      "valid": true,
      "data": {
        "cluster_name": "my-ray-cluster",
        "provider": {
          "type": "aws",
          "region": "us-east-1",
          "head_ip": "10.0.0.1",
          "worker_ips": [
            "10.0.0.2",
            "10.0.0.3"
          ],
          "use_internal_ips": true,
          "availability_zone": "us-east-1a",
          "security_group": {
            "GroupName": "my-security-group",
            "IpPermissions": [
              {
                "IpProtocol": "tcp",
                "FromPort": 22,
                "ToPort": 22,
                "IpRanges": [
                  {
                    "CidrIp": "0.0.0.0/0"
                  }
                ]
              }
            ]
          }
        },
        "auth": {
          "ssh_user": "ubuntu",
          "ssh_public_key": "~/.ssh/id_rsa.pub",
          "ssh_private_key": "~/.ssh/id_rsa"
        },
        "docker": {
          "image": "rayproject/ray:latest",
          "container_name": "ray_docker",
          "pull_before_run": true,
          "run_options": [
            "--shm-size=1g"
          ],
          "head_image": "rayproject/ray:latest",
          "head_run_options": [
            "--shm-size=2g"
          ],
          "worker_image": "rayproject/ray:latest",
          "worker_run_options": [
            "--shm-size=1g"
          ]
        },
        "file_mounts": {
          "/tmp/data": "/my/local/data"
        },
        "cluster_synced_files": [
          "/some/data/somewhere"
        ],
        "file_mounts_sync_continuously": true,
        "rsync_exclude": [
          ".git"
        ],
        "rsync_filter": [
          ".gitignore"
        ],
        "metadata": {
          "user-defined-data": "some-value"
        },
        "initialization_commands": [
          "echo 'Initializing...'",
          "sleep 5"
        ],
        "setup_commands": [
          "echo 'Setting up...'",
          "apt-get update"
        ],
        "head_setup_commands": [
          "echo 'Setting up head...'",
          "apt-get install -y python3"
        ],
        "worker_setup_commands": [
          "echo 'Setting up worker...'",
          "apt-get install -y python3"
        ],
        "head_start_ray_commands": [
          "ray start --head --port=6379"
        ],
        "worker_start_ray_commands": [
          "ray start --address='auto:6379'"
        ],
        "available_node_types": {
          "node-type-1": {
            "node_config": {
              "InstanceType": "c5.xlarge"
            },
            "min_workers": 0,
            "max_workers": 10,
            "resources": {
              "CPU": 4,
              "GPU": 0,
              "memory": 16
            },
            "labels": {
              "node-type": "node-type-1"
            },
            "initialization_commands": [
              "echo 'Initializing node-type-1...'",
              "sleep 5"
            ],
            "worker_setup_commands": [
              "echo 'Setting up node-type-1...'",
              "apt-get install -y python3"
            ],
            "docker": {
              "pull_before_run": true,
              "worker_image": "rayproject/ray:latest",
              "worker_run_options": [
                "--shm-size=1g"
              ]
            }
          },
          "node-type-2": {
            "node_config": {
              "InstanceType": "c5.2xlarge"
            },
            "min_workers": 0,
            "max_workers": 10,
            "resources": {
              "CPU": 8,
              "GPU": 0,
              "memory": 32
            },
            "labels": {
              "node-type": "node-type-2"
            },
            "initialization_commands": [
              "echo 'Initializing node-type-2...'",
              "sleep 5"
            ],
            "worker_setup_commands": [
              "echo 'Setting up node-type-2...'",
              "apt-get install -y python3"
            ],
            "docker": {
              "pull_before_run": true,
              "worker_image": "rayproject/ray:latest",
              "worker_run_options": [
                "--shm-size=2g"
              ]
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on minimum keyword",
      "valid": false,
      "rust_error": "-1 is less than the minimum of 0",
      "python_error": "-1 is less than the minimum of 0\n\nFailed validating 'minimum' in schema['properties']['upscaling_speed']:\n    {'description': 'The autoscaler will scale up the cluster faster with '\n                    'higher upscaling speed. E.g., if the task requires '\n                    'adding more nodes then autoscaler will gradually '\n                    'scale up the cluster in chunks of '\n                    'upscaling_speed*currently_running_nodes. This number '\n                    'should be > 0.',\n     'type': 'number',\n     'minimum': 0}\n\nOn instance['upscaling_speed']:\n    -1",
      "data": {
        "cluster_name": "my-ray-cluster",
        "max_workers": -1,
        "upscaling_speed": -1,
        "idle_timeout_minutes": -1,
        "provider": {
          "type": "aws",
          "region": "us-east-1",
          "head_ip": "10.0.0.1",
          "worker_ips": [
            "10.0.0.2",
            "10.0.0.3"
          ],
          "use_internal_ips": true,
          "availability_zone": "us-east-1a",
          "security_group": {
            "GroupName": "my-security-group",
            "IpPermissions": [
              {
                "IpProtocol": "tcp",
                "FromPort": 22,
                "ToPort": 22,
                "IpRanges": [
                  {
                    "CidrIp": "0.0.0.0/0"
                  }
                ]
              }
            ]
          }
        },
        "auth": {
          "ssh_user": "ubuntu",
          "ssh_public_key": "~/.ssh/id_rsa.pub",
          "ssh_private_key": "~/.ssh/id_rsa"
        },
        "docker": {
          "image": "rayproject/ray:latest",
          "container_name": "ray_docker",
          "pull_before_run": true,
          "run_options": [
            "--shm-size=1g"
          ],
          "head_image": "rayproject/ray:latest",
          "head_run_options": [
            "--shm-size=2g"
          ],
          "worker_image": "rayproject/ray:latest",
          "worker_run_options": [
            "--shm-size=1g"
          ]
        },
        "file_mounts": {
          "/tmp/data": "/my/local/data"
        },
        "cluster_synced_files": [
          "/some/data/somewhere"
        ],
        "file_mounts_sync_continuously": true,
        "rsync_exclude": [
          ".git"
        ],
        "rsync_filter": [
          ".gitignore"
        ],
        "metadata": {
          "user-defined-data": "some-value"
        },
        "initialization_commands": [
          "echo 'Initializing...'",
          "sleep 5"
        ],
        "setup_commands": [
          "echo 'Setting up...'",
          "apt-get update"
        ],
        "head_setup_commands": [
          "echo 'Setting up head...'",
          "apt-get install -y python3"
        ],
        "worker_setup_commands": [
          "echo 'Setting up worker...'",
          "apt-get install -y python3"
        ],
        "head_start_ray_commands": [
          "ray start --head --port=6379"
        ],
        "worker_start_ray_commands": [
          "ray start --address='auto:6379'"
        ],
        "available_node_types": {
          "node-type-1": {
            "node_config": {
              "InstanceType": "c5.xlarge"
            },
            "min_workers": -1,
            "max_workers": 10,
            "resources": {
              "CPU": -1,
              "GPU": 0,
              "memory": 16
            },
            "labels": {
              "node-type": "node-type-1"
            },
            "initialization_commands": [
              "echo 'Initializing node-type-1...'",
              "sleep 5"
            ],
            "worker_setup_commands": [
              "echo 'Setting up node-type-1...'",
              "apt-get install -y python3"
            ],
            "docker": {
              "pull_before_run": true,
              "worker_image": "rayproject/ray:latest",
              "worker_run_options": [
                "--shm-size=1g"
              ]
            }
          },
          "node-type-2": {
            "node_config": {
              "InstanceType": "c5.2xlarge"
            },
            "min_workers": -1,
            "max_workers": 10,
            "resources": {
              "CPU": -1,
              "GPU": 0,
              "memory": 32
            },
            "labels": {
              "node-type": "node-type-2"
            },
            "initialization_commands": [
              "echo 'Initializing node-type-2...'",
              "sleep 5"
            ],
            "worker_setup_commands": [
              "echo 'Setting up node-type-2...'",
              "apt-get install -y python3"
            ],
            "docker": {
              "pull_before_run": true,
              "worker_image": "rayproject/ray:latest",
              "worker_run_options": [
                "--shm-size=2g"
              ]
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on patternProperties keyword",
      "valid": false,
      "rust_error": "-1 is less than the minimum of 0",
      "python_error": "'GPU' is not of type 'integer'\n\nFailed validating 'type' in schema['properties']['available_node_types']['patternProperties']['.*']['properties']['resources']['patternProperties']['.*']:\n    {'type': 'integer', 'minimum': 0}\n\nOn instance['available_node_types']['node-type-1']['resources']['Invalid resource value. patternProperties in schema does not allow negative integers']:\n    'GPU'",
      "data": {
        "cluster_name": "my-ray-cluster",
        "provider": {
          "type": "aws",
          "region": "us-east-1",
          "head_ip": "10.0.0.1",
          "worker_ips": [
            "10.0.0.2",
            "10.0.0.3"
          ],
          "use_internal_ips": true,
          "availability_zone": "us-east-1a",
          "security_group": {
            "GroupName": "my-security-group",
            "IpPermissions": [
              {
                "IpProtocol": "tcp",
                "FromPort": 22,
                "ToPort": 22,
                "IpRanges": [
                  {
                    "CidrIp": "0.0.0.0/0"
                  }
                ]
              }
            ]
          }
        },
        "auth": {
          "ssh_user": "ubuntu",
          "ssh_public_key": "~/.ssh/id_rsa.pub",
          "ssh_private_key": "~/.ssh/id_rsa"
        },
        "docker": {
          "image": "rayproject/ray:latest",
          "container_name": "ray_docker",
          "pull_before_run": true,
          "run_options": [
            "--shm-size=1g"
          ],
          "head_image": "rayproject/ray:latest",
          "head_run_options": [
            "--shm-size=2g"
          ],
          "worker_image": "rayproject/ray:latest",
          "worker_run_options": [
            "--shm-size=1g"
          ]
        },
        "file_mounts": {
          "/tmp/data": "/my/local/data"
        },
        "cluster_synced_files": [
          "/some/data/somewhere"
        ],
        "file_mounts_sync_continuously": true,
        "rsync_exclude": [
          ".git"
        ],
        "rsync_filter": [
          ".gitignore"
        ],
        "metadata": {
          "user-defined-data": "some-value"
        },
        "initialization_commands": [
          "echo 'Initializing...'",
          "sleep 5"
        ],
        "setup_commands": [
          "echo 'Setting up...'",
          "apt-get update"
        ],
        "head_setup_commands": [
          "echo 'Setting up head...'",
          "apt-get install -y python3"
        ],
        "worker_setup_commands": [
          "echo 'Setting up worker...'",
          "apt-get install -y python3"
        ],
        "head_start_ray_commands": [
          "ray start --head --port=6379"
        ],
        "worker_start_ray_commands": [
          "ray start --address='auto:6379'"
        ],
        "available_node_types": {
          "node-type-1": {
            "node_config": {
              "InstanceType": "c5.xlarge"
            },
            "min_workers": 0,
            "max_workers": 10,
            "resources": {
              "CPU": -1,
              "Invalid resource value. patternProperties in schema does not allow negative integers": "GPU",
              "memory": 16
            },
            "labels": {
              "node-type": "node-type-1"
            },
            "initialization_commands": [
              "echo 'Initializing node-type-1...'",
              "sleep 5"
            ],
            "worker_setup_commands": [
              "echo 'Setting up node-type-1...'",
              "apt-get install -y python3"
            ],
            "docker": {
              "pull_before_run": true,
              "worker_image": "rayproject/ray:latest",
              "worker_run_options": [
                "--shm-size=1g"
              ]
            }
          },
          "node-type-2": {
            "node_config": {
              "InstanceType": "c5.2xlarge"
            },
            "min_workers": 0,
            "max_workers": 10,
            "resources": {
              "CPU": 8,
              "GPU": 0,
              "memory": 32
            },
            "labels": {
              "node-type": "node-type-2"
            },
            "initialization_commands": [
              "echo 'Initializing node-type-2...'",
              "sleep 5"
            ],
            "worker_setup_commands": [
              "echo 'Setting up node-type-2...'",
              "apt-get install -y python3"
            ],
            "docker": {
              "pull_before_run": true,
              "worker_image": "rayproject/ray:latest",
              "worker_run_options": [
                "--shm-size=2g"
              ]
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative; focus on type keyword with an array of types",
      "valid": false,
      "rust_error": "12345 is not of types \"null\", \"string\"",
      "python_error": "12345 is not of type 'string', 'null'\n\nFailed validating 'type' in schema['properties']['provider']['properties']['project_id']:\n    {'type': ['string', 'null'],\n     'description': 'GCP globally unique project id'}\n\nOn instance['provider']['project_id']:\n    12345",
      "data": {
        "cluster_name": "my-ray-cluster",
        "provider": {
          "type": "aws",
          "region": "us-east-1",
          "availability_zone": "us-east-1a",
          "head_ip": "10.0.0.1",
          "worker_ips": [
            "10.0.0.2",
            "10.0.0.3"
          ],
          "use_internal_ips": true,
          "security_group": {
            "GroupName": "my-security-group",
            "IpPermissions": [
              {
                "IpProtocol": "tcp",
                "FromPort": 22,
                "ToPort": 22,
                "IpRanges": [
                  {
                    "CidrIp": "0.0.0.0/0"
                  }
                ]
              }
            ]
          },
          "project_id": 12345,
          "gcp_credentials": {
            "type": "credentials_token",
            "credentials": "oauth token"
          }
        },
        "auth": {
          "ssh_user": "ubuntu",
          "ssh_public_key": "~/.ssh/id_rsa.pub",
          "ssh_private_key": "~/.ssh/id_rsa"
        },
        "docker": {
          "image": "rayproject/ray:latest",
          "container_name": "ray_docker",
          "pull_before_run": true,
          "run_options": [
            "--shm-size=1g"
          ],
          "head_image": "rayproject/ray:latest",
          "head_run_options": [
            "--shm-size=2g"
          ],
          "worker_image": "rayproject/ray:latest",
          "worker_run_options": [
            "--shm-size=1g"
          ]
        },
        "file_mounts": {
          "/tmp/data": "/my/local/data"
        },
        "cluster_synced_files": [
          "/some/data/somewhere"
        ],
        "file_mounts_sync_continuously": true,
        "rsync_exclude": [
          ".git"
        ],
        "rsync_filter": [
          ".gitignore"
        ],
        "metadata": {
          "user-defined-data": "some-value"
        },
        "initialization_commands": [
          "echo 'Initializing...'",
          "sleep 5"
        ],
        "setup_commands": [
          "echo 'Setting up...'",
          "apt-get update"
        ],
        "head_setup_commands": [
          "echo 'Setting up head...'",
          "apt-get install -y python3"
        ],
        "worker_setup_commands": [
          "echo 'Setting up worker...'",
          "apt-get install -y python3"
        ],
        "head_start_ray_commands": [
          "ray start --head --port=6379"
        ],
        "worker_start_ray_commands": [
          "ray start --address='auto:6379'"
        ],
        "available_node_types": {
          "node-type-1": {
            "node_config": {
              "InstanceType": "c5.xlarge"
            },
            "min_workers": 0,
            "max_workers": 10,
            "resources": {
              "CPU": 4,
              "GPU": 0,
              "memory": 16
            },
            "labels": {
              "node-type": "node-type-1"
            },
            "initialization_commands": [
              "echo 'Initializing node-type-1...'",
              "sleep 5"
            ],
            "worker_setup_commands": [
              "echo 'Setting up node-type-1...'",
              "apt-get install -y python3"
            ],
            "docker": {
              "pull_before_run": true,
              "worker_image": "rayproject/ray:latest",
              "worker_run_options": [
                "--shm-size=1g"
              ]
            }
          },
          "node-type-2": {
            "node_config": {
              "InstanceType": "c5.2xlarge"
            },
            "min_workers": 0,
            "max_workers": 10,
            "resources": {
              "CPU": 8,
              "GPU": 0,
              "memory": 32
            },
            "labels": {
              "node-type": "node-type-2"
            },
            "initialization_commands": [
              "echo 'Initializing node-type-2...'",
              "sleep 5"
            ],
            "worker_setup_commands": [
              "echo 'Setting up node-type-2...'",
              "apt-get install -y python3"
            ],
            "docker": {
              "pull_before_run": true,
              "worker_image": "rayproject/ray:latest",
              "worker_run_options": [
                "--shm-size=2g"
              ]
            }
          }
        }
      }
    },
    {
      "description": "llama-70b generated negative",
      "valid": false,
      "rust_error": "Additional properties are not allowed ('invalid_property' was unexpected)",
      "python_error": "Additional properties are not allowed ('invalid_property' was unexpected)\n\nFailed validating 'additionalProperties' in schema:\n    {'$schema': 'http://json-schema.org/draft-07/schema#',\n     '$id': 'http://github.com/ray-project/ray/python/ray/autoscaler/ray-schema.json',\n     'title': 'Ray AutoScaler',\n     'description': 'Ray autoscaler schema',\n     'type': 'object',\n     'definitions': {'commands': {'type': 'array',\n                                  'items': {'type': 'string',\n                                            'description': 'shell '\n                                                           'command'}}},\n     'required': ['cluster_name', 'provider'],\n     'additionalProperties': False,\n     'properties': {'cluster_name': {'description': 'A unique identifier '\n                                                    'for the head node and '\n                                                    'workers of this '\n                                                    'cluster.',\n                           .. (72453 more)",
      "data": {
        "cluster_name": "my-ray-cluster",
        "provider": {
          "type": "aws",
          "region": "us-east-1",
          "head_ip": "10.0.0.1",
          "worker_ips": [
            "10.0.0.2",
            "10.0.0.3"
          ],
          "use_internal_ips": true,
          "availability_zone": "us-east-1a",
          "security_group": {
            "GroupName": "my-security-group",
            "IpPermissions": [
              {
                "IpProtocol": "tcp",
                "FromPort": 22,
                "ToPort": 22,
                "IpRanges": [
                  {
                    "CidrIp": "0.0.0.0/0"
                  }
                ]
              }
            ]
          }
        },
        "auth": {
          "ssh_user": "ubuntu",
          "ssh_public_key": "~/.ssh/id_rsa.pub",
          "ssh_private_key": "~/.ssh/id_rsa"
        },
        "docker": {
          "image": "rayproject/ray:latest",
          "container_name": "ray_docker",
          "pull_before_run": true,
          "run_options": [
            "--shm-size=1g"
          ],
          "head_image": "rayproject/ray:latest",
          "head_run_options": [
            "--shm-size=2g"
          ],
          "worker_image": "rayproject/ray:latest",
          "worker_run_options": [
            "--shm-size=1g"
          ]
        },
        "file_mounts": {
          "/tmp/data": "/my/local/data"
        },
        "cluster_synced_files": [
          "/some/data/somewhere"
        ],
        "file_mounts_sync_continuously": true,
        "rsync_exclude": [
          ".git"
        ],
        "rsync_filter": [
          ".gitignore"
        ],
        "metadata": {
          "user-defined-data": "some-value"
        },
        "initialization_commands": [
          "echo 'Initializing...'",
          "sleep 5"
        ],
        "setup_commands": [
          "echo 'Setting up...'",
          "apt-get update"
        ],
        "head_setup_commands": [
          "echo 'Setting up head...'",
          "apt-get install -y python3"
        ],
        "worker_setup_commands": [
          "echo 'Setting up worker...'",
          "apt-get install -y python3"
        ],
        "head_start_ray_commands": [
          "ray start --head --port=6379"
        ],
        "worker_start_ray_commands": [
          "ray start --address='auto:6379'"
        ],
        "available_node_types": {
          "node-type-1": {
            "node_config": {
              "InstanceType": "c5.xlarge"
            },
            "min_workers": -1,
            "max_workers": 10,
            "resources": {
              "CPU": 4,
              "GPU": 0,
              "memory": 16
            },
            "labels": {
              "node-type": "node-type-1"
            },
            "initialization_commands": [
              "echo 'Initializing node-type-1...'",
              "sleep 5"
            ],
            "worker_setup_commands": [
              "echo 'Setting up node-type-1...'",
              "apt-get install -y python3"
            ],
            "docker": {
              "pull_before_run": true,
              "worker_image": "rayproject/ray:latest",
              "worker_run_options": [
                "--shm-size=1g"
              ]
            }
          },
          "node-type-2": {
            "node_config": {
              "InstanceType": "c5.2xlarge"
            },
            "min_workers": 0,
            "max_workers": 10,
            "resources": {
              "CPU": 8,
              "GPU": 0,
              "memory": 32
            },
            "labels": {
              "node-type": "node-type-2"
            },
            "initialization_commands": [
              "echo 'Initializing node-type-2...'",
              "sleep 5"
            ],
            "worker_setup_commands": [
              "echo 'Setting up node-type-2...'",
              "apt-get install -y python3"
            ],
            "docker": {
              "pull_before_run": true,
              "worker_image": "rayproject/ray:latest",
              "worker_run_options": [
                "--shm-size=2g"
              ]
            }
          }
        },
        "invalid_property": "invalid_value"
      }
    }
  ]
}